// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ workflow
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ workflow...\n');

// –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
const basicWorkflowTemplate = {
  id: 'basic_workflow',
  name: '–ë–∞–∑–æ–≤—ã–π workflow',
  nodes: [
    {
      id: 'start-trigger',
      type: 'trigger.command',
      config: { 'trigger.command': { command: '/start' } }
    },
    {
      id: 'welcome-message',
      type: 'message',
      config: { message: { text: '–ü—Ä–∏–≤–µ—Ç!', buttons: [{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callbackData: 'start_demo' }] } }
    },
    {
      id: 'callback-trigger',
      type: 'trigger.callback',
      config: { 'trigger.callback': { callbackData: 'start_demo' } }
    },
    {
      id: 'demo-message',
      type: 'message',
      config: { message: { text: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' } }
    },
    {
      id: 'workflow-end',
      type: 'flow.end',
      config: { 'flow.end': { success: true } }
    }
  ],
  connections: [
    { id: 'start-to-welcome', source: 'start-trigger', target: 'welcome-message' },
    { id: 'callback-to-demo', source: 'callback-trigger', target: 'demo-message' },
    { id: 'demo-to-end', source: 'demo-message', target: 'workflow-end' }
  ]
};

// –ü—Ä–æ–≤–µ—Ä–∫–∏
const checks = [
  {
    name: '–í—Å–µ –Ω–æ–¥—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã',
    check: () => basicWorkflowTemplate.nodes.every(node =>
      ['trigger.command', 'trigger.callback', 'message', 'flow.end'].includes(node.type)
    )
  },
  {
    name: '–ö–æ–º–∞–Ω–¥–∞ /start –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
    check: () => basicWorkflowTemplate.nodes.find(n => n.id === 'start-trigger')?.config?.['trigger.command']?.command === '/start'
  },
  {
    name: 'Callback –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω',
    check: () => basicWorkflowTemplate.nodes.find(n => n.id === 'callback-trigger')?.config?.['trigger.callback']?.callbackData === 'start_demo'
  },
  {
    name: '–í—Å–µ connections –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
    check: () => basicWorkflowTemplate.connections.every(conn =>
      conn.source && conn.target && conn.id
    )
  },
  {
    name: '–õ–æ–≥–∏–∫–∞ workflow –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
    check: () => {
      const startToWelcome = basicWorkflowTemplate.connections.find(c => c.id === 'start-to-welcome');
      const callbackToDemo = basicWorkflowTemplate.connections.find(c => c.id === 'callback-to-demo');
      const demoToEnd = basicWorkflowTemplate.connections.find(c => c.id === 'demo-to-end');

      return startToWelcome?.source === 'start-trigger' && startToWelcome?.target === 'welcome-message' &&
             callbackToDemo?.source === 'callback-trigger' && callbackToDemo?.target === 'demo-message' &&
             demoToEnd?.source === 'demo-message' && demoToEnd?.target === 'workflow-end';
    }
  }
];

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
checks.forEach(({ name, check }) => {
  const result = check();
  const status = result ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${name}`);
});

console.log('\nüìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –Ω–æ–¥ –≤ —à–∞–±–ª–æ–Ω–∞—Ö');
console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏');
console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ workflow');
console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ workflow');

console.log('\nüéâ –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

console.log('\nüìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:');
console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Workflow Constructor');
console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω "–ë–∞–∑–æ–≤—ã–π workflow"');
console.log('3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ workflow');
console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram –±–æ—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start');
