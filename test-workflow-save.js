// –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workflow
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workflow...\n');

// –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö workflow
const workflowData = {
  name: '–¢–µ—Å—Ç–æ–≤—ã–π workflow',
  description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
  nodes: [
    {
      id: 'start-trigger',
      type: 'trigger.command',
      position: { x: 50, y: 50 },
      data: {
        label: '–°—Ç–∞—Ä—Ç –±–æ—Ç–∞',
        config: {
          'trigger.command': { command: '/start' }
        }
      }
    },
    {
      id: 'welcome-message',
      type: 'message',
      position: { x: 350, y: 50 },
      data: {
        label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
        config: {
          message: {
            text: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.',
            buttons: [
              {
                text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                callbackData: 'test_callback'
              }
            ]
          }
        }
      }
    },
    {
      id: 'callback-trigger',
      type: 'trigger.callback',
      position: { x: 50, y: 250 },
      data: {
        label: 'Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫',
        config: {
          'trigger.callback': { callbackData: 'test_callback' }
        }
      }
    },
    {
      id: 'end-message',
      type: 'message',
      position: { x: 350, y: 250 },
      data: {
        label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
        config: {
          message: {
            text: '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ'
          }
        }
      }
    },
    {
      id: 'workflow-end',
      type: 'flow.end',
      position: { x: 650, y: 250 },
      data: {
        label: '–ö–æ–Ω–µ—Ü',
        config: {
          'flow.end': { success: true }
        }
      }
    }
  ],
  connections: [
    {
      id: 'start-to-welcome',
      source: 'start-trigger',
      target: 'welcome-message',
      sourceHandle: 'output',
      targetHandle: 'input',
      type: 'default'
    },
    {
      id: 'callback-to-end',
      source: 'callback-trigger',
      target: 'end-message',
      sourceHandle: 'output',
      targetHandle: 'input',
      type: 'default'
    },
    {
      id: 'end-to-finish',
      source: 'end-message',
      target: 'workflow-end',
      sourceHandle: 'output',
      targetHandle: 'input',
      type: 'default'
    }
  ],
  variables: [],
  settings: {
    maxExecutionTime: 30000,
    retryAttempts: 3
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∏
const checks = [
  {
    name: '–ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω trigger node',
    check: () => workflowData.nodes.some(node => node.type.startsWith('trigger.'))
  },
  {
    name: '–ü–µ—Ä–≤—ã–π trigger node –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
    check: () => {
      const entryNode = workflowData.nodes.find(node => node.type.startsWith('trigger.'));
      return entryNode && entryNode.id === 'start-trigger';
    }
  },
  {
    name: '–í—Å–µ connections –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
    check: () => workflowData.connections.every(conn =>
      conn.source && conn.target && conn.id && conn.sourceHandle && conn.targetHandle
    )
  },
  {
    name: 'Workflow —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
    check: () => {
      const hasTrigger = workflowData.nodes.some(n => n.type.startsWith('trigger.'));
      const hasMessage = workflowData.nodes.some(n => n.type === 'message');
      const hasEnd = workflowData.nodes.some(n => n.type === 'flow.end');
      const hasConnections = workflowData.connections.length > 0;

      return hasTrigger && hasMessage && hasEnd && hasConnections;
    }
  }
];

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
let allPassed = true;
checks.forEach(({ name, check }) => {
  const result = check();
  const status = result ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${name}`);
  if (!result) allPassed = false;
});

console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
if (allPassed) {
  console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! Workflow –≥–æ—Ç–æ–≤ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é.');
  console.log('‚úÖ Entry node –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ "start-trigger"');
  console.log('‚úÖ WorkflowVersion –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º entryNodeId');
} else {
  console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å workflow.');
}

console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
console.log('- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è entry node');
console.log('- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ "Argument entryNodeId is missing"');
console.log('- ‚úÖ Workflow —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫');

console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å workflow –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
console.log('3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ workflow –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram');
