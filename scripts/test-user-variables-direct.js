const { PrismaClient } = require('@prisma/client');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UserVariablesService —á–µ—Ä–µ–∑ require (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ TypeScript)
try {
  const { UserVariablesService } = require(path.join(__dirname, '..', 'src', 'lib', 'services', 'workflow', 'user-variables.service'));
  const prisma = new PrismaClient();

  async function testUserVariables() {
    try {
      const userId = 'cmh32zyum0005v8kku0wgozw9';
      const projectId = 'cmh2d0uv30000v8h8ujr7u233';

      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º UserVariablesService –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      const userVariables = await UserVariablesService.getUserVariables(
        prisma,
        userId,
        projectId
      );

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ userVariables:');
      Object.keys(userVariables).forEach(key => {
        if (key.includes('expiringBonuses')) {
          console.log(`   ${key}: "${userVariables[key]}"`);
        }
      });

      console.log('\nüéØ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
      Object.keys(userVariables).forEach(key => {
        console.log(`   ${key}: "${userVariables[key]}"`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      console.error('Stack:', error.stack);
    } finally {
      await prisma.$disconnect();
    }
  }

  testUserVariables();

} catch (error) {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å UserVariablesService:', error.message);
  console.log('–ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...');
}
