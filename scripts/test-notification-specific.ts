/**
 * @file: test-notification-specific.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * @project: SaaS Bonus System
 * @dependencies: fetch
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

async function testNotificationSpecific() {
  try {
    const projectId = 'cmdkloj85000cv8o0611rblp3';

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');

    // ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å–æ–∑–¥–∞–ª–∏
    const userIds = ['cme01k6pv0001v8nwgz62sxma'];

    const payload = {
      message: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!',
      imageUrl: undefined,
      buttons: undefined,
      parseMode: 'Markdown',
      userIds: userIds
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    console.log('User IDs:', userIds);
    console.log('Payload:', JSON.stringify(payload, null, 2));

    const response = await fetch(
      `http://localhost:5006/api/projects/${projectId}/notifications`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }
    );

    const result = await response.json();

    console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('Status:', response.status);
    console.log('Result:', JSON.stringify(result, null, 2));

    if (response.ok) {
      console.log('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testNotificationSpecific();
