/**
 * @file: scripts/test-user-variables.ts
 * @description: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @project: SaaS Bonus System
 * @created: 2025-10-15
 * @author: AI Assistant + User
 */

import { PrismaClient } from '@prisma/client';
import { UserVariablesService } from '../src/lib/services/workflow/user-variables.service';
import { ProjectVariablesService } from '../src/lib/services/project-variables.service';

const prisma = new PrismaClient();

async function testUserVariables() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findFirst({
      where: { isActive: true },
      select: { id: true, firstName: true, projectId: true }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${user.firstName} (${user.id})`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º UserVariablesService
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UserVariablesService...');
    const userVariables = await UserVariablesService.getUserVariables(
      prisma,
      user.id,
      user.projectId
    );

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${Object.keys(userVariables).length}`);
    console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:');
    Object.entries(userVariables).slice(0, 10).forEach(([key, value]) => {
      console.log(`  ${key}: ${value}`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');
    const testText = `
–ü—Ä–∏–≤–µ—Ç, {user.firstName}!
–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balanceFormatted}
–£—Ä–æ–≤–µ–Ω—å: {user.currentLevel}
–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user.referralCode}
    `.trim();

    console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:');
    console.log(testText);

    const replacedText = await ProjectVariablesService.replaceVariablesInText(
      user.projectId,
      testText,
      userVariables
    );

    console.log('\n‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã:');
    console.log(replacedText);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const unreplacedVars = replacedText.match(/\{[^}]+\}/g);
    if (unreplacedVars) {
      console.log('\n‚ö†Ô∏è –ù–µ –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', unreplacedVars);
    } else {
      console.log('\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testUserVariables();
