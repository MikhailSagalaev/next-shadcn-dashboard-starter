/**
 * @file: scripts/rollback-migration.ts
 * @description: –°–∫—Ä–∏–ø—Ç –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable
 * @project: SaaS Bonus System
 * @dependencies: Prisma
 * @created: 2025-09-25
 * @author: AI Assistant
 */

import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

interface RollbackStats {
  usersDeleted: number;
  transactionsDeleted: number;
  bonusesDeleted: number;
  notificationsDeleted: number;
}

class MigrationRollbackService {
  private stats: RollbackStats = {
    usersDeleted: 0,
    transactionsDeleted: 0,
    bonusesDeleted: 0,
    notificationsDeleted: 0
  };

  constructor(private projectId: string) {}

  async rollback(): Promise<void> {
    console.log('‚ö†Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
    console.log(`üè¢ –ü—Ä–æ–µ–∫—Ç: ${this.projectId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const project = await prisma.project.findUnique({
      where: { id: this.projectId }
    });

    if (!project) {
      throw new Error(`–ü—Ä–æ–µ–∫—Ç —Å ID ${this.projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${project.name}`);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    await this.createBackup();

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüö® –í–ù–ò–ú–ê–ù–ò–ï!');
    console.log(
      '–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'
    );
    console.log('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ backup_rollback.json');
    console.log('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)');

    // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmed =
      process.env.SKIP_CONFIRMATION === 'true' ||
      (await this.getUserConfirmation());

    if (!confirmed) {
      console.log('‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      return;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∫–∞—Ç
    await this.performRollback();

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.printFinalStats();
  }

  private async createBackup(): Promise<void> {
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
    const users = await prisma.user.findMany({
      where: { projectId: this.projectId },
      include: {
        bonuses: true,
        transactions: true,
        notifications: true
      }
    });

    const backup = {
      timestamp: new Date().toISOString(),
      projectId: this.projectId,
      users: users
    };

    const backupPath = path.join(
      process.cwd(),
      `backup_rollback_${Date.now()}.json`
    );
    fs.writeFileSync(backupPath, JSON.stringify(backup, null, 2));

    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
  }

  private async getUserConfirmation(): Promise<boolean> {
    return new Promise((resolve) => {
      process.stdin.setEncoding('utf8');
      process.stdin.once('data', (input) => {
        const answer = input.toString().trim().toLowerCase();
        resolve(answer === 'y' || answer === 'yes');
      });
    });
  }

  private async performRollback(): Promise<void> {
    console.log('üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const userCount = await prisma.user.count({
      where: { projectId: this.projectId }
    });

    const transactionCount = await prisma.transaction.count({
      where: {
        user: {
          projectId: this.projectId
        }
      }
    });

    const bonusCount = await prisma.bonus.count({
      where: {
        user: {
          projectId: this.projectId
        }
      }
    });

    const notificationCount = await prisma.notification.count({
      where: {
        user: {
          projectId: this.projectId
        }
      }
    });

    console.log(`üìä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionCount}`);
    console.log(`   –ë–æ–Ω—É—Å–æ–≤: ${bonusCount}`);
    console.log(`   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationCount}`);

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const notificationsDeleted = await prisma.notification.deleteMany({
      where: {
        user: {
          projectId: this.projectId
        }
      }
    });
    this.stats.notificationsDeleted = notificationsDeleted.count;

    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤...');
    const bonusesDeleted = await prisma.bonus.deleteMany({
      where: {
        user: {
          projectId: this.projectId
        }
      }
    });
    this.stats.bonusesDeleted = bonusesDeleted.count;

    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const transactionsDeleted = await prisma.transaction.deleteMany({
      where: {
        user: {
          projectId: this.projectId
        }
      }
    });
    this.stats.transactionsDeleted = transactionsDeleted.count;

    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersDeleted = await prisma.user.deleteMany({
      where: { projectId: this.projectId }
    });
    this.stats.usersDeleted = usersDeleted.count;

    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
  }

  private printFinalStats(): void {
    console.log('\nüéâ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:');
    console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: ${this.stats.usersDeleted}`);
    console.log(`   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–æ: ${this.stats.transactionsDeleted}`);
    console.log(`   ‚ùå –ë–æ–Ω—É—Å–æ–≤ —É–¥–∞–ª–µ–Ω–æ: ${this.stats.bonusesDeleted}`);
    console.log(
      `   ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ: ${this.stats.notificationsDeleted}`
    );

    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:');
    console.log('–ü—Ä–æ–µ–∫—Ç –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    console.log('–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.');
  }

  async restoreFromBackup(backupPath: string): Promise<void> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    console.log(`üìÅ –§–∞–π–ª: ${backupPath}`);

    if (!fs.existsSync(backupPath)) {
      throw new Error(`–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupPath}`);
    }

    const backup = JSON.parse(fs.readFileSync(backupPath, 'utf8'));

    if (backup.projectId !== this.projectId) {
      throw new Error(
        `–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—É ${this.projectId}`
      );
    }

    console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ${backup.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userData of backup.users) {
      const { bonuses, transactions, notifications, ...userFields } = userData;

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.create({
        data: {
          ...userFields,
          bonuses: {
            create: bonuses.map((b: any) => ({
              amount: b.amount,
              type: b.type,
              description: b.description,
              expiresAt: b.expiresAt,
              isUsed: b.isUsed
            }))
          },
          transactions: {
            create: transactions.map((t: any) => ({
              amount: t.amount,
              type: t.type,
              description: t.description,
              metadata: t.metadata
            }))
          },
          notifications: {
            create: notifications.map((n: any) => ({
              type: n.type,
              title: n.title,
              message: n.message,
              isRead: n.isRead,
              metadata: n.metadata
            }))
          }
        }
      });

      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${user.firstName} ${user.lastName || ''}`);
    }

    console.log('üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (command === 'rollback' && args.length === 2) {
    const [, projectId] = args;
    const rollback = new MigrationRollbackService(projectId);
    await rollback.rollback();
  } else if (command === 'restore' && args.length === 3) {
    const [, projectId, backupPath] = args;
    const rollback = new MigrationRollbackService(projectId);
    await rollback.restoreFromBackup(backupPath);
  } else {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.error('  –û—Ç–∫–∞—Ç: npm run rollback-migration <project-id>');
    console.error(
      '  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: npm run rollback-migration restore <project-id> <backup-path>'
    );
    console.error('');
    console.error('–ü—Ä–∏–º–µ—Ä—ã:');
    console.error('  npm run rollback-migration proj_123456');
    console.error(
      '  npm run rollback-migration restore proj_123456 backup_rollback_123456.json'
    );
    process.exit(1);
  }

  await prisma.$disconnect();
}

if (require.main === module) {
  main().catch(console.error);
}

export { MigrationRollbackService };
