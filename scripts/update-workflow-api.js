const fs = require('fs');
const path = require('path');
const http = require('http');

async function updateWorkflowAPI() {
  try {
    // –ß–∏—Ç–∞–µ–º workflow –∏–∑ —Ñ–∞–π–ª–∞
    const workflowPath = path.join(__dirname, '..', '–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è).json');
    const workflowData = JSON.parse(fs.readFileSync(workflowPath, 'utf8'));

    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º workflow –Ω–∞ API...');

    const postData = JSON.stringify({
      name: workflowData.name,
      description: workflowData.description,
      nodes: workflowData.nodes,
      connections: workflowData.connections,
      variables: workflowData.variables,
      settings: workflowData.settings,
      isActive: workflowData.isActive
    });

    const options = {
      hostname: 'localhost',
      port: 5006,
      path: `/api/projects/${workflowData.projectId}/workflows/${workflowData.id}`,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log('‚úÖ Workflow —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API');
          console.log('üìä –û—Ç–≤–µ—Ç:', data);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ API:', res.statusCode, data);
        }
      });
    });

    req.on('error', (e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
    });

    req.write(postData);
    req.end();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

updateWorkflowAPI();
