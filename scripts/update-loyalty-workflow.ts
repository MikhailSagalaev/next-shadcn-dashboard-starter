/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workflow "–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏" –≤ –ë–î
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π workflow —Å flow.wait_contact –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–π
 */

import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

async function main() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow...\n');

    // –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    const templatePath = path.join(process.cwd(), '–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (—à–∞–±–ª–æ–Ω) (2).json');
    const templateContent = fs.readFileSync(templatePath, 'utf-8');
    const template = JSON.parse(templateContent);

    console.log('‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    const projects = await prisma.project.findMany({
      select: { id: true, name: true }
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}\n`);

    for (const project of projects) {
      console.log(`\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${project.name} (${project.id})`);

      // –ù–∞—Ö–æ–¥–∏–º workflow "–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"
      const workflows = await prisma.workflow.findMany({
        where: {
          projectId: project.id,
          name: {
            contains: '–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'
          }
        }
      });

      if (workflows.length === 0) {
        console.log('   ‚è≠Ô∏è  Workflow –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        continue;
      }

      for (const workflow of workflows) {
        console.log(`   üìù –û–±–Ω–æ–≤–ª—è–µ–º workflow: ${workflow.name}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–¥–∞ flow.wait_contact
        const nodes = workflow.nodes as any[];
        const hasWaitContact = nodes.some((node: any) => node.type === 'flow.wait_contact');

        if (!hasWaitContact) {
          console.log('   ‚úÖ Workflow —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω (–Ω–µ—Ç flow.wait_contact)');
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º workflow
        await prisma.workflow.update({
          where: { id: workflow.id },
          data: {
            nodes: template.nodes,
            connections: template.connections
          }
        });

        console.log('   ‚úÖ Workflow –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ');

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
        await prisma.workflowVersion.updateMany({
          where: { workflowId: workflow.id },
          data: { isActive: false }
        });

        console.log('   ‚úÖ –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
      }
    }

    console.log('\n‚úÖ –í—Å–µ workflow –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();

