const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUserData() {
  try {
    const userId = 'cmh32zyum0005v8kku0wgozw9';
    const projectId = 'cmh2d0uv30000v8h8ujr7u233';

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // 1. –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    // 2. –í—Å–µ –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const bonuses = await prisma.bonus.findMany({
      where: { userId: userId },
      orderBy: { createdAt: 'desc' }
    });

    console.log('üéÅ –í—Å–µ –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', bonuses.length, '—à—Ç.');
    bonuses.slice(0, 5).forEach(b => console.log(`  - ${b.amount}‚ÇΩ (${b.type}) expires: ${b.expiresAt || 'never'}`));

    // 3. –ë–æ–Ω—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
    const thirtyDaysFromNow = new Date();
    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);

    const expiringBonuses = await prisma.bonus.findMany({
      where: {
        userId: userId,
        expiresAt: {
          not: null,
          lte: thirtyDaysFromNow,
          gt: new Date()
        },
        isUsed: false
      }
    });

    console.log('‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –±–æ–Ω—É—Å—ã (30 –¥–Ω–µ–π):', expiringBonuses.length, '—à—Ç.');
    expiringBonuses.forEach(b => console.log(`  - ${b.amount}‚ÇΩ expires: ${b.expiresAt}`));

    // 4. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const transactions = await prisma.transaction.findMany({
      where: { userId: userId },
      orderBy: { createdAt: 'desc' },
      take: 10
    });

    console.log('üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactions.length, '—à—Ç.');
    transactions.forEach(t => console.log(`  - ${t.type}: ${t.amount}‚ÇΩ (${t.description})`));

    // 5. –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º –≤—Ä—É—á–Ω—É—é (–∫–∞–∫ –≤ QueryExecutor)
    const totalEarned = transactions
      .filter(t => t.type === 'EARN')
      .reduce((sum, t) => sum + Number(t.amount), 0);

    const totalSpent = Math.abs(transactions
      .filter(t => t.type === 'SPEND')
      .reduce((sum, t) => sum + Number(t.amount), 0));

    const totalPurchasesCount = transactions
      .filter(t => t.type === 'PURCHASE')
      .length;

    const expiringAmount = expiringBonuses
      .reduce((sum, b) => sum + b.amount, 0);

    console.log('\nüìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —Å—É–º–º—ã:');
    console.log('   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:', totalEarned);
    console.log('   –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:', totalSpent);
    console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫:', totalPurchasesCount);
    console.log('   –ò—Å—Ç–µ–∫–∞–µ—Ç –±–æ–Ω—É—Å–æ–≤:', expiringAmount);

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
    const activeBonuses = bonuses.filter(b => !b.isUsed && (!b.expiresAt || b.expiresAt > new Date()));
    console.log('\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã:', activeBonuses.length, '—à—Ç.');
    activeBonuses.forEach(b => console.log(`  - ${b.amount}‚ÇΩ (${b.type}) expires: ${b.expiresAt || 'never'}`));

    // 8. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º balance –∫–∞–∫ —Å—É–º–º—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    const calculatedBalance = activeBonuses.reduce((sum, b) => sum + Number(b.amount), 0);

    console.log('\nüéØ –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ userVariables:');
    console.log('   user.balanceFormatted:', `${calculatedBalance} –±–æ–Ω—É—Å–æ–≤`);
    console.log('   user.totalEarnedFormatted:', `${totalEarned} –±–æ–Ω—É—Å–æ–≤`);
    console.log('   user.totalSpentFormatted:', `${totalSpent} –±–æ–Ω—É—Å–æ–≤`);
    console.log('   user.totalPurchasesFormatted:', `${totalPurchasesCount} –ø–æ–∫—É–ø–æ–∫`);
    console.log('   user.expiringBonusesFormatted:', `${expiringAmount}‚ÇΩ`);

    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ç–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ QueryExecutor
    console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:');
    console.log('   –û–∂–∏–¥–∞–µ–º—ã–π balance:', calculatedBalance, '(—Å—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤)');
    console.log('   –û–∂–∏–¥–∞–µ–º—ã–π totalEarned:', totalEarned, '(—Å—É–º–º–∞ EARN —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)');
    console.log('   –û–∂–∏–¥–∞–µ–º—ã–π expiringBonuses:', expiringAmount, '(–±–æ–Ω—É—Å—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ 30 –¥–Ω–µ–π)');

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüèÜ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.currentLevel);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserData();
