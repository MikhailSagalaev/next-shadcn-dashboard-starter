/**
 * @file: scripts/check-local-development.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * @project: SaaS Bonus System
 * @dependencies: Bot, logger
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

import { Bot } from 'grammy';
import { logger } from '../src/lib/logger';

async function checkLocalDevelopment() {
  console.log('üè† –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò');
  console.log('=' .repeat(60));

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('\nüìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
  console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`NEXT_PUBLIC_APP_URL: ${process.env.NEXT_PUBLIC_APP_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`APP_URL: ${process.env.APP_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  
  const isLocalDev = process.env.NODE_ENV === 'development';
  console.log(`–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${isLocalDev ? '‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' : '‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω'}`);

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
  const webhookUrl = process.env.NEXT_PUBLIC_APP_URL || process.env.APP_URL || 'http://localhost:5006';
  const isHttps = webhookUrl.startsWith('https://');
  console.log(`Webhook URL: ${webhookUrl}`);
  console.log(`HTTPS: ${isHttps ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
  console.log(`–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${isLocalDev ? 'Polling (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)' : isHttps ? 'Webhook (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)' : 'Polling (–Ω–µ—Ç HTTPS)'}`);

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js
  console.log('\nüîç –ü–†–û–¶–ï–°–°–´ NODE.JS:');
  try {
    const { exec } = require('child_process');
    const { promisify } = require('util');
    const execAsync = promisify(exec);
    
    const { stdout } = await execAsync('ps aux | grep node | grep -v grep');
    const processes = stdout.trim().split('\n').filter(line => line.trim());
    
    if (processes.length === 0) {
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${processes.length}`);
      processes.forEach((process, index) => {
        console.log(`  ${index + 1}. ${process.trim()}`);
      });
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error instanceof Error ? error.message : 'Unknown');
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
  console.log('\nüåê –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–û–í:');
  try {
    const { exec } = require('child_process');
    const { promisify } = require('util');
    const execAsync = promisify(exec);
    
    const ports = ['3000', '5006', '8080'];
    
    for (const port of ports) {
      try {
        const { stdout } = await execAsync(`netstat -tulpn | grep :${port}`);
        if (stdout.trim()) {
          console.log(`–ü–æ—Ä—Ç ${port}: ‚ùå –ó–∞–Ω—è—Ç`);
          console.log(`  ${stdout.trim()}`);
        } else {
          console.log(`–ü–æ—Ä—Ç ${port}: ‚úÖ –°–≤–æ–±–æ–¥–µ–Ω`);
        }
      } catch {
        console.log(`–ü–æ—Ä—Ç ${port}: ‚úÖ –°–≤–æ–±–æ–¥–µ–Ω`);
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤:', error instanceof Error ? error.message : 'Unknown');
  }

  // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  if (!isLocalDev) {
    console.log('‚ö†Ô∏è  NODE_ENV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ development');
    console.log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export NODE_ENV=development');
  }
  
  if (!isHttps && !isLocalDev) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç HTTPS –¥–ª—è webhook —Ä–µ–∂–∏–º–∞');
    console.log('   –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–µ–Ω HTTPS –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ polling');
  }
  
  if (isLocalDev) {
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('   –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è polling —Ä–µ–∂–∏–º');
    console.log('   Webhook –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
  }

  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
  const token = process.argv[2];
  if (token) {
    console.log('\nü§ñ –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê:');
    try {
      const bot = new Bot(token);
      const botInfo = await bot.api.getMe();
      
      console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username}`);
      console.log(`   ID: ${botInfo.id}`);
      console.log(`   –ò–º—è: ${botInfo.first_name}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
      try {
        const webhookInfo = await bot.api.getWebhookInfo();
        if (webhookInfo.url) {
          console.log(`‚ö†Ô∏è  Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookInfo.url}`);
          console.log('   –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã');
          
          if (isLocalDev) {
            console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å webhook –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
            try {
              await bot.api.deleteWebhook({ drop_pending_updates: true });
              console.log('   ‚úÖ Webhook —É–¥–∞–ª–µ–Ω');
            } catch (error) {
              console.log('   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error instanceof Error ? error.message : 'Unknown');
            }
          }
        } else {
          console.log('‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling');
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', error instanceof Error ? error.message : 'Unknown');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error instanceof Error ? error.message : 'Unknown');
      
      if (error instanceof Error && error.message.includes('409')) {
        console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù 409 –ö–û–ù–§–õ–ò–ö–¢!');
        console.log('   –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        console.log('   –†–µ—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã');
      }
    }
  } else {
    console.log('\nüí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
    console.log('   npx tsx scripts/check-local-development.ts <BOT_TOKEN>');
  }

  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkLocalDevelopment()
    .then(() => {
      console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { checkLocalDevelopment };
