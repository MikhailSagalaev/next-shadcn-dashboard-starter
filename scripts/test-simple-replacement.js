// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ TypeScript
function testVariableReplacement() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ ProjectVariablesService
  const text = '–ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: {user.expiringBonusesFormatted}';
  const additionalVariables = {
    'user.expiringBonusesFormatted': '0‚ÇΩ',
    'user.firstName': '–¢–µ—Å—Ç',
    'user.balanceFormatted': '400 –±–æ–Ω—É—Å–æ–≤'
  };

  console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:', text);
  console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', additionalVariables);

  let result = text;

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∑–∞–º–µ–Ω—ã
  for (const [key, value] of Object.entries(additionalVariables)) {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {variable_name} –∏ {user.variable}
    const regex1 = new RegExp(`\\{${key}\\}`, 'g');
    const regex2 = new RegExp(`\\{${key.replace(/\./g, '\\.')}\\}`, 'g');

    console.log(`üîÑ –ó–∞–º–µ–Ω—è–µ–º ${key}:`);
    console.log(`   regex1: ${regex1}`);
    console.log(`   regex2: ${regex2}`);
    console.log(`   value: "${value}"`);

    const beforeReplace = result;
    result = result.replace(regex1, value);
    result = result.replace(regex2, value);

    console.log(`   before: "${beforeReplace}"`);
    console.log(`   after:  "${result}"`);

    if (key === 'user.expiringBonusesFormatted') {
      console.log(`üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è expiringBonusesFormatted:`);
      console.log(`   –°–æ–¥–µ—Ä–∂–∞–ª –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–æ –∑–∞–º–µ–Ω—ã: ${beforeReplace.includes('{user.expiringBonusesFormatted}')}`);
      console.log(`   –°–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã: ${result.includes('{user.expiringBonusesFormatted}')}`);
    }
  }

  console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
  console.log('‚ùì –°–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä:', result.includes('{user.expiringBonusesFormatted}'));

  return result;
}

testVariableReplacement();
