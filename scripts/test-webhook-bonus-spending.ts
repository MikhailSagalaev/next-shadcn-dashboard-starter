#!/usr/bin/env npx tsx

import { UserService, BonusService } from '../src/lib/services/user.service';
import { ProjectService } from '../src/lib/services/project.service';

async function testWebhookBonusSpending() {
  try {
    // –î–∞–Ω–Ω—ã–µ –∏–∑ webhook'–∞
    const webhookData = {
      Name: '–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤–∏—á –°–∞–≥–∞–ª–∞–µ–≤',
      Email: 'sagalaev.mikhail@yandex.ru',
      Phone: '+7 (962) 002-41-88',
      payment: {
        amount: '4280',
        orderid: '1564748188',
        promocode: 'GUPIL',
        subtotal: '5480',
        discount: '1200'
      },
      appliedBonuses: '1200'
    };

    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∏–∑ webhook');

    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await UserService.findUserByContact(
      'cmfcb42zr0001v8hsk17ou4x9', // projectId
      webhookData.Email,
      webhookData.Phone
    );

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.id}`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
    const balanceBefore = await UserService.getUserBalance(user.id);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è: ${balanceBefore.currentBalance}`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    const promo = webhookData.payment.promocode;
    const isGupilPromo =
      typeof promo === 'string' && promo.trim().toUpperCase() === 'GUPIL';
    const appliedRaw = webhookData.appliedBonuses;
    const appliedRequested = Number(
      typeof appliedRaw === 'string'
        ? appliedRaw.replace(/[^0-9.\-]/g, '')
        : appliedRaw
    );

    console.log(
      `üé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${promo} (${isGupilPromo ? 'GUPIL ‚úÖ' : '–Ω–µ GUPIL ‚ùå'})`
    );
    console.log(`üíé –ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: ${appliedRequested}`);

    if (
      isGupilPromo &&
      Number.isFinite(appliedRequested) &&
      appliedRequested > 0
    ) {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—É–º–º–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
      const applied = Math.min(
        appliedRequested,
        Number(balanceBefore.currentBalance)
      );

      console.log(`üí∏ –°–ø–∏—Å—ã–≤–∞–µ–º: ${applied} –±–æ–Ω—É—Å–æ–≤`);

      if (applied > 0) {
        const transactions = await BonusService.spendBonuses(
          user.id,
          applied,
          `–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ ${webhookData.payment.orderid} (–ø—Ä–æ–º–æ–∫–æ–¥ GUPIL)`,
          {
            orderId: webhookData.payment.orderid,
            source: 'tilda_order',
            promocode: 'GUPIL',
            originalApplied: appliedRequested
          }
        );

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
        for (const tx of transactions) {
          console.log(
            `  ${tx.id} | ${tx.type} | ${tx.amount} | ${tx.description}`
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        const balanceAfter = await UserService.getUserBalance(user.id);
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: ${balanceAfter.currentBalance}`);

        // –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const { transactions: history } = await UserService.getUserTransactions(
          user.id,
          1,
          3
        );
        console.log(`\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
        for (const tx of history) {
          console.log(
            `  ${tx.createdAt} | ${tx.type} | ${tx.amount} | ${tx.description}`
          );
        }
      } else {
        console.log('‚ùå –ù–µ—á–µ–≥–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å - –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é');
      }
    } else {
      console.log('‚ùå –£—Å–ª–æ–≤–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testWebhookBonusSpending();
