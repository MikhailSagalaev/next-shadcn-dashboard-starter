const { PrismaClient } = require('@prisma/client');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UserVariablesService
const tsNode = require('ts-node');
tsNode.register();

const UserVariablesService = require(path.join(__dirname, '..', 'src', 'lib', 'services', 'workflow', 'user-variables.service.ts')).UserVariablesService;

async function testUserVariables() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º UserVariablesService...');

  const prisma = new PrismaClient();

  try {
    const userId = 'cmh32zyum0005v8kku0wgozw9';
    const projectId = 'cmh2d0uv30000v8h8ujr7u233';

    console.log(`üë§ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    const variables = await UserVariablesService.getUserVariables(prisma, userId, projectId);

    console.log('üìã –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', Object.keys(variables));
    console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è expiringBonusesFormatted:', variables['user.expiringBonusesFormatted']);
    console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è expiringBonuses:', variables['user.expiringBonuses']);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    const hasExpiring = 'user.expiringBonusesFormatted' in variables;
    console.log('‚ùì –ï—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è user.expiringBonusesFormatted:', hasExpiring);

    if (hasExpiring) {
      console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ:', variables['user.expiringBonusesFormatted']);
    } else {
      console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testUserVariables();
