/**
 * @file: scripts/validate-migration.ts
 * @description: –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable
 * @project: SaaS Bonus System
 * @dependencies: Prisma
 * @created: 2025-09-25
 * @author: AI Assistant
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface ValidationResult {
  isValid: boolean;
  issues: string[];
  warnings: string[];
  stats: {
    totalUsers: number;
    activeUsers: number;
    totalPurchases: number;
    averagePurchase: number;
    usersWithEmail: number;
    usersWithPhone: number;
    duplicateEmails: number;
    duplicatePhones: number;
    usersWithoutContact: number;
    levelDistribution: Record<string, number>;
  };
}

class MigrationValidator {
  private issues: string[] = [];
  private warnings: string[] = [];

  constructor(private projectId: string) {}

  async validate(): Promise<ValidationResult> {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏...');
    console.log(`üè¢ –ü—Ä–æ–µ–∫—Ç: ${this.projectId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const project = await prisma.project.findUnique({
      where: { id: this.projectId },
      include: {
        users: {
          select: {
            id: true,
            email: true,
            phone: true,
            firstName: true,
            lastName: true,
            totalPurchases: true,
            isActive: true,
            currentLevel: true,
            registeredAt: true
          }
        },
        bonusLevels: true
      }
    });

    if (!project) {
      throw new Error(`–ü—Ä–æ–µ–∫—Ç —Å ID ${this.projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${project.name}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${project.users.length}`);

    const stats = await this.calculateStats(project.users);
    await this.checkDataIntegrity(project.users);
    await this.validateLevels(project.users, project.bonusLevels);

    const isValid = this.issues.length === 0;

    this.printResults(stats, isValid);

    return {
      isValid,
      issues: this.issues,
      warnings: this.warnings,
      stats
    };
  }

  private async calculateStats(
    users: any[]
  ): Promise<ValidationResult['stats']> {
    const totalUsers = users.length;
    const activeUsers = users.filter((u) => u.isActive).length;
    const totalPurchases = users.reduce(
      (sum, u) => sum + Number(u.totalPurchases),
      0
    );
    const averagePurchase = totalUsers > 0 ? totalPurchases / totalUsers : 0;

    const usersWithEmail = users.filter((u) => u.email).length;
    const usersWithPhone = users.filter((u) => u.phone).length;
    const usersWithoutContact = users.filter(
      (u) => !u.email && !u.phone
    ).length;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const emails = users
      .filter((u) => u.email)
      .map((u) => u.email!.toLowerCase());
    const phones = users.filter((u) => u.phone).map((u) => u.phone!);

    const duplicateEmails = emails.length - new Set(emails).size;
    const duplicatePhones = phones.length - new Set(phones).size;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
    const levelDistribution: Record<string, number> = {};
    users.forEach((user) => {
      levelDistribution[user.currentLevel] =
        (levelDistribution[user.currentLevel] || 0) + 1;
    });

    return {
      totalUsers,
      activeUsers,
      totalPurchases,
      averagePurchase,
      usersWithEmail,
      usersWithPhone,
      duplicateEmails,
      duplicatePhones,
      usersWithoutContact,
      levelDistribution
    };
  }

  private async checkDataIntegrity(users: any[]): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∏–º–µ–Ω–∏
    const usersWithoutName = users.filter((u) => !u.firstName && !u.lastName);
    if (usersWithoutName.length > 0) {
      this.warnings.push(`${usersWithoutName.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∏–º–µ–Ω–∏`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const oldRegistrations = users.filter((u) => {
      const regDate = new Date(u.registeredAt);
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
      return regDate < new Date('2020-01-01'); // –î–æ 2020 –≥–æ–¥–∞
    });
    if (oldRegistrations.length > 0) {
      this.warnings.push(
        `${oldRegistrations.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–π –¥–∞—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º –ø–æ–∫—É–ø–æ–∫
    const negativePurchases = users.filter((u) => u.totalPurchases < 0);
    if (negativePurchases.length > 0) {
      this.issues.push(
        `${negativePurchases.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –ø–æ–∫—É–ø–æ–∫`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å—É–º–º (–≤—ã–±—Ä–æ—Å—ã)
    const highPurchases = users.filter((u) => u.totalPurchases > 1000000); // > 1M
    if (highPurchases.length > 0) {
      this.warnings.push(
        `${highPurchases.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π –ø–æ–∫—É–ø–æ–∫ (>1M‚ÇΩ)`
      );
    }
  }

  private async validateLevels(users: any[], levels: any[]): Promise<void> {
    if (!levels || levels.length === 0) {
      this.issues.push('–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Ä–æ–≤–Ω–∏ –±–æ–Ω—É—Å–æ–≤');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
    for (const user of users) {
      const userLevel = levels.find((l) => l.name === user.currentLevel);
      if (!userLevel) {
        this.issues.push(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email || user.phone} –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: ${user.currentLevel}`
        );
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ä–æ–≤–Ω—è —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫
      const shouldBeHigherLevel = levels
        .filter((l) => l.minAmount <= user.totalPurchases)
        .sort((a, b) => b.minAmount - a.minAmount)[0];

      if (
        shouldBeHigherLevel &&
        shouldBeHigherLevel.name !== user.currentLevel
      ) {
        this.warnings.push(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email || user.phone} –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å ${user.currentLevel}, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${shouldBeHigherLevel.name} (–ø–æ–∫—É–ø–∫–∏: ${user.totalPurchases}‚ÇΩ)`
        );
      }
    }
  }

  private printResults(
    stats: ValidationResult['stats'],
    isValid: boolean
  ): void {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${isValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã'}`);

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers}`);
    console.log(
      `   –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${stats.totalPurchases.toLocaleString()}‚ÇΩ`
    );
    console.log(
      `   –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${stats.averagePurchase.toFixed(2)}‚ÇΩ`
    );

    console.log('\nüìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log(`   –° email: ${stats.usersWithEmail}`);
    console.log(`   –° —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${stats.usersWithPhone}`);
    console.log(`   –ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${stats.usersWithoutContact}`);

    if (stats.duplicateEmails > 0 || stats.duplicatePhones > 0) {
      console.log('\n‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç—ã:');
      console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ email: ${stats.duplicateEmails}`);
      console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: ${stats.duplicatePhones}`);
    }

    console.log('\nüèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
    Object.entries(stats.levelDistribution)
      .sort(([, a], [, b]) => b - a)
      .forEach(([level, count]) => {
        console.log(`   ${level}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      });

    if (this.issues.length > 0) {
      console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      this.issues.forEach((issue) => console.log(`   - ${issue}`));
    }

    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      this.warnings.forEach((warning) => console.log(`   - ${warning}`));
    }

    if (isValid && this.warnings.length === 0) {
      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º!');
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);

  if (args.length !== 1) {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run validate-migration <project-id>');
    console.error('–ü—Ä–∏–º–µ—Ä: npm run validate-migration proj_123456');
    process.exit(1);
  }

  const [projectId] = args;

  try {
    const validator = new MigrationValidator(projectId);
    const result = await validator.validate();

    if (!result.isValid) {
      console.log('\n‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}

export { MigrationValidator };
