/**
 * @file: test-webhook-integration.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * @project: SaaS Bonus System
 * @created: 2025-01-31
 */

import { ProjectService } from '@/lib/services/project.service';
import { UserService } from '@/lib/services/user.service';

async function testWebhookIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const projectsResult = await ProjectService.getProjects();
    if (projectsResult.projects.length === 0) {
      console.log(
        '‚ùå –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.'
      );
      return;
    }

    const testProject = projectsResult.projects[0];
    console.log(
      `üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${testProject.name} (ID: ${testProject.id})`
    );
    console.log(`üîë Webhook Secret: ${testProject.webhookSecret}`);

    // 2. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è webhook'–∞
    const webhookUrl = `${process.env.WEBHOOK_BASE_URL || 'http://localhost:3000'}/api/webhook/${testProject.webhookSecret}`;
    console.log(`üåê Webhook URL: ${webhookUrl}\n`);

    // 3. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ webhook'–æ–≤
    const testCases = [
      {
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        payload: {
          action: 'register_user',
          email: 'test@example.com',
          phone: '+7900123456789',
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          utmSource: 'test',
          referralCode: 'TEST123'
        }
      },
      {
        name: '–ü–æ–∫—É–ø–∫–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤',
        payload: {
          action: 'purchase',
          userEmail: 'test@example.com',
          purchaseAmount: 1000,
          orderId: 'TEST_ORDER_001',
          description: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞'
        }
      },
      {
        name: '–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤',
        payload: {
          action: 'spend_bonuses',
          userEmail: 'test@example.com',
          bonusAmount: 50,
          orderId: 'TEST_SPEND_001',
          description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ'
        }
      },
      {
        name: 'Tilda –∑–∞–∫–∞–∑ (–∏–º–∏—Ç–∞—Ü–∏—è)',
        payload: [
          {
            name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            email: 'ivan@example.com',
            phone: '+7900123456788',
            payment: {
              amount: '2000',
              orderid: 'TILDA_001',
              systranid: 'sys_001',
              products: [
                { name: '–¢–æ–≤–∞—Ä 1', price: 1500 },
                { name: '–¢–æ–≤–∞—Ä 2', price: 500 }
              ]
            },
            utm_ref: 'tilda_test'
          }
        ]
      }
    ];

    // 4. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    for (const testCase of testCases) {
      console.log(`üß™ –¢–µ—Å—Ç: ${testCase.name}`);
      console.log(`üì§ Payload:`, JSON.stringify(testCase.payload, null, 2));

      try {
        const response = await fetch(webhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Webhook-Test-Script'
          },
          body: JSON.stringify(testCase.payload)
        });

        const result = await response.text();

        if (response.ok) {
          console.log(`‚úÖ –£—Å–ø–µ—Ö (${response.status}):`, result);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ (${response.status}):`, result);
        }
      } catch (error) {
        console.log(
          `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`,
          error instanceof Error ? error.message : 'Unknown error'
        );
      }

      console.log('‚îÄ'.repeat(60));
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    const { db } = await import('@/lib/db');
    const users = await db.user.findMany({
      where: { projectId: testProject.id },
      take: 3,
      orderBy: { registeredAt: 'desc' }
    });

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    for (const user of users) {
      const balance = await UserService.getUserBalance(user.id);
      console.log(
        `  üìä ${user.firstName} ${user.lastName} (${user.email}): ${balance.currentBalance} –±–æ–Ω—É—Å–æ–≤`
      );
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log(`   1. ngrok: npx ngrok http 3000`);
    console.log(`   2. Vercel: vercel --prod`);
    console.log(`   3. Docker: docker-compose up -d`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  testWebhookIntegration()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { testWebhookIntegration };
