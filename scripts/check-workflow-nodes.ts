/**
 * @file: scripts/check-workflow-nodes.ts
 * @description: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–¥ –≤ workflow
 * @project: SaaS Bonus System
 * @created: 2025-10-16
 * @author: AI Assistant + User
 */

import { db } from '@/lib/db';

async function checkWorkflowNodes() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—ã –≤ workflow...\n');

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é workflow
    const workflowVersion = await db.workflowVersion.findFirst({
      where: {
        workflow: {
          projectId: 'cmgntgsdv0000v8mwfwwh30az',
          isActive: true
        },
        isActive: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!workflowVersion) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è workflow –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è workflow: ${workflowVersion.version}`);
    console.log(`  Workflow ID: ${workflowVersion.workflowId}`);
    console.log(`  Entry Node ID: ${workflowVersion.entryNodeId}`);
    console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥: ${Object.keys(workflowVersion.nodes).length}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã
    console.log('üìã –°–ø–∏—Å–æ–∫ –Ω–æ–¥:');
    Object.entries(workflowVersion.nodes).forEach(([id, node], index) => {
      console.log(`  ${index + 1}. ${id} (${node.type}) - ${node.data?.label || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º entry node
    console.log(`\nüéØ Entry Node: ${workflowVersion.entryNodeId}`);
    const entryNode = workflowVersion.nodes[workflowVersion.entryNodeId];
    if (entryNode) {
      console.log(`  ‚úÖ Entry node –Ω–∞–π–¥–µ–Ω: ${entryNode.type}`);
      console.log(`  Label: ${entryNode.data?.label || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
    } else {
      console.log(`  ‚ùå Entry node –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º connections
    console.log(`\nüîó Connections: ${workflowVersion.connections?.length || 0}`);
    if (workflowVersion.connections && workflowVersion.connections.length > 0) {
      workflowVersion.connections.forEach((conn, index) => {
        console.log(`  ${index + 1}. ${conn.source} ‚Üí ${conn.target} (${conn.type})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–¥:', error);
  } finally {
    await db.$disconnect();
  }
}

checkWorkflowNodes();

