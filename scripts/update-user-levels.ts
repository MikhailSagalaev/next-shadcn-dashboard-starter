/**
 * @file: scripts/update-user-levels.ts
 * @description: –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
 * @project: SaaS Bonus System
 * @dependencies: Prisma
 * @created: 2025-09-25
 * @author: AI Assistant
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface LevelUpdateStats {
  total: number;
  updated: number;
  errors: number;
}

class LevelUpdateService {
  private stats: LevelUpdateStats = {
    total: 0,
    updated: 0,
    errors: 0
  };

  constructor(private projectId: string) {}

  async updateUserLevels(): Promise<void> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    console.log(`üè¢ –ü—Ä–æ–µ–∫—Ç: ${this.projectId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const project = await prisma.project.findUnique({
      where: { id: this.projectId },
      include: { bonusLevels: true }
    });

    if (!project) {
      throw new Error(`–ü—Ä–æ–µ–∫—Ç —Å ID ${this.projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (!project.bonusLevels || project.bonusLevels.length === 0) {
      throw new Error(`–í –ø—Ä–æ–µ–∫—Ç–µ ${project.name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Ä–æ–≤–Ω–∏ –±–æ–Ω—É—Å–æ–≤`);
    }

    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${project.name}`);
    console.log(`üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${project.bonusLevels.length}`);

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å—É–º–º—ã
    const sortedLevels = project.bonusLevels.sort(
      (a, b) => a.minAmount - b.minAmount
    );

    console.log('\nüèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:');
    sortedLevels.forEach((level) => {
      console.log(
        `   ${level.name}: –æ—Ç ${level.minAmount}‚ÇΩ (${level.bonusPercent}% –±–æ–Ω—É—Å–æ–≤)`
      );
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    const users = await prisma.user.findMany({
      where: { projectId: this.projectId },
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        phone: true,
        totalPurchases: true,
        currentLevel: true
      }
    });

    this.stats.total = users.length;
    console.log(`\nüë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    for (let i = 0; i < users.length; i++) {
      const user = users[i];

      if (i > 0 && i % 100 === 0) {
        console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i}/${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      }

      await this.updateUserLevel(user, sortedLevels);
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.printFinalStats();
  }

  private async updateUserLevel(user: any, levels: any[]): Promise<void> {
    try {
      // –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–ø–µ—Ä–µ–±–æ—Ä –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É)
      let newLevel = levels[0]; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      for (const level of levels.slice().reverse()) {
        if (user.totalPurchases >= level.minAmount) {
          newLevel = level;
          break;
        }
      }

      // –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (user.currentLevel !== newLevel.name) {
        await prisma.user.update({
          where: { id: user.id },
          data: { currentLevel: newLevel.name }
        });

        const userName = `${user.firstName} ${user.lastName || ''}`.trim();
        const contact = user.email || user.phone;

        console.log(
          `üîÑ ${userName} (${contact}): ${user.currentLevel} ‚Üí ${newLevel.name} (${user.totalPurchases}‚ÇΩ)`
        );
        this.stats.updated++;
      }
    } catch (error) {
      const errorMsg = `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email || user.phone}: ${error instanceof Error ? error.message : 'Unknown error'}`;
      console.error(errorMsg);
      this.stats.errors++;
    }
  }

  private printFinalStats(): void {
    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.stats.total}`);
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${this.stats.updated}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);

    const successRate =
      this.stats.total > 0
        ? ((this.stats.updated / this.stats.total) * 100).toFixed(1)
        : '0';
    console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${successRate}%`);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);

  if (args.length !== 1) {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run update-levels <project-id>');
    console.error('–ü—Ä–∏–º–µ—Ä: npm run update-levels proj_123456');
    process.exit(1);
  }

  const [projectId] = args;

  try {
    const updater = new LevelUpdateService(projectId);
    await updater.updateUserLevels();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}

export { LevelUpdateService };
