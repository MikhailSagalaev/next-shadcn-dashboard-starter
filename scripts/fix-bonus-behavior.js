const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixBonusBehavior() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å bonus_behavior –∫–æ–ª–æ–Ω–∫–æ–π...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
    const result = await prisma.$queryRaw`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'projects' AND column_name = 'bonus_behavior'
    `;

    if (result.length === 0) {
      console.log('üìù –ö–æ–ª–æ–Ω–∫–∞ bonus_behavior –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');

      // –°–æ–∑–¥–∞–µ–º enum –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      try {
        await prisma.$executeRaw`CREATE TYPE "BonusBehavior" AS ENUM ('SPEND_AND_EARN', 'SPEND_ONLY', 'EARN_ONLY');`;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω enum BonusBehavior');
      } catch (error) {
        if (!error.message.includes('already exists')) {
          console.log('‚ö†Ô∏è  Enum —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
      await prisma.$executeRaw`
        ALTER TABLE "projects"
        ADD COLUMN "bonus_behavior" "BonusBehavior" NOT NULL DEFAULT 'SPEND_AND_EARN'
      `;

      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ bonus_behavior –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ bonus_behavior —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixBonusBehavior();
