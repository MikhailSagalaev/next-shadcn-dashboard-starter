/**
 * @file: scripts/test-domain-parsing.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: ProjectService
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

import { logger } from '../src/lib/logger';

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function normalizeDomain(domain?: string): string | undefined {
  if (!domain || domain.trim() === '') {
    return undefined;
  }

  let normalized = domain.trim().toLowerCase();

  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ—Å—Ç—å
  normalized = normalized.replace(/^https?:\/\//, '');
  
  // –£–±–∏—Ä–∞–µ–º www –µ—Å–ª–∏ –µ—Å—Ç—å
  normalized = normalized.replace(/^www\./, '');
  
  // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à
  normalized = normalized.replace(/\/$/, '');
  
  // –£–±–∏—Ä–∞–µ–º –ø—É—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω)
  normalized = normalized.split('/')[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–º–µ–Ω
  const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$/;
  
  if (!domainRegex.test(normalized)) {
    logger.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞', {
      original: domain,
      normalized,
      component: 'domain-parsing-test'
    });
    return undefined;
  }

  logger.info('–î–æ–º–µ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω', {
    original: domain,
    normalized,
    component: 'domain-parsing-test'
  });

  return normalized;
}

function testDomainParsing() {
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê –î–û–ú–ï–ù–û–í');
  console.log('=' .repeat(50));

  const testDomains = [
    'maoka.ru',
    'https://maoka.ru/',
    'http://www.maoka.ru/path',
    'MAOKA.RU',
    'https://www.maoka.ru/some/path/',
    'maoka.ru/',
    'www.maoka.ru',
    'https://maoka.ru',
    'http://maoka.ru',
    'maoka.ru/path/to/page',
    'invalid-domain',
    'not-a-domain',
    '',
    '   ',
    'https://',
    'http://',
    'example.com',
    'subdomain.example.com',
    'very-long-domain-name-that-should-still-work.example.com'
  ];

  testDomains.forEach((domain, index) => {
    console.log(`${index + 1}. –ò—Å—Ö–æ–¥–Ω—ã–π: '${domain}'`);
    const result = normalizeDomain(domain);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: '${result}'`);
    console.log('');
  });

  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDomainParsing();
}

export { testDomainParsing, normalizeDomain };
