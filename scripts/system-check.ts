/**
 * @file: system-check.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * @project: SaaS Bonus System
 * @dependencies: db, services
 * @created: 2025-01-27
 * @author: AI Assistant + User
 */

import { db } from '../src/lib/db';
import { ProjectService } from '../src/lib/services/project.service';
import { UserService } from '../src/lib/services/user.service';
import { logger } from '../src/lib/logger';

interface SystemCheckResult {
  component: string;
  status: 'OK' | 'WARNING' | 'ERROR';
  message: string;
  details?: any;
}

class SystemChecker {
  private results: SystemCheckResult[] = [];

  private addResult(
    component: string,
    status: 'OK' | 'WARNING' | 'ERROR',
    message: string,
    details?: any
  ) {
    this.results.push({ component, status, message, details });
    const icon = status === 'OK' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${icon} ${component}: ${message}`);
    if (details) {
      console.log(`   –î–µ—Ç–∞–ª–∏:`, details);
    }
  }

  async checkDatabase() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      await db.$queryRaw`SELECT 1`;
      this.addResult('Database', 'OK', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      const tables = ['Project', 'User', 'Bonus', 'Transaction', 'BotSettings'];
      for (const table of tables) {
        try {
          const count = await (db as any)[table.toLowerCase()].count();
          this.addResult(
            `Table ${table}`,
            'OK',
            `–¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (${count} –∑–∞–ø–∏—Å–µ–π)`
          );
        } catch (error) {
          this.addResult(
            `Table ${table}`,
            'ERROR',
            '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
            error
          );
        }
      }
    } catch (error) {
      this.addResult('Database', 'ERROR', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', error);
    }
  }

  async checkApiEndpoints() {
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:5006';

    const endpoints = [
      { path: '/api/projects', method: 'GET', name: 'Projects API' },
      { path: '/health', method: 'GET', name: 'Health Check' }
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`${baseUrl}${endpoint.path}`, {
          method: endpoint.method,
          headers: { 'Content-Type': 'application/json' }
        });

        if (response.ok) {
          this.addResult(
            `API ${endpoint.name}`,
            'OK',
            `${endpoint.method} ${endpoint.path} —Ä–∞–±–æ—Ç–∞–µ—Ç`
          );
        } else {
          this.addResult(
            `API ${endpoint.name}`,
            'WARNING',
            `${endpoint.method} ${endpoint.path} –≤–µ—Ä–Ω—É–ª ${response.status}`
          );
        }
      } catch (error) {
        this.addResult(
          `API ${endpoint.name}`,
          'ERROR',
          `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint.path}`,
          error
        );
      }
    }
  }

  async checkServices() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ ProjectService
      const projectsData = await ProjectService.getProjects();
      const projects = projectsData.projects;
      this.addResult(
        'ProjectService',
        'OK',
        `–°–µ—Ä–≤–∏—Å –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤)`
      );

      if (projects.length > 0) {
        const firstProject = projects[0];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ UserService
        try {
          const usersCount = await db.user.count({
            where: { projectId: firstProject.id }
          });
          this.addResult(
            'UserService',
            'OK',
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î (${usersCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`
          );
        } catch (error) {
          this.addResult(
            'UserService',
            'WARNING',
            '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            error
          );
        }
      }
    } catch (error) {
      this.addResult('Services', 'ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤', error);
    }
  }

  async checkFileSystem() {
    const fs = require('fs');
    const path = require('path');

    const requiredFiles = [
      'public/tilda-bonus-widget.js',
      'public/test-tilda.html',
      'src/lib/rate-limiter.ts',
      'src/lib/error-handler.ts',
      'src/lib/with-rate-limit.ts',
      'docs/tasks-to-complete.md'
    ];

    for (const file of requiredFiles) {
      try {
        if (fs.existsSync(file)) {
          const stats = fs.statSync(file);
          this.addResult(
            `File ${file}`,
            'OK',
            `–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${Math.round(stats.size / 1024)}KB)`
          );
        } else {
          this.addResult(`File ${file}`, 'ERROR', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } catch (error) {
        this.addResult(`File ${file}`, 'ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞', error);
      }
    }
  }

  async checkEnvironment() {
    const requiredEnvVars = [
      'DATABASE_URL',
      'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
      'CLERK_SECRET_KEY'
    ];

    const optionalEnvVars = ['NEXT_PUBLIC_APP_URL', 'NEXT_PUBLIC_SENTRY_DSN'];

    for (const envVar of requiredEnvVars) {
      if (process.env[envVar]) {
        this.addResult(
          `Env ${envVar}`,
          'OK',
          '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        );
      } else {
        this.addResult(
          `Env ${envVar}`,
          'ERROR',
          '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        );
      }
    }

    for (const envVar of optionalEnvVars) {
      if (process.env[envVar]) {
        this.addResult(
          `Env ${envVar}`,
          'OK',
          '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        );
      } else {
        this.addResult(
          `Env ${envVar}`,
          'WARNING',
          '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        );
      }
    }
  }

  async checkRateLimiting() {
    try {
      const { defaultLimiter } = await import('../src/lib/rate-limiter');
      const stats = defaultLimiter.getStats();
      this.addResult('Rate Limiter', 'OK', `Rate limiter —Ä–∞–±–æ—Ç–∞–µ—Ç`, stats);
    } catch (error) {
      this.addResult(
        'Rate Limiter',
        'ERROR',
        '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ rate limiter',
        error
      );
    }
  }

  async run() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã SaaS Bonus System...\n');

    await this.checkEnvironment();
    await this.checkDatabase();
    await this.checkServices();
    await this.checkFileSystem();
    await this.checkRateLimiting();
    // await this.checkApiEndpoints(); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('='.repeat(50));

    const okCount = this.results.filter((r) => r.status === 'OK').length;
    const warningCount = this.results.filter(
      (r) => r.status === 'WARNING'
    ).length;
    const errorCount = this.results.filter((r) => r.status === 'ERROR').length;

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${okCount}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningCount}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);

    if (errorCount > 0) {
      console.log('\nüî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:');
      this.results
        .filter((r) => r.status === 'ERROR')
        .forEach((r) => console.log(`   - ${r.component}: ${r.message}`));
    }

    if (warningCount > 0) {
      console.log('\nüü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      this.results
        .filter((r) => r.status === 'WARNING')
        .forEach((r) => console.log(`   - ${r.component}: ${r.message}`));
    }

    const overallStatus =
      errorCount === 0 ? 'HEALTHY' : errorCount < 3 ? 'DEGRADED' : 'CRITICAL';
    console.log(`\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ${overallStatus}`);

    if (overallStatus === 'HEALTHY') {
      console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: yarn dev');
      console.log('   2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
      console.log(
        '   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ Tilda –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–∞ /public/test-tilda.html'
      );
      console.log("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ webhook'—ã –∏ API");
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await db.$disconnect();

    return {
      overall: overallStatus,
      results: this.results,
      summary: { ok: okCount, warnings: warningCount, errors: errorCount }
    };
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const checker = new SystemChecker();
  checker.run().catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error);
    process.exit(1);
  });
}

export default SystemChecker;
