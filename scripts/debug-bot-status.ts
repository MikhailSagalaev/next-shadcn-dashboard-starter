/**
 * @file: scripts/debug-bot-status.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: botManager, db
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

import { botManager } from '../src/lib/telegram/bot-manager';
import { db } from '../src/lib/db';
import { logger } from '../src/lib/logger';

async function debugBotStatus() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–û–¢–û–í');
  console.log('=' .repeat(50));

  try {
    // 1. –°–æ—Å—Ç–æ—è–Ω–∏–µ BotManager
    console.log('\nüìä –°–û–°–¢–û–Ø–ù–ò–ï BOT MANAGER:');
    console.log(`–í—Å–µ–≥–æ –±–æ—Ç–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: ${botManager.bots.size}`);
    
    Array.from(botManager.bots.entries()).forEach(([projectId, botInstance]) => {
      console.log(`  - –ü—Ä–æ–µ–∫—Ç: ${projectId}`);
      console.log(`    –¢–æ–∫–µ–Ω: ***${botInstance.bot.token.slice(-4)}`);
      console.log(`    –ê–∫—Ç–∏–≤–µ–Ω: ${botInstance.isActive}`);
      console.log(`    Polling: ${botInstance.isPolling}`);
      console.log(`    Username: ${botInstance.bot.botInfo?.username || 'N/A'}`);
      console.log(`    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${botInstance.lastUpdated}`);
      console.log('');
    });

    // 2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüóÑÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    const projects = await db.project.findMany({
      where: {
        botToken: { not: null }
      },
      select: {
        id: true,
        name: true,
        botToken: true,
        botUsername: true,
        botStatus: true,
        botSettings: {
          select: {
            botToken: true,
            botUsername: true,
            isActive: true
          }
        }
      }
    });

    projects.forEach(project => {
      console.log(`  - –ü—Ä–æ–µ–∫—Ç: ${project.name} (${project.id})`);
      console.log(`    –¢–æ–∫–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ: ***${project.botToken?.slice(-4) || 'N/A'}***`);
      console.log(`    –¢–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: ***${project.botSettings?.botToken?.slice(-4) || 'N/A'}***`);
      console.log(`    Username: ${project.botUsername || 'N/A'}`);
      console.log(`    –°—Ç–∞—Ç—É—Å: ${project.botStatus}`);
      console.log(`    –ê–∫—Ç–∏–≤–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: ${project.botSettings?.isActive}`);
      console.log('');
    });

    // 3. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\nüîç –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –¢–û–ö–ï–ù–û–í:');
    const tokenMap = new Map<string, string[]>();
    
    Array.from(botManager.bots.entries()).forEach(([projectId, botInstance]) => {
      const token = botInstance.bot.token;
      if (!tokenMap.has(token)) {
        tokenMap.set(token, []);
      }
      tokenMap.get(token)!.push(projectId);
    });

    tokenMap.forEach((projectIds, token) => {
      if (projectIds.length > 1) {
        console.log(`  ‚ö†Ô∏è –¢–æ–∫–µ–Ω ***${token.slice(-4)} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö: ${projectIds.join(', ')}`);
      }
    });

    if (tokenMap.size === 0) {
      console.log('  ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram API
    console.log('\nüåê –ü–†–û–í–ï–†–ö–ê TELEGRAM API:');
    for (const [projectId, botInstance] of botManager.bots.entries()) {
      try {
        const botInfo = await botInstance.bot.api.getMe();
        console.log(`  ‚úÖ –ü—Ä–æ–µ–∫—Ç ${projectId}: @${botInfo.username} (ID: ${botInfo.id})`);
      } catch (error) {
        console.log(`  ‚ùå –ü—Ä–æ–µ–∫—Ç ${projectId}: –û—à–∏–±–∫–∞ API - ${error instanceof Error ? error.message : 'Unknown'}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  debugBotStatus()
    .then(() => {
      console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { debugBotStatus };
