/**
 * @file: scripts/check-trigger-config.ts
 * @description: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ trigger –Ω–æ–¥
 * @project: SaaS Bonus System
 * @created: 2025-10-16
 * @author: AI Assistant + User
 */

import { db } from '@/lib/db';

async function checkTriggerConfig() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é trigger –Ω–æ–¥...\n');

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é workflow
    const workflowVersion = await db.workflowVersion.findFirst({
      where: {
        workflow: {
          projectId: 'cmgntgsdv0000v8mwfwwh30az',
          isActive: true
        },
        isActive: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!workflowVersion) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è workflow –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è workflow: ${workflowVersion.version}`);
    console.log(`  Entry Node ID: ${workflowVersion.entryNodeId}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º trigger.command –Ω–æ–¥—ã
    console.log('üîç Trigger.command –Ω–æ–¥—ã:');
    Object.entries(workflowVersion.nodes).forEach(([id, node]) => {
      if (node.type === 'trigger.command') {
        console.log(`  ID: ${id}`);
        console.log(`  Label: ${node.data?.label || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        console.log(`  Config:`, JSON.stringify(node.data?.config?.['trigger.command'], null, 2));
        console.log('');
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º entry node
    const entryNode = workflowVersion.nodes[workflowVersion.entryNodeId];
    if (entryNode) {
      console.log(`üéØ Entry Node (${workflowVersion.entryNodeId}):`);
      console.log(`  Type: ${entryNode.type}`);
      console.log(`  Label: ${entryNode.data?.label || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      if (entryNode.type === 'trigger.command') {
        console.log(`  Config:`, JSON.stringify(entryNode.data?.config?.['trigger.command'], null, 2));
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await db.$disconnect();
  }
}

checkTriggerConfig();

