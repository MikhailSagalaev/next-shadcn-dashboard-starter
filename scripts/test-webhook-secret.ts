#!/usr/bin/env npx tsx

import { ProjectService } from '../src/lib/services/project.service';
import { db } from '../src/lib/db';

async function testWebhookSecret() {
  try {
    const secret = 'cmfcb42zr0002v8hseaj6kyza';
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook secret: ${secret}`);

    // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    console.log('\nüìã –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î:');
    const directProject = await db.project.findFirst({
      where: { webhookSecret: secret }
    });

    if (directProject) {
      console.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${directProject.name} (${directProject.id})`
      );
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${directProject.isActive}`);
      console.log(`   WebhookSecret: ${directProject.webhookSecret}`);
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
    }

    // –ß–µ—Ä–µ–∑ ProjectService
    console.log('\nüîß –ß–µ—Ä–µ–∑ ProjectService:');
    const serviceProject =
      await ProjectService.getProjectByWebhookSecret(secret);

    if (serviceProject) {
      console.log(
        `‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${serviceProject.name} (${serviceProject.id})`
      );
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${serviceProject.isActive}`);
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ProjectService');
    }

    // –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\nüìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã:');
    const allProjects = await db.project.findMany({
      select: {
        id: true,
        name: true,
        webhookSecret: true,
        isActive: true
      }
    });

    for (const project of allProjects) {
      console.log(
        `  ${project.name}: ${project.webhookSecret} (${project.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

testWebhookSecret();
