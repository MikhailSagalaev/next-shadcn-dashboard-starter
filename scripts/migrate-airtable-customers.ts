/**
 * @file: scripts/migrate-airtable-customers.ts
 * @description: –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏–∑ Airtable –≤ SaaS –±–æ–Ω—É—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 * @project: SaaS Bonus System
 * @dependencies: Prisma, csv-parser, fs
 * @created: 2025-09-25
 * @author: AI Assistant
 */

import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';
import * as csv from 'csv-parser';

const prisma = new PrismaClient();

interface AirtableCustomer {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
  –ò–º—è?: string;
  –§–∞–º–∏–ª–∏—è?: string;
  Email?: string;
  –¢–µ–ª–µ—Ñ–æ–Ω?: string;
  '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'?: string;
  –ì–æ—Ä–æ–¥?: string;
  –ê–¥—Ä–µ—Å?: string;
  –ö–æ–º–ø–∞–Ω–∏—è?: string;
  '–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫'?: string;
  '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫'?: string;
  '–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏'?: string;
  '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'?: string;
  –°—Ç–∞—Ç—É—Å?: string;
  'UTM Source'?: string;
  'UTM Medium'?: string;
  'UTM Campaign'?: string;
  'UTM Term'?: string;
  'UTM Content'?: string;
  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?: string;
  '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'?: string;

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π (–¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏)
  '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞'?: string;
  '–§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞'?: string;
  'Email –∫–ª–∏–µ–Ω—Ç–∞'?: string;
  '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞'?: string;
  '–û–±—â–∞—è —Å—É–º–º–∞'?: string;
  '–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫'?: string;
  '–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞'?: string;
  –ò—Å—Ç–æ—á–Ω–∏–∫?: string;
  –ö–∞–Ω–∞–ª?: string;
  –ö–∞–º–ø–∞–Ω–∏—è?: string;
  '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'?: string;
  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ?: string;
}

interface MigrationStats {
  total: number;
  successful: number;
  failed: number;
  skipped: number;
  duplicates: number;
}

class AirtableMigrationService {
  private stats: MigrationStats = {
    total: 0,
    successful: 0,
    failed: 0,
    skipped: 0,
    duplicates: 0
  };

  private errors: string[] = [];
  private warnings: string[] = [];

  constructor(private projectId: string) {}

  async migrateFromCSV(csvPath: string): Promise<void> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable...');
    console.log(`üìÅ –§–∞–π–ª: ${csvPath}`);
    console.log(`üè¢ –ü—Ä–æ–µ–∫—Ç: ${this.projectId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if (!fs.existsSync(csvPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvPath}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const project = await prisma.project.findUnique({
      where: { id: this.projectId }
    });

    if (!project) {
      throw new Error(`–ü—Ä–æ–µ–∫—Ç —Å ID ${this.projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${project.name}`);

    const customers: AirtableCustomer[] = [];

    // –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ CSV
    await new Promise<void>((resolve, reject) => {
      fs.createReadStream(csvPath)
        .pipe(
          csv({
            separator: ';', // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            skipEmptyLines: true,
            trim: true
          })
        )
        .on('data', (data) => customers.push(data))
        .on('end', () => {
          console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${customers.length} —Å—Ç—Ä–æ–∫ –∏–∑ CSV`);
          resolve();
        })
        .on('error', reject);
    });

    // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –Ω–∏—á–µ–≥–æ, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –∑–∞–ø—è—Ç–æ–π
    if (customers.length === 0) {
      console.log('üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∑–∞–ø—è—Ç–∞—è...');
      await new Promise<void>((resolve, reject) => {
        fs.createReadStream(csvPath)
          .pipe(
            csv({
              separator: ',',
              skipEmptyLines: true,
              trim: true
            })
          )
          .on('data', (data) => customers.push(data))
          .on('end', () => {
            console.log(
              `üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${customers.length} —Å—Ç—Ä–æ–∫ –∏–∑ CSV (–∑–∞–ø—è—Ç–∞—è)`
            );
            resolve();
          })
          .on('error', reject);
      });
    }

    this.stats.total = customers.length;

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (customers.length > 0) {
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:');
      console.log(JSON.stringify(customers[0], null, 2));
      console.log('\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:', Object.keys(customers[0]));
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    for (let i = 0; i < customers.length; i++) {
      const customer = customers[i];

      if (i > 0 && i % 50 === 0) {
        console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i}/${customers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      }

      await this.migrateCustomer(customer);
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.printFinalStats();

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    this.saveMigrationReport();
  }

  private async migrateCustomer(customer: AirtableCustomer): Promise<void> {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const userData = this.transformCustomerData(customer);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!userData.email && !userData.phone) {
        this.errors.push(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${JSON.stringify(customer)}`
        );
        this.stats.skipped++;
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const existingUser = await this.findExistingUser(
        userData.email,
        userData.phone
      );
      if (existingUser) {
        this.warnings.push(
          `–î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: ${userData.email || userData.phone} (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID: ${existingUser.id})`
        );
        this.stats.duplicates++;
        this.stats.skipped++;
        return;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.create({
        data: userData
      });

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      const referralCode = this.generateReferralCode(user);
      if (referralCode) {
        await prisma.user.update({
          where: { id: user.id },
          data: { referralCode }
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
      if (userData.totalPurchases > 0) {
        await this.createInitialPurchaseTransaction(
          user.id,
          userData.totalPurchases
        );
      }

      this.stats.successful++;
      console.log(
        `‚úÖ –°–æ–∑–¥–∞–Ω: ${user.firstName} ${user.lastName || ''} (${user.email || user.phone})`
      );
    } catch (error) {
      const errorMsg = `‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${customer['Email'] || customer['–¢–µ–ª–µ—Ñ–æ–Ω']}: ${error instanceof Error ? error.message : 'Unknown error'}`;
      this.errors.push(errorMsg);
      console.error(errorMsg);
      this.stats.failed++;
    }
  }

  private transformCustomerData(customer: AirtableCustomer): any {
    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    const firstName = customer['–ò–º—è'] || customer['–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞'] || '';
    const lastName = customer['–§–∞–º–∏–ª–∏—è'] || customer['–§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞'] || '';
    const email = customer['Email'] || customer['Email –∫–ª–∏–µ–Ω—Ç–∞'];
    const phone = customer['–¢–µ–ª–µ—Ñ–æ–Ω'] || customer['–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞'];

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
    const totalPurchasesStr =
      customer['–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫'] ||
      customer['–û–±—â–∞—è —Å—É–º–º–∞'] ||
      customer['–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫'] ||
      '0';
    const totalPurchases =
      parseFloat(totalPurchasesStr.replace(/[^\d.,]/g, '').replace(',', '.')) ||
      0;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    const status = customer['–°—Ç–∞—Ç—É—Å'] || customer['–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞'] || '';
    const isActive =
      !status.toLowerCase().includes('–∞—Ä—Ö–∏–≤') &&
      !status.toLowerCase().includes('–Ω–µ–∞–∫—Ç–∏–≤');

    // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    let registeredAt = new Date();
    const purchaseDate = customer['–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏'];
    if (purchaseDate) {
      const parsedDate = new Date(purchaseDate);
      if (!isNaN(parsedDate.getTime())) {
        registeredAt = parsedDate;
      }
    }

    return {
      projectId: this.projectId,
      firstName: firstName.trim() || null,
      lastName: lastName.trim() || null,
      email: email ? email.toLowerCase().trim() : null,
      phone: phone ? this.normalizePhone(phone) : null,
      birthDate: this.parseDate(customer['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']),
      totalPurchases,
      isActive,
      registeredAt,
      utmSource: customer['UTM Source'] || customer['–ò—Å—Ç–æ—á–Ω–∏–∫'],
      utmMedium: customer['UTM Medium'] || customer['–ö–∞–Ω–∞–ª'],
      utmCampaign: customer['UTM Campaign'] || customer['–ö–∞–º–ø–∞–Ω–∏—è'],
      utmTerm: customer['UTM Term'] || customer['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'],
      utmContent: customer['UTM Content'] || customer['–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ']
    };
  }

  private normalizePhone(phone?: string): string | null {
    if (!phone) return null;

    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const cleaned = phone.replace(/\D/g, '');

    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (cleaned.startsWith('7')) {
      return `+7${cleaned.slice(1)}`;
    }
    if (cleaned.startsWith('8')) {
      return `+7${cleaned.slice(1)}`;
    }

    // –ï—Å–ª–∏ —É–∂–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if (cleaned.length === 11 && cleaned.startsWith('7')) {
      return `+${cleaned}`;
    }

    // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ - –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥
    if (cleaned.length === 10) {
      return `+7${cleaned}`;
    }

    return phone; // –í–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ñ–æ—Ä–º–∞—Ç
  }

  private parseDate(dateStr?: string): Date | null {
    if (!dateStr) return null;

    const date = new Date(dateStr);
    return isNaN(date.getTime()) ? null : date;
  }

  private async findExistingUser(email?: string | null, phone?: string | null) {
    if (email) {
      const user = await prisma.user.findFirst({
        where: {
          projectId: this.projectId,
          email: email.toLowerCase()
        }
      });
      if (user) return user;
    }

    if (phone) {
      const user = await prisma.user.findFirst({
        where: {
          projectId: this.projectId,
          phone: this.normalizePhone(phone)
        }
      });
      if (user) return user;
    }

    return null;
  }

  private generateReferralCode(user: any): string | null {
    if (!user.email && !user.phone) return null;

    const base = user.email
      ? user.email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '')
      : user.phone.replace(/\D/g, '').slice(-6);

    const random = Math.random().toString(36).substring(2, 6);
    return `${base}_${random}`.toUpperCase();
  }

  private async createInitialPurchaseTransaction(
    userId: string,
    amount: number
  ): Promise<void> {
    await prisma.transaction.create({
      data: {
        userId,
        amount: amount.toString(),
        type: 'EARN',
        description:
          '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ (–º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ Airtable)',
        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000) // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
      }
    });
  }

  private printFinalStats(): void {
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${this.stats.total}`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.stats.successful}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.stats.failed}`);
    console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.skipped}`);
    console.log(`   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${this.stats.duplicates}`);

    if (this.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      this.errors.slice(0, 10).forEach((error) => console.log(`   - ${error}`));
      if (this.errors.length > 10) {
        console.log(`   ... –∏ –µ—â–µ ${this.errors.length - 10} –æ—à–∏–±–æ–∫`);
      }
    }

    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      this.warnings
        .slice(0, 10)
        .forEach((warning) => console.log(`   - ${warning}`));
      if (this.warnings.length > 10) {
        console.log(`   ... –∏ –µ—â–µ ${this.warnings.length - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
      }
    }
  }

  private saveMigrationReport(): void {
    const report = {
      timestamp: new Date().toISOString(),
      projectId: this.projectId,
      stats: this.stats,
      errors: this.errors,
      warnings: this.warnings
    };

    const reportPath = path.join(process.cwd(), 'migration-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);

  if (args.length !== 2) {
    console.error(
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run migrate-customers <csv-path> <project-id>'
    );
    console.error(
      '–ü—Ä–∏–º–µ—Ä: npm run migrate-customers customers.csv proj_123456'
    );
    process.exit(1);
  }

  const [csvPath, projectId] = args;

  try {
    const migration = new AirtableMigrationService(projectId);
    await migration.migrateFromCSV(csvPath);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}

export { AirtableMigrationService };
