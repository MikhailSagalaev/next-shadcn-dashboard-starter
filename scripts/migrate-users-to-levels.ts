/**
 * @file: scripts/migrate-users-to-levels.ts
 * @description: –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É –±–æ–Ω—É—Å–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Prisma, BonusLevelService
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

import { PrismaClient } from '@prisma/client';
import { BonusLevelService } from '../src/lib/services/bonus-level.service';
import { logger } from '../src/lib/logger';

const db = new PrismaClient();

interface MigrationStats {
  totalUsers: number;
  updatedUsers: number;
  createdLevels: number;
  errors: number;
  projects: string[];
}

async function migrateUsersToLevels(): Promise<MigrationStats> {
  const stats: MigrationStats = {
    totalUsers: 0,
    updatedUsers: 0,
    createdLevels: 0,
    errors: 0,
    projects: []
  };

  try {
    console.log(
      'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É –±–æ–Ω—É—Å–æ–≤...\n'
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    const projects = await db.project.findMany({
      select: {
        id: true,
        name: true,
        _count: {
          select: {
            users: true
          }
        }
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

    for (const project of projects) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.name} (${project.id})`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${project._count.users}`);

      stats.projects.push(project.name);

      try {
        // 1. –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
        const existingLevels = await db.bonusLevel.count({
          where: { projectId: project.id }
        });

        if (existingLevels === 0) {
          console.log(`   üìù –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...`);
          await BonusLevelService.createDefaultLevels(project.id);
          stats.createdLevels += 3; // –ë–∞–∑–æ–≤—ã–π, –°–µ—Ä–µ–±—Ä—è–Ω—ã–π, –ó–æ–ª–æ—Ç–æ–π
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 —É—Ä–æ–≤–Ω—è –±–æ–Ω—É—Å–æ–≤`);
        } else {
          console.log(
            `   ‚ÑπÔ∏è  –£—Ä–æ–≤–Ω–∏ –±–æ–Ω—É—Å–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (${existingLevels})`
          );
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
        const users = await db.user.findMany({
          where: {
            projectId: project.id,
            OR: [
              { currentLevel: null as any },
              { currentLevel: '' },
              { totalPurchases: { equals: null as any } }
            ]
          },
          include: {
            transactions: {
              where: { type: 'EARN' },
              select: { amount: true }
            }
          }
        });

        console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${users.length}`);
        stats.totalUsers += users.length;

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const user of users) {
          try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π EARN
            const totalPurchases = user.transactions.reduce(
              (sum, transaction) => sum + Number(transaction.amount),
              0
            );

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            const currentLevel = await BonusLevelService.calculateUserLevel(
              project.id,
              totalPurchases
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.user.update({
              where: { id: user.id },
              data: {
                totalPurchases,
                currentLevel: currentLevel?.name || '–ë–∞–∑–æ–≤—ã–π'
              }
            });

            stats.updatedUsers++;

            if (stats.updatedUsers % 10 === 0) {
              console.log(
                `   ‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.updatedUsers}`
              );
            }
          } catch (userError) {
            console.error(
              `   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`,
              userError
            );
            stats.errors++;
          }
        }

        console.log(
          `   ‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
        );
      } catch (projectError) {
        console.error(
          `   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}:`,
          projectError
        );
        stats.errors++;
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalUsers}`);
    console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${stats.updatedUsers}`);
    console.log(`   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —É—Ä–æ–≤–Ω–µ–π –±–æ–Ω—É—Å–æ–≤: ${stats.createdLevels}`);
    console.log(`   ‚Ä¢ –û—à–∏–±–æ–∫: ${stats.errors}`);
    console.log(`   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.projects.length}`);
    console.log(`   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã: ${stats.projects.join(', ')}`);

    return stats;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', {
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      component: 'migration-script'
    });
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
async function rollbackMigration(): Promise<void> {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ null
    const result = await db.user.updateMany({
      data: {
        currentLevel: null as any,
        totalPurchases: 0
      }
    });

    console.log(`‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–±—Ä–æ—à–µ–Ω–æ: ${result.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
async function validateMigration(): Promise<boolean> {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å —É—Ä–æ–≤–µ–Ω—å
    const usersWithoutLevel = await db.user.count({
      where: {
        OR: [{ currentLevel: null as any }, { currentLevel: '' }]
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏ –±–æ–Ω—É—Å–æ–≤
    const projectsWithoutLevels = await db.project.count({
      where: {
        bonusLevels: {
          none: {}
        }
      }
    });

    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —É—Ä–æ–≤–Ω—è: ${usersWithoutLevel}`);
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ —É—Ä–æ–≤–Ω–µ–π –±–æ–Ω—É—Å–æ–≤: ${projectsWithoutLevels}`);

    const isValid = usersWithoutLevel === 0 && projectsWithoutLevels === 0;

    if (isValid) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö!');
    }

    return isValid;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    await db.$connect();
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    switch (command) {
      case 'migrate':
        const stats = await migrateUsersToLevels();
        await validateMigration();
        break;

      case 'rollback':
        await rollbackMigration();
        break;

      case 'validate':
        await validateMigration();
        break;

      default:
        console.log('üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('   ‚Ä¢ migrate  - –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log('   ‚Ä¢ rollback - –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
        console.log('   ‚Ä¢ validate - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö');
        console.log('\n–ü—Ä–∏–º–µ—Ä: npm run migrate-users migrate');
        break;
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  } finally {
    await db.$disconnect();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { migrateUsersToLevels, rollbackMigration, validateMigration };
