/**
 * @file: scripts/test-bot-webhook.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã Telegram webhook
 * @project: SaaS Bonus System
 * @author: AI Assistant + User
 */

import { db } from '@/lib/db';
import { botManager } from '@/lib/telegram/bot-manager';
import { logger } from '@/lib/logger';

async function testBotWebhook() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Telegram webhook...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
    const botSettings = await db.botSettings.findFirst({
      where: {
        isActive: true,
        botToken: { not: '' }
      },
      include: { project: true }
    });

    if (!botSettings || !botSettings.project) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const project = botSettings.project;
    console.log(`üìã –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${project.name} (ID: ${project.id})`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    if (!botSettings.botToken) {
      console.log('‚ùå Bot token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞');
      return;
    }

    console.log(`ü§ñ Bot token: ${botSettings.botToken.substring(0, 10)}...`);
    console.log(
      `ü§ñ Bot username: ${botSettings.botUsername || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`
    );

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ bot manager
    const botInstance = botManager.getBotInstance(project.id);
    console.log(`\nüîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ BotManager:`);
    console.log(`- –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: ${!!botInstance}`);
    console.log(`- –ê–∫—Ç–∏–≤–µ–Ω: ${botInstance?.isActive || false}`);
    console.log(`- Webhook —Å–æ–∑–¥–∞–Ω: ${!!botInstance?.webhook}`);
    console.log(`- Polling: ${botInstance?.isPolling || false}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook handler
    const webhookHandler = botManager.getWebhookHandler(project.id);
    console.log(`- Webhook handler –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!webhookHandler}`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook —á–µ—Ä–µ–∑ Telegram API
    if (botInstance?.bot) {
      try {
        const webhookInfo = await botInstance.bot.api.getWebhookInfo();
        console.log(`\nüì° Telegram Webhook Info:`);
        console.log(`- URL: ${webhookInfo.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(
          `- –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`
        );
        console.log(
          `- –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message || '–Ω–µ—Ç'}`
        );
        console.log(
          `- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏: ${webhookInfo.last_error_date ? new Date(webhookInfo.last_error_date * 1000) : '–Ω–µ—Ç'}`
        );
        console.log(
          `- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${webhookInfo.max_connections || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`
        );
        console.log(
          `- –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.allowed_updates?.join(', ') || '–≤—Å–µ'}`
        );
      } catch (error) {
        console.log(
          `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: ${error instanceof Error ? error.message : 'Unknown'}`
        );
      }

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      try {
        const botInfo = await botInstance.bot.api.getMe();
        console.log(`\nü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:`);
        console.log(`- ID: ${botInfo.id}`);
        console.log(`- Username: @${botInfo.username}`);
        console.log(`- –ò–º—è: ${botInfo.first_name}`);
        console.log(
          `- –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: ${botInfo.can_join_groups}`
        );
        console.log(
          `- –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö: ${botInfo.can_read_all_group_messages}`
        );
        console.log(
          `- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline –∑–∞–ø—Ä–æ—Å—ã: ${botInfo.supports_inline_queries}`
        );
      } catch (error) {
        console.log(
          `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${error instanceof Error ? error.message : 'Unknown'}`
        );
      }
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (botInstance?.bot) {
      console.log(`\nüì® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...`);

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id –¥–ª—è —Ç–µ—Å—Ç–∞
      const testUser = await db.user.findFirst({
        where: {
          projectId: project.id,
          telegramId: { not: null }
        }
      });

      if (testUser && testUser.telegramId) {
        try {
          await botInstance.bot.api.sendMessage(
            testUser.telegramId.toString(),
            'üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!'
          );
          console.log(
            `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${testUser.telegramId}`
          );
        } catch (error) {
          console.log(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown'}`
          );
        }
      } else {
        console.log(
          `‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegramId –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏`
        );
      }
    }

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await db.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
testBotWebhook().catch(console.error);
