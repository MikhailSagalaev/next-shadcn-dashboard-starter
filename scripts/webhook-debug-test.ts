#!/usr/bin/env npx tsx

import { ProjectService } from '../src/lib/services/project.service';

async function webhookDebugTest() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ webhook');

    const webhookSecret = 'cmfcb42zr0002v8hseaj6kyza';
    const webhookUrl = `https://gupil.ru/api/webhook/${webhookSecret}`;

    console.log(`URL: ${webhookUrl}`);
    console.log(`Secret: ${webhookSecret}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç –µ—â–µ —Ä–∞–∑
    const project =
      await ProjectService.getProjectByWebhookSecret(webhookSecret);
    console.log(`–ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${project ? '‚úÖ' : '‚ùå'}`);
    if (project) {
      console.log(`  ID: ${project.id}`);
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
      console.log(`  –ê–∫—Ç–∏–≤–µ–Ω: ${project.isActive}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç...');

    const testPayload = { test: 1 };

    const response = await fetch(`${webhookUrl}?test=1`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TildaDebugTest/1.0'
      },
      body: JSON.stringify(testPayload)
    });

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`–°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`Content-Type: ${response.headers.get('content-type')}`);

    const responseText = await response.text();
    console.log(`–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${responseText}`);

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º test
    console.log('\nüì° –¢–µ—Å—Ç —Å query test=true...');
    const response2 = await fetch(`${webhookUrl}?test=true`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({})
    });

    console.log(`–°—Ç–∞—Ç—É—Å: ${response2.status}`);
    const responseText2 = await response2.text();
    console.log(`–û—Ç–≤–µ—Ç: ${responseText2}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

webhookDebugTest();
