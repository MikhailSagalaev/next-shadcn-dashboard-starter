#!/usr/bin/env npx tsx

import { db } from '../src/lib/db';

async function checkWebhookLogs() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ webhook –¥–ª—è –∑–∞–∫–∞–∑–∞ 1564748188');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ webhook
    const logs = await db.webhookLog.findMany({
      where: {
        OR: [
          { body: { path: ['payment', 'orderid'], equals: '1564748188' } },
          { body: { path: ['orderid'], equals: '1564748188' } },
          { response: { path: ['order', 'id'], equals: '1564748188' } }
        ]
      },
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    if (logs.length === 0) {
      console.log('‚ùå –õ–æ–≥–∏ webhook –¥–ª—è –∑–∞–∫–∞–∑–∞ 1564748188 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: ${logs.length}`);

      for (const log of logs) {
        console.log(`\nüìã –õ–æ–≥ ${log.id}:`);
        console.log(`  –í—Ä–µ–º—è: ${log.createdAt}`);
        console.log(`  –ü—Ä–æ–µ–∫—Ç: ${log.projectId}`);
        console.log(`  –°—Ç–∞—Ç—É—Å: ${log.status} ${log.success ? '‚úÖ' : '‚ùå'}`);
        console.log(`  Endpoint: ${log.endpoint}`);

        if (log.body) {
          const body = log.body as any;
          console.log(
            `  –ü—Ä–æ–º–æ–∫–æ–¥: ${body?.payment?.promocode || body?.promocode || '–Ω–µ—Ç'}`
          );
          console.log(`  appliedBonuses: ${body?.appliedBonuses || '–Ω–µ—Ç'}`);
          console.log(`  Email: ${body?.Email || body?.email || '–Ω–µ—Ç'}`);
        }

        if (log.response) {
          console.log(
            `  –û—Ç–≤–µ—Ç: ${JSON.stringify(log.response).substring(0, 200)}...`
          );
        }

        // errorMessage –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º orderid
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å orderid 1564748188');

    const transactions = await db.transaction.findMany({
      where: {
        OR: [
          { description: { contains: '1564748188' } },
          { metadata: { path: ['orderId'], equals: '1564748188' } }
        ]
      },
      include: {
        user: true
      },
      orderBy: { createdAt: 'desc' }
    });

    if (transactions.length === 0) {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å orderid 1564748188 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);

      for (const tx of transactions) {
        console.log(`\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`);
        console.log(`  –í—Ä–µ–º—è: ${tx.createdAt}`);
        console.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tx.user?.email}`);
        console.log(`  –¢–∏–ø: ${tx.type}`);
        console.log(`  –°—É–º–º–∞: ${tx.amount}`);
        console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        if (tx.metadata) {
          console.log(`  Metadata: ${JSON.stringify(tx.metadata)}`);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

checkWebhookLogs();
