const { PrismaClient } = require('@prisma/client');

async function checkWorkflowContent() {
  const prisma = new PrismaClient();

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ workflow...');

    const version = await prisma.workflowVersion.findFirst({
      where: {
        workflowId: 'cmhdpf1ai0001v824cvwo816y',
        isActive: true
      }
    });

    if (!version) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`–í–µ—Ä—Å–∏—è: ${version.version}, ID: ${version.id}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥: ${version.nodes.length}`);

    // –ü–∞—Ä—Å–∏–º nodes –∏ –∏—â–µ–º action.menu_command
    const nodes = JSON.parse(JSON.stringify(version.nodes));
    const menuCommandNodes = nodes.filter(function(node) { return node.type === 'action.menu_command'; });

    console.log(`–ù–∞–π–¥–µ–Ω–æ action.menu_command –Ω–æ–¥: ${menuCommandNodes.length}`);
    menuCommandNodes.forEach(function(node, index) {
      console.log(`  ${index + 1}. ID: ${node.id}, Label: ${node.data ? node.data.label : 'No label'}`);
      console.log(`     Command: ${node.data && node.data.config && node.data.config['action.menu_command'] ? node.data.config['action.menu_command'].command : 'No command'}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkWorkflowContent();
