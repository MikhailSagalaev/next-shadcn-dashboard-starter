/**
 * @file: scripts/test-bot-connection.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
 * @project: SaaS Bonus System
 * @dependencies: Bot, logger
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

import { Bot } from 'grammy';
import { logger } from '../src/lib/logger';

async function testBotConnection(token: string) {
  console.log('ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ë–û–¢–ê');
  console.log('=' .repeat(50));

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const bot = new Bot(token);
    
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await bot.api.getMe();
    
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
    console.log(`   ID: ${botInfo.id}`);
    console.log(`   Username: @${botInfo.username}`);
    console.log(`   First Name: ${botInfo.first_name}`);
    console.log(`   Can Join Groups: ${botInfo.can_join_groups}`);
    console.log(`   Can Read All Group Messages: ${botInfo.can_read_all_group_messages}`);
    console.log(`   Supports Inline Queries: ${botInfo.supports_inline_queries}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
    try {
      const webhookInfo = await bot.api.getWebhookInfo();
      console.log(`   URL: ${webhookInfo.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`   Has Custom Certificate: ${webhookInfo.has_custom_certificate}`);
      console.log(`   Pending Update Count: ${webhookInfo.pending_update_count}`);
      
      if (webhookInfo.url) {
        console.log('‚ö†Ô∏è  Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —ç—Ç–æ –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å polling');
      } else {
        console.log('‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling');
      }
    } catch (webhookError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook: ${webhookError instanceof Error ? webhookError.message : 'Unknown'}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\nüì® –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    try {
      const updates = await bot.api.getUpdates({ limit: 1 });
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updates.length}`);
      if (updates.length > 0) {
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: ${updates[0].update_id}`);
      }
    } catch (updatesError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updatesError instanceof Error ? updatesError.message : 'Unknown'}`);
      
      if (updatesError instanceof Error && updatesError.message.includes('409')) {
        console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù 409 –ö–û–ù–§–õ–ò–ö–¢!');
        console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        console.log('   –†–µ—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞');
      }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('Unauthorized')) {
        console.log('üîë –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
        console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞');
      } else if (error.message.includes('Bad Request')) {
        console.log('üìù –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞');
        console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
      } else if (error.message.includes('409')) {
        console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù 409 –ö–û–ù–§–õ–ò–ö–¢!');
        console.log('   –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        console.log('   –†–µ—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã');
      }
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const token = process.argv[2];
  
  if (!token) {
    console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/test-bot-connection.ts <BOT_TOKEN>');
    console.log('–ü—Ä–∏–º–µ—Ä: npx tsx scripts/test-bot-connection.ts 7739551433:AAEkg4ogMW6g-IBMV4oxvHQ7rmP4jNlbClw');
    process.exit(1);
  }
  
  testBotConnection(token)
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { testBotConnection };
