/**
 * @file: scripts/diagnose-bot-conflicts.ts
 * @description: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Telegram –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, Prisma
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

import { Bot } from 'grammy';
import { db } from '../src/lib/db';
import { logger } from '../src/lib/logger';

interface BotConflictInfo {
  projectId: string;
  botToken: string;
  botUsername: string;
  isActive: boolean;
  webhookInfo?: any;
  error?: string;
}

async function diagnoseBotConflicts() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Telegram –±–æ—Ç–æ–≤...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–æ–≤
    const projects = await db.project.findMany({
      include: {
        botSettings: true
      }
    });

    const botConflicts: BotConflictInfo[] = [];

    for (const project of projects) {
      if (!project.botSettings?.botToken) {
        continue;
      }

      console.log(`üìã –ü—Ä–æ–µ–∫—Ç: ${project.name} (${project.id})`);
      console.log(`   –¢–æ–∫–µ–Ω: ***${project.botSettings.botToken.slice(-4)}`);
      console.log(`   Username: ${project.botSettings.botUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${project.botSettings.isActive ? '–¥–∞' : '–Ω–µ—Ç'}`);

      try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const tempBot = new Bot(project.botSettings.botToken);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        const webhookInfo = await tempBot.api.getWebhookInfo();
        
        console.log(`   Webhook URL: ${webhookInfo.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`   Pending updates: ${webhookInfo.pending_update_count || 0}`);
        
        if (webhookInfo.url) {
          console.log(`   ‚ö†Ô∏è  Webhook –∞–∫—Ç–∏–≤–µ–Ω - –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å polling`);
        }

        botConflicts.push({
          projectId: project.id,
          botToken: project.botSettings.botToken,
          botUsername: project.botSettings.botUsername || '',
          isActive: project.botSettings.isActive,
          webhookInfo
        });

      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
        
        botConflicts.push({
          projectId: project.id,
          botToken: project.botSettings.botToken,
          botUsername: project.botSettings.botUsername || '',
          isActive: project.botSettings.isActive,
          error: errorMessage
        });
      }

      console.log('');
    }

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:');
    
    const activeBots = botConflicts.filter(bot => bot.isActive);
    const botsWithWebhooks = botConflicts.filter(bot => bot.webhookInfo?.url);
    const botsWithErrors = botConflicts.filter(bot => bot.error);

    console.log(`   –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: ${botConflicts.length}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: ${activeBots.length}`);
    console.log(`   –ë–æ—Ç–æ–≤ —Å webhook: ${botsWithWebhooks.length}`);
    console.log(`   –ë–æ—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${botsWithErrors.length}`);

    if (botsWithWebhooks.length > 0) {
      console.log('\n‚ö†Ô∏è  –ë–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ webhook:');
      botsWithWebhooks.forEach(bot => {
        console.log(`   - ${bot.projectId}: ${bot.webhookInfo?.url}`);
      });
    }

    if (botsWithErrors.length > 0) {
      console.log('\n‚ùå –ë–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏:');
      botsWithErrors.forEach(bot => {
        console.log(`   - ${bot.projectId}: ${bot.error}`);
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    if (botsWithWebhooks.length > 0) {
      console.log('   1. –£–¥–∞–ª–∏—Ç–µ webhook –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ:');
      botsWithWebhooks.forEach(bot => {
        console.log(`      curl -X POST "https://api.telegram.org/bot${bot.botToken}/deleteWebhook"`);
      });
    }

    if (botsWithErrors.length > 0) {
      console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å');
    }

    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–æ–≤');
    console.log('   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ webhook');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseBotConflicts().catch(console.error);
