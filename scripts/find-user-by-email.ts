#!/usr/bin/env npx tsx

import { db } from '../src/lib/db';

async function findUserByEmail() {
  const email = process.argv[2];

  if (!email) {
    console.log('Usage: npx tsx scripts/find-user-by-email.ts <email>');
    process.exit(1);
  }

  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: ${email}`);

    const users = await db.user.findMany({
      where: {
        email: email
      },
      include: {
        project: true
      }
    });

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

      for (const user of users) {
        console.log(`\nüì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`);
        console.log(`  ID: ${user.id}`);
        console.log(`  –ü—Ä–æ–µ–∫—Ç: ${user.project?.name} (${user.projectId})`);
        console.log(`  Email: ${user.email}`);
        console.log(`  Phone: ${user.phone}`);
        console.log(`  –ò–º—è: ${user.firstName} ${user.lastName}`);
        console.log(`  –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registeredAt}`);
        console.log(`  –ê–∫—Ç–∏–≤–µ–Ω: ${user.isActive}`);
        console.log(`  Total purchases: ${user.totalPurchases}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactions = await db.transaction.findMany({
          where: { userId: user.id },
          orderBy: { createdAt: 'desc' },
          take: 10,
          include: {
            bonus: true
          }
        });

        console.log(`\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):`);
        if (transactions.length === 0) {
          console.log('  ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        } else {
          for (const tx of transactions) {
            console.log(
              `  ${tx.createdAt.toISOString()} | ${tx.type} | ${tx.amount} | ${tx.description}`
            );
            if (tx.metadata) {
              console.log(`    metadata: ${JSON.stringify(tx.metadata)}`);
            }
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã
        const bonuses = await db.bonus.findMany({
          where: { userId: user.id },
          orderBy: { createdAt: 'desc' },
          take: 10
        });

        console.log(`\nüéÅ –ë–æ–Ω—É—Å—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):`);
        if (bonuses.length === 0) {
          console.log('  ‚ùå –ë–æ–Ω—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        } else {
          for (const bonus of bonuses) {
            console.log(
              `  ${bonus.createdAt.toISOString()} | ${bonus.type} | ${bonus.amount} | Used: ${bonus.isUsed} | Expires: ${bonus.expiresAt}`
            );
          }
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

findUserByEmail();
