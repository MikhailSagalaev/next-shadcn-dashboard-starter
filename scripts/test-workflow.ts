/**
 * @file: scripts/test-workflow.ts
 * @description: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
 * @project: SaaS Bonus System
 * @created: 2025-10-16
 * @author: AI Assistant + User
 */

import { db } from '@/lib/db';
import { SimpleWorkflowProcessor } from '@/lib/services/simple-workflow-processor';
import { initializeNodeHandlers } from '@/lib/services/workflow/handlers';

async function testWorkflow() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...\n');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º handlers
    initializeNodeHandlers();

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é workflow
    const workflowVersion = await db.workflowVersion.findFirst({
      where: {
        workflow: {
          projectId: 'cmgntgsdv0000v8mwfwwh30az',
          isActive: true
        },
        isActive: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!workflowVersion) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è workflow –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è workflow: ${workflowVersion.version}`);
    console.log(`  Workflow ID: ${workflowVersion.workflowId}`);
    console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥: ${Object.keys(workflowVersion.nodes).length}`);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    const processor = new SimpleWorkflowProcessor(workflowVersion, 'cmgntgsdv0000v8mwfwwh30az');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const mockContext = {
      from: { id: 524567338, username: 'MIXAdev' },
      chat: { id: 524567338 },
      message: { text: '/start' }
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º workflow
    const result = await processor.process(mockContext as any, 'start');
    
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ workflow:', error);
  } finally {
    await db.$disconnect();
  }
}

testWorkflow();
