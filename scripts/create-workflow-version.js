const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('@prisma/client');

async function createWorkflowVersion() {
  const prisma = new PrismaClient();

  try {
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é workflow...');

    // –ß–∏—Ç–∞–µ–º workflow –∏–∑ —Ñ–∞–π–ª–∞
    const workflowPath = path.join(__dirname, '..', '–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è).json');
    const workflowData = JSON.parse(fs.readFileSync(workflowPath, 'utf8'));

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
    const latestVersion = await prisma.workflowVersion.findFirst({
      where: { workflowId: workflowData.id },
      orderBy: { version: 'desc' }
    });

    const newVersionNumber = (latestVersion?.version || 0) + 1;

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
    await prisma.workflowVersion.updateMany({
      where: { workflowId: workflowData.id, isActive: true },
      data: { isActive: false }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    const version = await prisma.workflowVersion.create({
      data: {
        workflowId: workflowData.id,
        version: newVersionNumber,
        nodes: workflowData.nodes,
        variables: workflowData.variables,
        settings: workflowData.settings,
        entryNodeId: workflowData.entry_node_id,
        isActive: true
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä—Å–∏—è ${newVersionNumber}: ${version.id}`);

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π workflow
    await prisma.workflow.update({
      where: { id: workflowData.id },
      data: {
        nodes: workflowData.nodes,
        variables: workflowData.variables,
        settings: workflowData.settings,
        updatedAt: new Date()
      }
    });

    console.log('‚úÖ Workflow –æ–±–Ω–æ–≤–ª–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createWorkflowVersion();
