/**
 * @file: scripts/check-server-migration.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
 * @project: SaaS Bonus System
 * @dependencies: Prisma, Database
 * @created: 2025-09-28
 * @author: AI Assistant
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkServerMigration() {
  console.log(
    'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö'
  );

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const projects = await prisma.project.findMany({
      select: {
        id: true,
        name: true,
        createdAt: true,
        _count: {
          select: {
            users: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}\n`);

    // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    for (const [index, project] of projects.entries()) {
      console.log(`${index + 1}. ${project.name}`);
      console.log(`   ID: ${project.id}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${project._count.users}`);
      console.log(
        `   –°–æ–∑–¥–∞–Ω: ${project.createdAt.toLocaleDateString('ru-RU')} ${project.createdAt.toLocaleTimeString('ru-RU')}`
      );

      // –ï—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–∫–∞–∂–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
      if (project._count.users > 0) {
        const recentUsers = await prisma.user.findMany({
          where: { projectId: project.id },
          orderBy: { registeredAt: 'desc' },
          take: 3,
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true,
            registeredAt: true,
            _count: {
              select: {
                bonuses: true,
                transactions: true
              }
            }
          }
        });

        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
        recentUsers.forEach((user, i) => {
          const name =
            user.firstName || user.lastName
              ? `${user.firstName || ''} ${user.lastName || ''}`.trim()
              : '–ë–µ–∑ –∏–º–µ–Ω–∏';
          console.log(
            `     ${i + 1}. ${name} (${user.email}) - ${user._count.transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`
          );
        });
      }

      console.log('');
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalUsers = projects.reduce(
      (sum, project) => sum + project._count.users,
      0
    );
    console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ projectId
    const usersWithoutProject = await prisma.user.count({
      where: { projectId: null }
    });

    if (usersWithoutProject > 0) {
      console.log(`   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞: ${usersWithoutProject}`);
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (projects.length > 0) {
      const maxUsersProject = projects.reduce((max, project) =>
        project._count.users > max._count.users ? project : max
      );

      console.log(`   üèÜ –ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
      console.log(
        `      ${maxUsersProject.name} (${maxUsersProject.id}): ${maxUsersProject._count.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkServerMigration();
