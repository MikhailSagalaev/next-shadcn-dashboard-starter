/**
 * @file: src/lib/services/project-variables.service.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * @project: SaaS Bonus System
 * @dependencies: Prisma
 * @created: 2025-10-14
 * @author: AI Assistant + User
 */

import { db } from '@/lib/db';
import type { ProjectVariable } from '@prisma/client';

export interface CreateProjectVariableInput {
  projectId: string;
  key: string;
  value: string;
  description?: string;
  isSystem?: boolean;
}

export interface UpdateProjectVariableInput {
  value?: string;
  description?: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export class ProjectVariablesService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async getProjectVariables(projectId: string): Promise<ProjectVariable[]> {
    return db.projectVariable.findMany({
      where: { projectId },
      orderBy: [
        { isSystem: 'desc' }, // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
        { key: 'asc' }
      ]
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ –∫–ª—é—á—É
   */
  static async getVariableByKey(
    projectId: string,
    key: string
  ): Promise<ProjectVariable | null> {
    return db.projectVariable.findUnique({
      where: {
        projectId_key: {
          projectId,
          key
        }
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ key-value
   */
  static async getVariablesAsObject(projectId: string): Promise<Record<string, string>> {
    const variables = await this.getProjectVariables(projectId);
    return variables.reduce((acc, variable) => {
      acc[variable.key] = variable.value;
      return acc;
    }, {} as Record<string, string>);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
   */
  static async createVariable(
    input: CreateProjectVariableInput
  ): Promise<ProjectVariable> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)
    if (!/^[a-zA-Z0-9_]+$/.test(input.key)) {
      throw new Error('–ö–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ');
    }

    return db.projectVariable.create({
      data: {
        projectId: input.projectId,
        key: input.key,
        value: input.value,
        description: input.description,
        isSystem: input.isSystem || false
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
   */
  static async updateVariable(
    projectId: string,
    key: string,
    input: UpdateProjectVariableInput
  ): Promise<ProjectVariable> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è
    const existing = await this.getVariableByKey(projectId, key);
    if (existing?.isSystem) {
      throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é');
    }

    return db.projectVariable.update({
      where: {
        projectId_key: {
          projectId,
          key
        }
      },
      data: input
    });
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
   */
  static async deleteVariable(projectId: string, key: string): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è
    const existing = await this.getVariableByKey(projectId, key);
    if (existing?.isSystem) {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é');
    }

    await db.projectVariable.delete({
      where: {
        projectId_key: {
          projectId,
          key
        }
      }
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async initializeSystemVariables(projectId: string): Promise<void> {
    const project = await db.project.findUnique({
      where: { id: projectId },
      select: { name: true, domain: true }
    });

    if (!project) {
      throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const systemVariables: CreateProjectVariableInput[] = [
      {
        projectId,
        key: 'project_name',
        value: project.name,
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
        isSystem: true
      },
      {
        projectId,
        key: 'domain',
        value: project.domain || '',
        description: '–î–æ–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞',
        isSystem: true
      },
      {
        projectId,
        key: 'company_name',
        value: project.name,
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
        isSystem: false
      },
      {
        projectId,
        key: 'support_email',
        value: 'support@example.com',
        description: 'Email —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        isSystem: false
      },
      {
        projectId,
        key: 'support_phone',
        value: '+7 (999) 123-45-67',
        description: '–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        isSystem: false
      },
      {
        projectId,
        key: 'website',
        value: project.domain ? `https://${project.domain}` : '',
        description: '–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏',
        isSystem: false
      }
    ];

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
    for (const variable of systemVariables) {
      const existing = await this.getVariableByKey(projectId, variable.key);
      if (!existing) {
        await this.createVariable(variable);
      }
    }
  }

  /**
   * –ó–∞–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç {variable_name}
   */
  static async replaceVariablesInText(
    projectId: string,
    text: string,
    additionalVariables?: Record<string, string>
  ): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectVariables = await this.getVariablesAsObject(projectId);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    const allVariables = {
      ...projectVariables,
      ...additionalVariables
    };

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞–ª–∏—á–∏—è user.expiringBonusesFormatted
    if (additionalVariables && 'user.expiringBonusesFormatted' in additionalVariables) {
      allVariables['user.expiringBonusesFormatted'] = additionalVariables['user.expiringBonusesFormatted'];
    }

    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è {variable_name} –∏ {user.variable}
    let result = text;

    console.log('üîß STARTING VARIABLE REPLACEMENT:');
    console.log('   Original text:', text);
    console.log('   All variables available:', Object.keys(allVariables));
    console.log('   All variables values:', allVariables);

    for (const [key, value] of Object.entries(allVariables)) {
      // –ò—â–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {variable_name}
      const placeholder = `{${key}}`;
      const beforeReplace = result;

      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º undefined/null
      const stringValue = value === undefined || value === null ? '' : String(value);

      // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
      result = result.replace(new RegExp(placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), stringValue);

      // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      if (key.startsWith('user.')) {
        console.log(`üîÑ Replacing {${key}}:`, {
          key,
          value: stringValue || 'EMPTY!',
          originalValue: value,
          originalType: typeof value,
          placeholder,
          textContainsPlaceholder: beforeReplace.includes(placeholder),
          beforeReplace: beforeReplace.includes(placeholder),
          afterReplace: result.includes(placeholder)
        });
      }
    }

    console.log('‚úÖ FINAL RESULT:', result);
    console.log('   Contains any user.* placeholders:', result.includes('{user.'));

    return result;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ UI
   */
  static async getAvailableVariables(projectId: string): Promise<Array<{
    key: string;
    value: string;
    description?: string;
    isSystem: boolean;
  }>> {
    const variables = await this.getProjectVariables(projectId);
    return variables.map(v => ({
      key: v.key,
      value: v.value,
      description: v.description || undefined,
      isSystem: v.isSystem
    }));
  }
}

