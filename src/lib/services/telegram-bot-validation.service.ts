/**
 * @file: telegram-bot-validation.service.ts
 * @description: –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram Bot —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
 * @project: SaaS Bonus System
 * @dependencies: Grammy Bot API
 * @created: 2024-12-10
 * @updated: 2025-01-23
 * @author: AI Assistant + User
 */

import { Bot } from 'grammy';
import { logger } from '@/lib/logger';

export interface BotValidationResult {
  isValid: boolean;
  botInfo?: {
    id: number;
    username: string;
    firstName: string;
    canJoinGroups: boolean;
    canReadAllGroupMessages: boolean;
    supportsInlineQueries: boolean;
  };
  error?: string;
}

export interface BotTestResult {
  success: boolean;
  message?: string;
  error?: string;
  details?: {
    botActive: boolean;
    webhookStatus?: string;
    lastUpdate?: string | null;
    canSendMessages?: boolean;
  };
}

export interface BotStatusInfo {
  configured: boolean;
  status: 'ACTIVE' | 'INACTIVE' | 'ERROR';
  message: string;
  bot?: {
    id: number;
    username: string;
    firstName: string;
  };
  connection?: {
    hasWebhook: boolean;
    lastUpdate?: string | null;
    canReceiveUpdates: boolean;
  };
}

export class TelegramBotValidationService {
  /**
   * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API bot/status)
   */
  static async getBotStatus(token: string): Promise<BotStatusInfo> {
    try {
      if (!token) {
        return {
          configured: false,
          status: 'INACTIVE',
          message: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
      }

      const tempBot = new Bot(token);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await tempBot.api.getMe();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
      let webhookInfo;
      try {
        webhookInfo = await tempBot.api.getWebhookInfo();
      } catch (webhookError) {
        logger.warn('Failed to get webhook info', { error: webhookError });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑ –≤—ã–∑–æ–≤–∞ getUpdates,
      // —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π long polling –≤ BotManager
      const hasWebhook = Boolean(webhookInfo?.url);
      const canReceiveUpdates = hasWebhook || process.env.NODE_ENV !== 'production';
      const lastUpdate = null;

      logger.info('Bot status checked successfully', {
        botId: botInfo.id.toString(),
        username: botInfo.username,
        hasWebhook,
        canReceiveUpdates
      });

      return {
        configured: true,
        status: 'ACTIVE',
        message: `–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`,
        bot: {
          id: botInfo.id,
          username: botInfo.username || '',
          firstName: botInfo.first_name
        },
        connection: {
          hasWebhook,
          lastUpdate,
          canReceiveUpdates
        }
      };
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      logger.error('Bot status check failed', {
        error: errMsg,
        tokenPreview: token.substring(0, 10) + '...'
      });

      let status: 'INACTIVE' | 'ERROR' = 'ERROR';
      let message = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞';

      if (errMsg.includes('401') || errMsg.includes('Unauthorized')) {
        status = 'INACTIVE';
        message = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞';
      } else if (errMsg.includes('network') || errMsg.includes('timeout')) {
        message = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
      }

      return {
        configured: true,
        status,
        message
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram Bot API
   */
  static async validateBotToken(token: string): Promise<BotValidationResult> {
    try {
      if (!token || !token.includes(':')) {
        return {
          isValid: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª ":"'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const tempBot = new Bot(token);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await tempBot.api.getMe();

      logger.info('Bot token validated successfully', {
        botId: botInfo.id.toString(),
        username: botInfo.username
      });

      return {
        isValid: true,
        botInfo: {
          id: botInfo.id,
          username: botInfo.username || '',
          firstName: botInfo.first_name,
          canJoinGroups: botInfo.can_join_groups || false,
          canReadAllGroupMessages: botInfo.can_read_all_group_messages || false,
          supportsInlineQueries: botInfo.supports_inline_queries || false
        }
      };
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      logger.error('Bot token validation failed', {
        error: errMsg,
        tokenPreview: token.substring(0, 10) + '...'
      });

      let errorMessage = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞';

      if (errMsg.includes('401')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ @BotFather';
      } else if (errMsg.includes('network')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      } else if (errMsg.includes('timeout')) {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      }

      return {
        isValid: false,
        error: errorMessage
      };
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
   */
  static async testBot(
    token: string,
    testChatId?: string
  ): Promise<BotTestResult> {
    try {
      const tempBot = new Bot(token);

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await tempBot.api.getMe();

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
      let webhookStatus = 'none';
      try {
        const webhookInfo = await tempBot.api.getWebhookInfo();
        if (webhookInfo.url) {
          webhookStatus = `active (${webhookInfo.url})`;
        } else {
          webhookStatus = 'not set';
        }
      } catch (webhookError) {
        webhookStatus = 'check failed';
      }

      // 3. –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑ getUpdates,
      // —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç polling/webhook
      const canReceiveUpdates = webhookStatus !== 'not set' || process.env.NODE_ENV !== 'production';
      const lastUpdateTime = null;

      // 4. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let canSendMessages = false;
      if (testChatId) {
        try {
          const testMessage =
            `ü§ñ –¢–µ—Å—Ç –±–æ—Ç–∞ —É—Å–ø–µ—à–µ–Ω!\n\n` +
            `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
            `‚Ä¢ –ò–º—è: ${botInfo.first_name}\n` +
            `‚Ä¢ Username: @${botInfo.username}\n` +
            `‚Ä¢ ID: ${botInfo.id}\n\n` +
            `üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n` +
            `‚Ä¢ Webhook: ${webhookStatus}\n` +
            `‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${canReceiveUpdates ? '‚úÖ' : '‚ùå'}\n` +
            `${lastUpdateTime ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateTime}\n` : ''}` +
            `\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

          await tempBot.api.sendMessage(testChatId, testMessage);
          canSendMessages = true;

          logger.info('Bot test message sent successfully', {
            chatId: testChatId,
            botUsername: botInfo.username
          });
        } catch (sendError) {
          const sendMsg =
            sendError instanceof Error ? sendError.message : String(sendError);
          logger.warn('Failed to send test message', {
            error: sendMsg,
            chatId: testChatId
          });

          if (sendMsg.includes('chat not found')) {
            throw new Error(
              '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID —á–∞—Ç–∞ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            );
          } else if (sendMsg.includes('Forbidden')) {
            throw new Error(
              '–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç —á–∞—Ç'
            );
          } else {
            throw sendError;
          }
        }
      }

      return {
        success: true,
        message: testChatId
          ? `–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${testChatId}`
          : `–ë–æ—Ç @${botInfo.username} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`,
        details: {
          botActive: true,
          webhookStatus,
          lastUpdate: lastUpdateTime,
          canSendMessages
        }
      };
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      logger.error('Bot test failed', {
        error: errMsg,
        chatId: testChatId,
        tokenPreview: token.substring(0, 10) + '...'
      });

      return {
        success: false,
        error: errMsg,
        details: {
          botActive: false,
          canSendMessages: false
        }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
   */
  static async getBotInfo(token: string) {
    try {
      const tempBot = new Bot(token);
      const botInfo = await tempBot.api.getMe();

      return {
        id: botInfo.id,
        username: botInfo.username || '',
        firstName: botInfo.first_name,
        isBot: botInfo.is_bot
      };
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      logger.error('Failed to get bot info', {
        error: errMsg,
        tokenPreview: token.substring(0, 10) + '...'
      });
      throw error;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  static async setBotCommands(token: string) {
    try {
      const tempBot = new Bot(token);

      const commands = [
        { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'balance', description: 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤' },
        { command: 'history', description: 'üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' },
        { command: 'level', description: '‚≠ê –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å' },
        { command: 'referral', description: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞' },
        { command: 'invite', description: 'üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞' },
        { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞' }
      ];

      await tempBot.api.setMyCommands(commands);

      logger.info('Bot commands set successfully', {
        tokenPreview: token.substring(0, 10) + '...',
        commandsCount: commands.length
      });

      return true;
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      logger.error('Failed to set bot commands', {
        error: errMsg,
        tokenPreview: token.substring(0, 10) + '...'
      });
      throw error;
    }
  }
}
