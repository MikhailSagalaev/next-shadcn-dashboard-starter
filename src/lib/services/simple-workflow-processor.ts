/**
 * @file: src/lib/services/simple-workflow-processor.ts
 * @description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ workflow —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Node Handlers Registry
 * @project: SaaS Bonus System
 * @dependencies: Node Handlers Registry, Execution Context Manager
 * @created: 2025-10-12
 * @author: AI Assistant + User
 */

import { Context } from 'grammy';
import { logger } from '@/lib/logger';
import { db } from '@/lib/db';
import { nodeHandlersRegistry } from './workflow/node-handlers-registry';
import { ExecutionContextManager } from './workflow/execution-context-manager';
import type {
  Workflow,
  WorkflowVersion,
  ExecutionContext,
  WorkflowNode,
  WorkflowNodeType,
  WorkflowConnection,
  HandlerResult
} from '@/types/workflow';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ workflow —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Node Handlers Registry
 */
export class SimpleWorkflowProcessor {
  private workflowVersion: WorkflowVersion;
  private projectId: string;
  private nodesMap: Map<string, WorkflowNode>;
  private connectionsMap: Map<string, WorkflowConnection>;
  private currentContext: ExecutionContext | null = null;

  constructor(workflowVersion: WorkflowVersion, projectId: string) {
    this.workflowVersion = workflowVersion;
    this.projectId = projectId;

    // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –Ω–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    this.nodesMap = new Map();
    Object.entries(workflowVersion.nodes).forEach(([id, node]) => {
      this.nodesMap.set(id, node);
      console.log(`üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–¥–∞ –≤ nodesMap: ${id} (${node.type})`);
    });
    
    console.log(`üìã –í—Å–µ–≥–æ –Ω–æ–¥ –≤ nodesMap: ${this.nodesMap.size}`);
    console.log(`üìã –ö–ª—é—á–∏ nodesMap:`, Array.from(this.nodesMap.keys()));

    // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º connections –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    this.connectionsMap = new Map();
    if (workflowVersion.connections) {
      workflowVersion.connections.forEach(connection => {
        const key = `${connection.source}->${connection.target}`;
        this.connectionsMap.set(key, connection);
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–∫–æ–º–∞–Ω–¥—ã
   */
  async process(ctx: Context, trigger: 'start' | 'message' | 'callback'): Promise<boolean> {
    let context: ExecutionContext | null = null;

    try {
      logger.info('üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ workflow', {
        projectId: this.projectId,
        workflowId: this.workflowVersion.workflowId,
        version: this.workflowVersion.version,
        trigger,
        userId: ctx.from?.id,
        username: ctx.from?.username,
        totalNodes: this.nodesMap.size
      });

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const telegramUserId = ctx.from?.id?.toString();
      const chatId = ctx.chat?.id?.toString();

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ Telegram ID
      let userId: string | undefined;
      if (telegramUserId) {
        try {
          logger.debug('Looking for user by telegram ID', { telegramUserId, projectId: this.projectId });
          
          const user = await db.user.findFirst({
            where: {
              telegramId: BigInt(telegramUserId),
              projectId: this.projectId
            },
            select: { id: true }
          });
          
          userId = user?.id;
          logger.debug('User lookup result', { telegramUserId, userId, found: !!user });
        } catch (error) {
          logger.warn('Failed to find user by telegram ID', { telegramUserId, error });
        }
      } else {
        logger.debug('No telegramUserId provided, skipping user lookup');
      }

      context = await ExecutionContextManager.createContext(
        this.projectId,
        this.workflowVersion.workflowId,
        this.workflowVersion.version,
        this.generateSessionId(ctx),
        userId, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –∞ –Ω–µ Telegram ID
        chatId,
        telegramUserId, // Telegram ID –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        ctx.from?.username,
        ctx.message?.text,
        ctx.callbackQuery?.data
      );

      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –Ω–æ–¥—É –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
      const startNode = this.findTriggerNode(trigger, ctx);
      if (!startNode) {
        logger.warn('‚ö†Ô∏è –°—Ç–∞—Ä—Ç–æ–≤–∞—è –Ω–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
          projectId: this.projectId,
          workflowId: this.workflowVersion.workflowId,
          trigger,
          hasContact: !!ctx.message?.contact,
          hasCallback: !!ctx.callbackQuery,
          availableNodeTypes: Array.from(this.nodesMap.values()).map((n: any) => n.type)
        });
        return false;
      }

      logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow', {
        projectId: this.projectId,
        executionId: context.executionId,
        startNodeId: startNode.id,
        startNodeLabel: startNode.data?.label
      });

      console.log('Starting workflow execution with node:', startNode.id);

      // –í—ã–ø–æ–ª–Ω—è–µ–º workflow –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –Ω–æ–¥—ã
      try {
        await this.executeWorkflow(context, startNode.id);
        console.log('Workflow execution loop completed successfully');
      } catch (executionError) {
        console.error('Workflow execution failed:', {
          error: executionError instanceof Error ? executionError.message : 'Unknown execution error',
          nodeId: startNode.id
        });
        throw executionError;
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—à–µ–ª –ª–∏ workflow –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting
      try {
        const execution = await db.workflowExecution.findUnique({
          where: { id: context.executionId },
          select: { status: true, waitType: true, currentNodeId: true }
        });

        if (execution?.status === 'waiting') {
          logger.info('‚è∏Ô∏è Workflow execution paused (waiting state detected)', {
            executionId: context.executionId,
            waitType: execution.waitType,
            currentNodeId: execution.currentNodeId,
            steps: context.step
          });
          // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ –ø–æ–∑–∂–µ
          return true;
        }
      } catch (checkError) {
        console.warn('Failed to check execution status after loop', checkError);
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∫ completed, –µ—Å–ª–∏ –Ω–µ waiting
      try {
        await ExecutionContextManager.completeExecution(context, 'completed', undefined, context.step);
        console.log('Execution completed successfully');
      } catch (completeError) {
        console.error('Failed to complete execution, but workflow was successful:', completeError);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ workflow –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
      }

      logger.info('‚úÖ Workflow —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
        projectId: this.projectId,
        workflowId: this.workflowVersion.workflowId,
        executionId: context.executionId,
        steps: context.step
      });

      return true;
    } catch (error) {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
      if (context) {
        await ExecutionContextManager.completeExecution(
          context,
          'failed',
          error instanceof Error ? error.message : 'Unknown error',
          context.step
        );
      }

      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ workflow', {
        projectId: this.projectId,
        workflowId: this.workflowVersion.workflowId,
        executionId: context?.executionId,
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID —Å–µ—Å—Å–∏–∏
   */
  private generateSessionId(ctx: Context): string {
    const chatId = ctx.chat?.id || ctx.from?.id || 'unknown';
    const userId = ctx.from?.id || 'unknown';

    console.log('Generating session ID:', {
      chatId: ctx.chat?.id,
      fromId: ctx.from?.id,
      generatedSessionId: `${chatId}_${userId}_${Date.now()}`
    });

    return `${chatId}_${userId}_${Date.now()}`;
  }

  /**
   * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–æ–¥—ã
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workflow –ø–æ—Å–ª–µ waiting —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  async resumeWorkflow(context: ExecutionContext, startNodeId: string): Promise<void> {
    return this.executeWorkflow(context, startNodeId);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç workflow –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–æ–¥—ã
   * ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ visitedNodes –∏ maxIterations
   */
  private async executeWorkflow(context: ExecutionContext, startNodeId: string): Promise<void> {
    console.log('üöÄ EXECUTING WORKFLOW FROM NODE:', startNodeId);
    console.log('üìã Available nodes:', Array.from(this.nodesMap.keys()));
    
    this.currentContext = context;
    let currentNodeId: string | null = startNodeId;
    let step = 0;
    
    // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã
    const visitedNodes = new Map<string, number>(); // nodeId -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
    const MAX_NODE_VISITS = 100; // –ú–∞–∫—Å–∏–º—É–º 100 –ø–æ—Å–µ—â–µ–Ω–∏–π –æ–¥–Ω–æ–π –Ω–æ–¥—ã (–¥–ª—è —Ü–∏–∫–ª–æ–≤)

    while (currentNodeId && step < context.maxSteps) {
      step++;
      
      console.log(`üîÑ STEP ${step}: Executing node ${currentNodeId}`);

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π –Ω–æ–¥—ã
      const visitCount = visitedNodes.get(currentNodeId) || 0;
      if (visitCount >= MAX_NODE_VISITS) {
        throw new Error(
          `Infinite loop detected: Node ${currentNodeId} visited ${visitCount} times. ` +
          `Maximum allowed: ${MAX_NODE_VISITS}`
        );
      }
      visitedNodes.set(currentNodeId, visitCount + 1);

      const updatedContext = ExecutionContextManager.updateContextForStep(
        context,
        step,
        currentNodeId,
        'unknown' // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ handler
      );

      const node = this.nodesMap.get(currentNodeId);
      if (!node) {
        console.error(`Node not found: ${currentNodeId}`);
        throw new Error(`Node not found: ${currentNodeId}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º handler –¥–ª—è —Ç–∏–ø–∞ –Ω–æ–¥—ã
      const handler = nodeHandlersRegistry.get(node.type as WorkflowNodeType);
      if (!handler) {
        throw new Error(`No handler found for node type: ${node.type}`);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ handler
      console.log(`‚ö° Executing ${node.type} handler for node ${currentNodeId}`);
      const nextNodeId = await handler.execute(node, updatedContext);
      console.log(`‚úÖ Node ${currentNodeId} executed, nextNodeId: ${nextNodeId}`);
      context.step = step;

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (nextNodeId === '__WAITING_FOR_USER_INPUT__' || nextNodeId === '__WAITING_FOR_CONTACT__') {
        logger.info('‚è∏Ô∏è Workflow paused waiting for user input', {
          executionId: context.executionId,
          nodeId: currentNodeId,
          step
        });
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - workflow –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–¥: —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç handler'–∞,
      // –µ—Å–ª–∏ null - –∏—â–µ–º –ø–æ connections
      if (nextNodeId !== null) {
        currentNodeId = nextNodeId;
      } else {
        currentNodeId = await this.getNextNodeId(currentNodeId);
      }

      // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      if (currentNodeId === null) {
        break;
      }
    }

    if (step >= context.maxSteps) {
      throw new Error(
        `Maximum steps (${context.maxSteps}) exceeded. ` +
        `This might indicate an infinite loop or overly complex workflow.`
      );
    }
    
    console.log(`‚úÖ Workflow completed successfully in ${step} steps`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–¥ –ø–æ connections
   */
  private async getNextNodeId(currentNodeId: string): Promise<string | null> {
    // –ò—â–µ–º connection –≥–¥–µ source - —Ç–µ–∫—É—â–∏–π –Ω–æ–¥
    const relevantConnections = Array.from(this.connectionsMap.values())
      .filter(connection => connection.source === currentNodeId);

    if (relevantConnections.length === 0) {
      return null;
    }

    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ connection, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë target
    if (relevantConnections.length === 1) {
      return relevantConnections[0].target;
    }

    // –î–ª—è condition –Ω–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º sourceHandle –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ª–æ–≤–∏—è
    const currentNode = this.nodesMap.get(currentNodeId);
    if (currentNode?.type === 'condition') {
      console.log(`üîç getNextNodeId: Processing condition node ${currentNodeId}`);
      console.log(`üîç getNextNodeId: Available connections:`, relevantConnections.map(c => ({
        source: c.source,
        target: c.target,
        sourceHandle: (c as any).sourceHandle,
        type: c.type
      })));

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ª–æ–≤–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ condition handler)
      const conditionResult = await this.getConditionResultFromContext();

      // –ò—â–µ–º connection —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º sourceHandle
      const expectedHandle = conditionResult ? 'true' : 'false';
      console.log(`üîç getNextNodeId: Looking for sourceHandle="${expectedHandle}"`);

      const matchingConnection = relevantConnections.find(conn => {
        const connSourceHandle = (conn as any).sourceHandle;
        const matches = connSourceHandle === expectedHandle;
        console.log(`üîç getNextNodeId: Checking connection ${conn.source}‚Üí${conn.target}, sourceHandle="${connSourceHandle}", matches=${matches}`);
        return matches;
      });

      if (matchingConnection) {
        console.log(`‚úÖ Condition ${currentNodeId}: result=${conditionResult}, following sourceHandle="${expectedHandle}" ‚Üí ${matchingConnection.target}`);
        return matchingConnection.target;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π connection, –±–µ—Ä–µ–º default
      const defaultConnection = relevantConnections.find(conn => conn.type === 'default');
      if (defaultConnection) {
        console.log(`‚ö†Ô∏è No matching sourceHandle found, using default connection ‚Üí ${defaultConnection.target}`);
        return defaultConnection.target;
      }

      console.warn(`‚ö†Ô∏è No matching connection found for condition ${currentNodeId}, result=${conditionResult}`);
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π target (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    return relevantConnections[0].target;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ª–æ–≤–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private async getConditionResultFromContext(): Promise<boolean> {
    if (!this.currentContext) {
      console.log('‚ö†Ô∏è getConditionResultFromContext: no currentContext, returning false');
      return false; // fallback - –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å—á–∏—Ç–∞–µ–º —É—Å–ª–æ–≤–∏–µ false
    }

    try {
      const result = await this.currentContext.variables.get('condition_result', 'session');
      console.log(`üîç getConditionResultFromContext: condition_result = ${result} (${typeof result})`);
      
      return Boolean(result);
    } catch (error) {
      console.log('‚ö†Ô∏è getConditionResultFromContext: error getting condition_result, returning false', error);
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
      return false;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—é –Ω–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ –æ–¥–Ω–æ–º workflow (–∫–∞–∫ –≤ ManyChat/n8n)
   */
  private findTriggerNode(trigger: string, ctx?: any): WorkflowNode | undefined {
    // 1Ô∏è‚É£ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (trigger.contact)
    if (ctx?.message?.contact) {
      const contactTrigger = this.findTriggerByType('trigger.contact');
      if (contactTrigger) {
        logger.info('‚úÖ –ù–∞–π–¥–µ–Ω trigger.contact (–∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω)', { 
          nodeId: contactTrigger.id,
          phone: ctx.message.contact.phone_number 
        });
        return contactTrigger;
      }
    }

    // 2Ô∏è‚É£ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º callback query (trigger.callback)
    if (ctx?.callbackQuery) {
      const callbackData = ctx.callbackQuery.data;
      const callbackTrigger = this.findCallbackTrigger(callbackData);
      if (callbackTrigger) {
        logger.info('‚úÖ –ù–∞–π–¥–µ–Ω trigger.callback', { 
          nodeId: callbackTrigger.id, 
          callbackData 
        });
        return callbackTrigger;
      }
    }

    // 3Ô∏è‚É£ –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É (trigger.command)
    if (trigger === 'start') {
      const commandTrigger = this.findCommandTrigger('/start');
      if (commandTrigger) {
        logger.info('‚úÖ –ù–∞–π–¥–µ–Ω trigger.command –¥–ª—è /start', { nodeId: commandTrigger.id });
        return commandTrigger;
      }
    }

    // 4Ô∏è‚É£ –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (trigger.message)
    if (trigger === 'message') {
      const messageTrigger = this.findTriggerByType('trigger.message');
      if (messageTrigger) {
        logger.info('‚úÖ –ù–∞–π–¥–µ–Ω trigger.message', { nodeId: messageTrigger.id });
        return messageTrigger;
      }
    }

    // 5Ô∏è‚É£ –ü–†–ò–û–†–ò–¢–ï–¢ 5: Fallback –Ω–∞ entry_node_id
    if (this.workflowVersion.entryNodeId) {
      const entryNode = this.nodesMap.get(this.workflowVersion.entryNodeId);
      if (entryNode) {
        logger.info('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º entry node –∫–∞–∫ fallback', { 
          nodeId: entryNode.id,
          nodeType: entryNode.type
        });
        return entryNode;
      }
    }

    logger.warn('‚ùå Trigger –Ω–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { 
      trigger, 
      hasContact: !!ctx?.message?.contact, 
      hasCallback: !!ctx?.callbackQuery,
      entryNodeId: this.workflowVersion.entryNodeId,
      availableNodes: Array.from(this.nodesMap.values()).map((n: any) => ({
        id: n.id,
        type: n.type,
        label: n.data?.label
      }))
    });

    return undefined;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–æ —Ç–∏–ø—É
   */
  private findTriggerByType(type: string): WorkflowNode | undefined {
    for (const node of Array.from(this.nodesMap.values())) {
      if (node.type === type) {
        return node;
      }
    }
    return undefined;
  }

  /**
   * –ü–æ–∏—Å–∫ trigger.command –ø–æ –∫–æ–º–∞–Ω–¥–µ
   */
  private findCommandTrigger(command: string): WorkflowNode | undefined {
    console.log(`üîç findCommandTrigger: –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É "${command}"`);
    
    for (const [nodeId, node] of Array.from(this.nodesMap.entries())) {
      console.log(`  –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—É ${nodeId} (${node.id}) —Ç–∏–ø–∞ ${node.type}`);
      
      if (node.type === 'trigger.command') {
        const config = node.data?.config?.['trigger.command'];
        console.log(`    Config:`, JSON.stringify(config, null, 2));
        
        if (config?.command === command) {
          console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "${command}" –≤ –Ω–æ–¥–µ ${nodeId} (${node.id})`);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID –¥–ª—è nodesMap
          return { ...node, id: nodeId };
        }
      }
    }
    
    console.log(`  ‚ùå –ö–æ–º–∞–Ω–¥–∞ "${command}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return undefined;
  }

  /**
   * –ü–æ–∏—Å–∫ trigger.callback –ø–æ callback_data
   */
  private findCallbackTrigger(callbackData: string): WorkflowNode | undefined {
    for (const node of Array.from(this.nodesMap.values())) {
      if (node.type === 'trigger.callback') {
        const config = node.data?.config?.['trigger.callback'];
        if (config?.callbackData === callbackData) {
          return node;
        }
      }
    }
    return undefined;
  }
}

