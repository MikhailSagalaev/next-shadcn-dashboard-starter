/**
 * @file: src/lib/services/workflow/user-variables.service.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ workflow
 * @project: SaaS Bonus System
 * @dependencies: Prisma, QueryExecutor
 * @created: 2025-10-15
 * @author: AI Assistant + User
 */

import { PrismaClient } from '@prisma/client';
import { QueryExecutor } from './query-executor';
import { logger } from '@/lib/logger';
import { ReferralService } from '../referral.service';
import { BonusLevelService } from '../bonus-level.service';

export interface UserProfileData {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  userId: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  telegramId?: string;
  telegramUsername?: string;
  
  // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  balance: number;
  totalEarned: number;
  totalSpent: number;
  totalPurchases: number;
  
  // –£—Ä–æ–≤–µ–Ω—å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
  currentLevel: string;
  referralCode?: string;
  referredBy?: string;
  referrerName?: string;
  
  // –î–∞—Ç—ã
  registeredAt: Date;
  updatedAt: Date;
  
  // –ò—Å—Ç–æ—Ä–∏—è
  transactionHistory: any[];
  activeBonuses: any[];
  transactionCount: number;
  bonusCount: number;
}

export interface ReferralLinkData {
  referralCode: string;
  referralLink: string;
  projectName: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class UserVariablesService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
   */
  static async getUserVariables(
    db: PrismaClient,
    userId: string,
    projectId: string
  ): Promise<Record<string, any>> {
    console.log('üöÄ UserVariablesService.getUserVariables CALLED', { userId, projectId });

    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –õ–æ–≥–∏—Ä—É–µ–º projectId –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('üîç SERVER DEBUG: projectId validation', {
      projectId,
      projectIdType: typeof projectId,
      projectIdLength: projectId?.length,
      isValidFormat: /^[a-z0-9_-]+$/.test(projectId || '')
    });

    try {
      console.log('üîç UserVariablesService.getUserVariables started', { userId, projectId });

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à user variables
      const { WorkflowRuntimeService } = await import('@/lib/services/workflow-runtime.service');
      const cachedVariables = await WorkflowRuntimeService.getCachedUserVariables(projectId, userId);
      if (cachedVariables) {
        console.log('‚úÖ Returning cached user variables', {
          userId,
          projectId,
          variablesCount: Object.keys(cachedVariables).length
        });
        return cachedVariables;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const profile = await QueryExecutor.execute(db, 'get_user_profile', { userId });
      console.log('üîç QueryExecutor returned profile', {
        profileExists: !!profile,
        profileKeys: profile ? Object.keys(profile) : [],
        balance: profile?.balance,
        expiringBonuses: profile?.expiringBonuses,
        referralCount: profile?.referralCount
      });

      if (!profile) {
        logger.warn('User profile not found', { userId });
        return {};
      }

      logger.debug('‚úÖ Profile data received', {
        firstName: profile.firstName,
        balance: profile.balance,
        totalEarned: profile.totalEarned,
        totalSpent: profile.totalSpent,
        transactionCount: profile.transactionCount
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      console.log('üîó Getting referral data...');
      let referralData;
      try {
        referralData = await QueryExecutor.execute(db, 'get_referral_link', {
          userId,
          projectId
        });
        console.log('‚úÖ Referral data received', { referralData });
      } catch (error) {
        console.error('‚ùå Failed to get referral data', error);
        referralData = null;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω—è—Ö
      console.log('üèÜ Getting progress data...');
      let progressData;
      try {
        progressData = await BonusLevelService.calculateProgressToNextLevel(
          projectId,
          profile.totalPurchases
        );
        console.log('‚úÖ Progress data received', { progressData });
      } catch (error) {
        console.error('‚ùå Failed to get progress data', error);
        progressData = {
          currentLevel: null,
          nextLevel: null,
          amountNeeded: 0,
          progressPercent: 0
        };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formatDate = (date: Date) => {
        return new Intl.DateTimeFormat('ru-RU', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }).format(new Date(date));
      };

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formatTransactionHistory = (transactions: any[]) => {
        return transactions.slice(0, 5).map(t => {
          const amount = Number(t.amount);
          const sign = t.type === 'EARN' ? '+' : '-';
          const date = formatDate(t.createdAt);
          return `${sign}${amount} –±–æ–Ω—É—Å–æ–≤ - ${t.description || '–û–ø–µ—Ä–∞—Ü–∏—è'} (${date})`;
        }).join('\n');
      };

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formatActiveBonuses = (bonuses: any[]) => {
        return bonuses.slice(0, 3).map(b => {
          const amount = Number(b.amount);
          const expires = b.expiresAt ? 
            ` (–¥–æ ${formatDate(b.expiresAt)})` : 
            ' (–±–µ–∑ —Å—Ä–æ–∫–∞)';
          return `${amount} –±–æ–Ω—É—Å–æ–≤${expires}`;
        }).join('\n');
      };

      // ‚ú® –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
      const generateProgressBar = (progressPercent: number) => {
        // progressPercent —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –≤ progressData
        const percent = Math.max(0, Math.min(100, progressPercent));
        const filled = Math.floor(percent / 25); // 4 –±–ª–æ–∫–∞ –ø–æ 25%
        const empty = 4 - filled;
        
        const bar = '‚ñ∞'.repeat(filled) + '‚ñ±'.repeat(empty);
        return `${bar} (${Math.round(percent)}%)`;
      };

      // ‚ú® –ù–û–í–û–ï: –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const formatTransactionsDetailed = (transactions: any[]) => {
        if (!transactions || transactions.length === 0) {
          return 'üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞';
        }
        
        return transactions.slice(0, 10).map((t, index) => {
          const amount = Number(t.amount);
          const icon = t.type === 'EARN' ? 'üíö' : 'üí∏';
          const sign = t.type === 'EARN' ? '+' : '-';
          const date = new Intl.DateTimeFormat('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          }).format(new Date(t.createdAt));
          
          return `${index + 1}. ${icon} ${sign}${Math.abs(amount)} ‚ÇΩ ‚Ä¢ ${t.description || '–û–ø–µ—Ä–∞—Ü–∏—è'}\n   üìÖ ${date}`;
        }).join('\n\n');
      };

      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, –∞ –Ω–µ –ø—Ä–æ–µ–∫—Ç–∞!
      let referralCount = 0;
      let referralBonusTotal = 0;
      try {
        console.log('üîç Getting user referral stats for user:', userId, 'project:', projectId);
        const userStats = await ReferralService.getUserReferralStats(userId, projectId);
        referralCount = userStats.referralCount || 0;
        referralBonusTotal = userStats.referralBonusTotal || 0;
        console.log('‚úÖ User referral stats:', { referralCount, referralBonusTotal });
      } catch (error) {
        console.error('‚ùå Error getting user referral stats:', error);
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      }

      const result = {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        'user.id': profile.userId,
        'user.firstName': profile.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'user.lastName': profile.lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'user.fullName': `${profile.firstName || ''} ${profile.lastName || ''}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'user.email': profile.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'user.phone': profile.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'user.telegramId': profile.telegramId || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'user.telegramUsername': profile.telegramUsername || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',

        // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        'user.balance': profile.balance,
        'user.balanceFormatted': `${profile.balance} –±–æ–Ω—É—Å–æ–≤`,
        'user.totalEarned': profile.totalEarned,
        'user.totalEarnedFormatted': `${profile.totalEarned} –±–æ–Ω—É—Å–æ–≤`,
        'user.totalSpent': profile.totalSpent,
        'user.totalSpentFormatted': `${profile.totalSpent} –±–æ–Ω—É—Å–æ–≤`,
        'user.totalPurchases': profile.totalPurchases,
        'user.totalPurchasesFormatted': `${profile.totalPurchases} —Ä—É–±.`,
        'user.expiringBonuses': profile.expiringBonuses || 0, // ‚ú® –ù–û–í–û–ï
        'user.expiringBonusesFormatted': `${Number(profile.expiringBonuses || 0)}‚ÇΩ`,

        // –£—Ä–æ–≤–µ–Ω—å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –≤ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
        'user.currentLevel': (() => {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ progressData.currentLevel, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ –∏–∑ profile
          const level = progressData.currentLevel?.name || profile.currentLevel;
          if (!level) return '–ë–∞–∑–æ–≤—ã–π';
          // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
          const levelMap: Record<string | number, string> = {
            '3': '–ë–∞–∑–æ–≤—ã–π',
            '4': '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
            '5': '–ó–æ–ª–æ—Ç–æ–π',
            '6': '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π',
            3: '–ë–∞–∑–æ–≤—ã–π',
            4: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
            5: '–ó–æ–ª–æ—Ç–æ–π',
            6: '–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π'
          };
          if (levelMap[level]) {
            return levelMap[level];
          }
          // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
          return String(level);
        })(),
        'user.progressBar': generateProgressBar(progressData.progressPercent || 0), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        'user.referralCode': profile.referralCode || '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
        'user.referredBy': profile.referredBy || '–ù–µ—Ç',
        'user.referrerName': profile.referrerName || '–ù–µ—Ç',

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö
        'user.levelBonusPercent': progressData.currentLevel?.bonusPercent || 0,
        'user.levelPaymentPercent': progressData.currentLevel?.paymentPercent || 0,
        'user.nextLevelName': progressData.nextLevel?.name || (progressData.currentLevel ? '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç' : '–£—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
        'user.nextLevelAmount': progressData.amountNeeded || 0,
        'user.nextLevelAmountFormatted': progressData.nextLevel ? `${progressData.amountNeeded || 0} —Ä—É–±.` : '0 —Ä—É–±.',
        'user.progressPercent': progressData.nextLevel ? progressData.progressPercent : (progressData.currentLevel ? 100 : 0),

        // –î–∞—Ç—ã
        'user.registeredAt': formatDate(profile.registeredAt),
        'user.updatedAt': formatDate(profile.updatedAt),

        // –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        'user.transactionCount': profile.transactionCount,
        'user.bonusCount': profile.bonusCount,
        'user.transactionHistory': formatTransactionHistory(profile.transactionHistory),
        'user.activeBonuses': formatActiveBonuses(profile.activeBonuses),
        'transactions.formatted': formatTransactionsDetailed(profile.transactionHistory), // ‚ú® –ù–û–í–û–ï

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        'user.referralLink': referralData?.referralLink || '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        'user.referralCodeShort': referralData?.referralCode || '–ù–µ—Ç',
        'user.projectName': referralData?.projectName || '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É (–¥–ª—è –±–ª–æ–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        'user.referralCount': referralCount,
        'user.referralBonusTotal': referralBonusTotal,
        'user.referralBonusTotalFormatted': `${referralBonusTotal}‚ÇΩ`,

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        'user.hasReferralCode': profile.referralCode ? '–î–∞' : '–ù–µ—Ç',
        'user.hasTransactions': profile.transactionCount > 0 ? '–î–∞' : '–ù–µ—Ç',
        'user.hasBonuses': profile.bonusCount > 0 ? '–î–∞' : '–ù–µ—Ç',
        'user.isNewUser': profile.transactionCount === 0 ? '–î–∞' : '–ù–µ—Ç',

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'user.stats': {
          balance: profile.balance,
          totalEarned: profile.totalEarned,
          totalSpent: profile.totalSpent,
          transactionCount: profile.transactionCount,
          bonusCount: profile.bonusCount
        }
      };

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ currentLevel –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('üîç user-variables currentLevel DEBUG:', {
        userId: profile.userId,
        currentLevel: result['user.currentLevel'],
        currentLevelFromProfile: profile.currentLevel,
        currentLevelFromProgress: progressData.currentLevel?.name,
        nextLevel: progressData.nextLevel?.name || '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
        nextLevelAmount: progressData.amountNeeded,
        progressPercent: progressData.progressPercent,
        progressBar: result['user.progressBar'],
        hasNextLevel: !!progressData.nextLevel
      });

      // ‚úÖ –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç user variables (–∏–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ)
      try {
        const { WorkflowRuntimeService: WRS } = await import('@/lib/services/workflow-runtime.service');
        await WRS.cacheUserVariables(projectId, userId, result);
      } catch (cacheError) {
        console.warn('Failed to cache user variables:', cacheError);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }

      console.log('‚úÖ UserVariablesService.getUserVariables SUCCESS', {
        totalVariables: Object.keys(result).length,
        sampleVariables: {
          balanceFormatted: result['user.balanceFormatted'],
          expiringBonusesFormatted: result['user.expiringBonusesFormatted'],
          referralCount: result['user.referralCount'],
          progressPercent: result['user.progressPercent']
        },
        cached: true
      });

      return result;

    } catch (error) {
      logger.error('‚ùå Failed to get user variables - RETURNING FALLBACK VALUES', {
        userId,
        projectId,
        error: error.message,
        stack: error.stack
      });

      console.log('‚ùå UserVariablesService.getUserVariables ERROR - returning fallback', {
        userId,
        projectId,
        errorMessage: error.message
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      // ‚ö†Ô∏è –í–ê–ñ–ù–û: –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–∞–∂–µ –µ—Å–ª–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      return {
        'user.firstName': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'user.balanceFormatted': '0 –±–æ–Ω—É—Å–æ–≤',
        'user.currentLevel': '–ë–∞–∑–æ–≤—ã–π',
        'user.referralCode': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        'user.referralLink': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        'user.totalEarnedFormatted': '0 –±–æ–Ω—É—Å–æ–≤',
        'user.totalSpentFormatted': '0 –±–æ–Ω—É—Å–æ–≤',
        'user.totalPurchasesFormatted': '0 —Ä—É–±.',
        'user.expiringBonusesFormatted': '0‚ÇΩ',
        'user.referralCount': 0,
        'user.referralBonusTotal': 0,
        'user.referralBonusTotalFormatted': '0‚ÇΩ',
        'user.progressPercent': 0,
        'user.progressBar': '‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì 0%',
        'user.levelBonusPercent': 0,
        'user.levelPaymentPercent': 0,
        'user.nextLevelName': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
        'user.nextLevelAmountFormatted': '0 —Ä—É–±.',
        'transactions.formatted': 'üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
   */
  static async getBasicUserVariables(
    db: PrismaClient,
    userId: string
  ): Promise<Record<string, any>> {
    try {
      const profile = await QueryExecutor.execute(db, 'get_user_profile', { userId });
      
      if (!profile) {
        return {};
      }

      return {
        'user.firstName': profile.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'user.balance': profile.balance,
        'user.balanceFormatted': `${profile.balance} –±–æ–Ω—É—Å–æ–≤`,
        'user.currentLevel': profile.currentLevel,
        'user.referralCode': profile.referralCode || '–ù–µ—Ç'
      };

    } catch (error) {
      logger.error('Failed to get basic user variables', { userId, error });
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  static async getTransactionHistoryVariables(
    db: PrismaClient,
    userId: string,
    limit: number = 10
  ): Promise<Record<string, any>> {
    try {
      const transactions = await QueryExecutor.execute(db, 'get_transactions', { 
        userId, 
        limit 
      });

      if (!transactions || transactions.length === 0) {
        return {
          'user.transactionHistory': '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞',
          'user.transactionCount': 0
        };
      }

      const formatTransaction = (t: any) => {
        const amount = Number(t.amount);
        const sign = t.type === 'EARN' ? '+' : '-';
        const date = new Intl.DateTimeFormat('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }).format(new Date(t.createdAt));
        
        return `${sign}${amount} –±–æ–Ω—É—Å–æ–≤ - ${t.description || '–û–ø–µ—Ä–∞—Ü–∏—è'} (${date})`;
      };

      return {
        'user.transactionHistory': transactions.map(formatTransaction).join('\n'),
        'user.transactionCount': transactions.length,
        'user.lastTransaction': transactions[0] ? formatTransaction(transactions[0]) : '–ù–µ—Ç'
      };

    } catch (error) {
      logger.error('Failed to get transaction history variables', { userId, error });
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  static async getReferralVariables(
    db: PrismaClient,
    userId: string,
    projectId: string
  ): Promise<Record<string, any>> {
    try {
      const referralData = await QueryExecutor.execute(db, 'get_referral_link', { 
        userId, 
        projectId 
      });

      if (!referralData) {
        return {
          'user.referralCode': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
          'user.referralLink': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
          'user.hasReferralCode': '–ù–µ—Ç'
        };
      }

      return {
        'user.referralCode': referralData.referralCode,
        'user.referralLink': referralData.referralLink,
        'user.projectName': referralData.projectName,
        'user.hasReferralCode': '–î–∞'
      };

    } catch (error) {
      logger.error('Failed to get referral variables', { userId, error });
      return {};
    }
  }
}

export default UserVariablesService;
