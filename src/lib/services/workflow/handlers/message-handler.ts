/**
 * @file: src/lib/services/workflow/handlers/message-handler.ts
 * @description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è message –Ω–æ–¥
 * @project: SaaS Bonus System
 * @dependencies: BaseNodeHandler, ExecutionContext
 * @created: 2025-01-13
 * @author: AI Assistant + User
 */

import { BaseNodeHandler } from './base-handler';
import { ProjectVariablesService } from '@/lib/services/project-variables.service';
import { UserVariablesService } from '../user-variables.service';
import { QueryExecutor } from '../query-executor';
import type {
  WorkflowNode,
  WorkflowNodeType,
  ExecutionContext,
  ValidationResult,
  MessageConfig
} from '@/types/workflow';
import type { InlineButton, ReplyButton } from './keyboard-handler';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è message –Ω–æ–¥
 */
export class MessageHandler extends BaseNodeHandler {
  canHandle(nodeType: WorkflowNodeType): boolean {
    return nodeType === 'message';
  }

  async execute(node: WorkflowNode, context: ExecutionContext): Promise<string | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–æ–¥—ã
      const messageConfig = node.data?.config?.message;
      let messageText = messageConfig?.text || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ';

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const additionalVariables: Record<string, string> = {
        // Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        username: context.telegram.username || '',
        first_name: context.telegram.firstName || '',
        user_id: context.telegram.userId || '',
        chat_id: context.telegram.chatId || '',
        
        // Workflow –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        workflow_id: context.workflowId,
        execution_id: context.executionId,
        session_id: context.sessionId
      };

      // –ï—Å–ª–∏ userId –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ Telegram ID
      if (!context.userId && context.telegram?.userId) {
        try {
          const found = await QueryExecutor.execute(
            context.services.db as any,
            'check_user_by_telegram',
            { telegramId: context.telegram.userId, projectId: context.projectId }
          );
          if (found?.id) {
            context.userId = found.id;
            this.logStep(context, node, 'Resolved userId from telegramId', 'info', { userId: context.userId });
          }
        } catch (e) {
          this.logStep(context, node, 'Failed resolve userId from telegramId', 'warn', { error: e });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ userId –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!context.userId && messageText.includes('{user.')) {
        this.logStep(context, node, 'User not authenticated, cannot display personalized message', 'warn', {
          hasUserVariables: messageText.includes('{user.')
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        const telegramApiUrl = `https://api.telegram.org/bot${context.telegram.botToken}/sendMessage`;
        await context.services.http.post(telegramApiUrl, {
          chat_id: context.telegram.chatId,
          text: '‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.',
          parse_mode: 'HTML'
        });

        return null; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ userId –¥–æ—Å—Ç—É–ø–µ–Ω
      if (context.userId) {
        try {
          this.logStep(context, node, 'Loading user variables', 'debug', { userId: context.userId });
          
          const userVariables = await UserVariablesService.getUserVariables(
            context.services.db,
            context.userId,
            context.projectId
          );
          
          this.logStep(context, node, 'User variables loaded', 'debug', { 
            variableCount: Object.keys(userVariables).length,
            sampleVariables: Object.keys(userVariables).slice(0, 5)
          });
          
          // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º user.
          // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ undefined/null
          Object.entries(userVariables).forEach(([key, value]) => {
            if (value !== undefined && value !== null) {
              additionalVariables[key] = String(value);
            } else {
              console.warn(`‚ö†Ô∏è Skipping user variable ${key} because value is ${value}`);
            }
          });

          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞–ª–∏—á–∏—è user.expiringBonusesFormatted
          if (userVariables['user.expiringBonusesFormatted'] !== undefined && userVariables['user.expiringBonusesFormatted'] !== null) {
            additionalVariables['user.expiringBonusesFormatted'] = String(userVariables['user.expiringBonusesFormatted']);
          }

          // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log('üî• DEBUG MESSAGE-HANDLER:');
          console.log('   userVariables keys:', Object.keys(userVariables));
          console.log('   expiringBonusesFormatted in userVariables:', 'user.expiringBonusesFormatted' in userVariables);
          console.log('   expiringBonusesFormatted value:', userVariables['user.expiringBonusesFormatted']);
          console.log('   additionalVariables keys:', Object.keys(additionalVariables));
          console.log('   expiringBonusesFormatted in additionalVariables:', 'user.expiringBonusesFormatted' in additionalVariables);
          console.log('   referralCount in additionalVariables:', 'user.referralCount' in additionalVariables);
          console.log('   referralCount value:', additionalVariables['user.referralCount']);
          console.log('   progressPercent in additionalVariables:', 'user.progressPercent' in additionalVariables);
          console.log('   progressPercent value:', additionalVariables['user.progressPercent']);

          // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
          console.log('üì§ FINAL MESSAGE CHECK:');
          console.log('   Original messageText:', messageText);
          console.log('   Has expiringBonusesFormatted placeholder:', messageText.includes('{user.expiringBonusesFormatted}'));
          console.log('   Final messageText after replacement:', messageText);

          // –¢–û–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          const replacedText = await ProjectVariablesService.replaceVariablesInText(
            context.projectId,
            messageText,
            additionalVariables
          );
          console.log('üîÑ AFTER PROJECT VARIABLES REPLACEMENT:');
          console.log('   Replaced text:', replacedText);
          console.log('   Has placeholder after replacement:', replacedText.includes('{user.expiringBonusesFormatted}'));

          // –û–±–Ω–æ–≤–ª—è–µ–º messageText
          messageText = replacedText;

          this.logStep(context, node, 'User variables added to additionalVariables', 'debug', {
            userVariablesCount: Object.keys(userVariables).length,
            additionalVariablesCount: Object.keys(additionalVariables).length,
            sampleUserVariables: Object.keys(userVariables).slice(0, 3),
            expiringBonusesValue: userVariables['user.expiringBonusesFormatted'],
            hasExpiringBonuses: 'user.expiringBonusesFormatted' in additionalVariables,
            allUserVariables: userVariables,
            allAdditionalVariables: additionalVariables
          });
        } catch (error) {
          this.logStep(context, node, 'Failed to load user variables', 'warn', { error });
        }
      } else {
        this.logStep(context, node, 'No userId available, skipping user variables', 'debug');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–∂–µ –±–µ–∑ userId
        additionalVariables['user.firstName'] = context.telegram.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        additionalVariables['user.telegramUsername'] = context.telegram.username || '';
        additionalVariables['user.balanceFormatted'] = '0 –±–æ–Ω—É—Å–æ–≤';
        additionalVariables['user.currentLevel'] = '–ë–∞–∑–æ–≤—ã–π';
        additionalVariables['user.referralCode'] = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        additionalVariables['user.referralLink'] = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
      }

      // üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      this.logStep(context, node, 'About to replace variables in text', 'debug', {
        textLength: messageText.length,
        hasExpiringBonusesPlaceholder: messageText.includes('{user.expiringBonusesFormatted}'),
        additionalVariablesKeys: Object.keys(additionalVariables),
        expiringBonusesInAdditional: 'user.expiringBonusesFormatted' in additionalVariables,
        expiringBonusesValue: additionalVariables['user.expiringBonusesFormatted'],
        allAdditionalVariables: additionalVariables
      });

      // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
      this.logStep(context, node, 'Replacing variables in text', 'debug', {
        originalText: messageText.substring(0, 100),
        variableCount: Object.keys(additionalVariables).length,
        hasUserVariables: Object.keys(additionalVariables).some(k => k.startsWith('user.'))
      });

      messageText = await ProjectVariablesService.replaceVariablesInText(
        context.projectId,
        messageText,
        additionalVariables
      );
      
      this.logStep(context, node, 'Variables replaced', 'debug', {
        finalText: messageText.substring(0, 100),
        hasUnreplacedVariables: messageText.includes('{') && messageText.includes('}')
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
      const telegramApiUrl = `https://api.telegram.org/bot${context.telegram.botToken}/sendMessage`;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è API
      const payload: any = {
        chat_id: context.telegram.chatId,
        text: messageText,
        parse_mode: messageConfig?.parseMode || 'HTML'
      };

      // ‚ú® –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
      const keyboardConfig = messageConfig?.keyboard || (node.data?.config as any)?.keyboard;
      if (keyboardConfig) {
        const keyboard = this.buildKeyboard(keyboardConfig);
        if (keyboard) {
          payload.reply_markup = keyboard;
        }
      }

      await context.services.http.post(telegramApiUrl, payload);

      this.logStep(context, node, 'Message sent successfully', 'info', { 
        originalText: messageConfig?.text,
        processedText: messageText,
        hasKeyboard: !!keyboardConfig
      });

      // ‚ú® –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (keyboardConfig) {
        const needsWaiting = this.checkIfNeedsWaiting(keyboardConfig);
        
        if (needsWaiting.shouldWait) {
          this.logStep(context, node, `Setting waiting state: ${needsWaiting.waitType}`, 'info');
          
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular dependencies
          const { db } = await import('@/lib/db');
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
          await db.workflowExecution.update({
            where: { id: context.executionId },
            data: {
              status: 'waiting',
              waitType: needsWaiting.waitType,
              currentNodeId: node.id,
              waitPayload: {
                nodeId: node.id,
                keyboard: keyboardConfig,
                requestedAt: new Date()
              }
            }
          });

          // ‚úÖ –ö–ï–®–ò–†–£–ï–ú WAITING EXECUTION –í REDIS
          const { WorkflowRuntimeService } = await import('../../workflow-runtime.service');
          await WorkflowRuntimeService.cacheWaitingExecution(
            context.executionId,
            context.projectId,
            context.telegramChatId || '',
            needsWaiting.waitType
          );

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –∂–¥–∞—Ç—å"
          return '__WAITING_FOR_USER_INPUT__';
        }
      }

      return null;

    } catch (error) {
      this.logStep(context, node, 'Failed to send message', 'error', { error });
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private checkIfNeedsWaiting(keyboardConfig: any): { 
    shouldWait: boolean; 
    waitType: 'contact' | 'callback' | 'input' | null;
  } {
    if (!keyboardConfig || !keyboardConfig.buttons) {
      return { shouldWait: false, waitType: null };
    }

    const buttons = keyboardConfig.buttons;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ request_contact
    for (const row of buttons) {
      for (const button of row) {
        if (button.request_contact) {
          return { shouldWait: true, waitType: 'contact' };
        }
        // –î–ª—è inline –∫–Ω–æ–ø–æ–∫ —Å callback_data —Ç–æ–∂–µ –∂–¥—ë–º
        if (button.callback_data && keyboardConfig.type === 'inline') {
          return { shouldWait: true, waitType: 'callback' };
        }
      }
    }

    // –î–ª—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ - –∂–¥—ë–º –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
    if (keyboardConfig.type === 'reply') {
      return { shouldWait: true, waitType: 'input' };
    }

    return { shouldWait: false, waitType: null };
  }

  /**
   * ‚ú® –ù–û–í–û–ï: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private buildKeyboard(config: any): any {
    if (!config || !config.buttons || !Array.isArray(config.buttons)) {
      return null;
    }

    const keyboardType = config.type || 'inline';

    if (keyboardType === 'inline') {
      return this.buildInlineKeyboard(config.buttons);
    } else if (keyboardType === 'reply') {
      return this.buildReplyKeyboard(config.buttons, config);
    }

    return null;
  }

  /**
   * ‚ú® –ù–û–í–û–ï: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  private buildInlineKeyboard(buttons: InlineButton[][]): any {
    const keyboard = buttons.map(row => 
      row.map(button => {
        const btn: any = { text: button.text };

        if (button.callback_data) {
          btn.callback_data = button.callback_data;
        } else if (button.url) {
          btn.url = button.url;
        } else if (button.web_app) {
          btn.web_app = button.web_app;
        } else if (button.login_url) {
          btn.login_url = button.login_url;
        } else if (button.goto_node) {
          // –î–ª—è goto_node –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
          btn.callback_data = `goto:${button.goto_node}`;
        }

        return btn;
      })
    );

    return { inline_keyboard: keyboard };
  }

  /**
   * ‚ú® –ù–û–í–û–ï: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  private buildReplyKeyboard(buttons: ReplyButton[][], config: any): any {
    const keyboard = buttons.map(row =>
      row.map(button => {
        const btn: any = { text: button.text };

        if (button.request_contact) {
          btn.request_contact = true;
        } else if (button.request_location) {
          btn.request_location = true;
        } else if (button.request_poll) {
          btn.request_poll = button.request_poll;
        } else if (button.web_app) {
          btn.web_app = button.web_app;
        }

        return btn;
      })
    );

    return {
      keyboard,
      resize_keyboard: config.resize_keyboard !== false,
      one_time_keyboard: config.one_time_keyboard === true,
      selective: config.selective === true
    };
  }

  async validate(config: any): Promise<ValidationResult> {
    const errors: string[] = [];

    if (!config) {
      errors.push('Message configuration is required');
      return { isValid: false, errors };
    }

    if (!config.text || typeof config.text !== 'string') {
      errors.push('Message text is required and must be a string');
    }

    if (config.parseMode && !['Markdown', 'HTML', 'MarkdownV2'].includes(config.parseMode)) {
      errors.push('Parse mode must be one of: Markdown, HTML, MarkdownV2');
    }

    if (config.keyboard) {
      if (config.keyboard.type && !['inline', 'reply'].includes(config.keyboard.type)) {
        errors.push('Keyboard type must be "inline" or "reply"');
      }

      if (config.keyboard.buttons && !Array.isArray(config.keyboard.buttons)) {
        errors.push('Keyboard buttons must be an array');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }
}
