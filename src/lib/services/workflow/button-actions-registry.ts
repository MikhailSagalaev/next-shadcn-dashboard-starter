/**
 * @file: src/lib/services/workflow/button-actions-registry.ts
 * @description: –†–µ–µ—Å—Ç—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è actions, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∫–Ω–æ–ø–∫–∞–º
 * @project: SaaS Bonus System
 * @dependencies: ButtonAction
 * @created: 2025-10-14
 * @author: AI Assistant + User
 */

import { logger } from '@/lib/logger';
import type { ButtonAction } from './button-actions-executor';

/**
 * –ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å actions
 */
interface ButtonActionsKey {
  projectId: string;
  userId: string;
  buttonText: string; // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
}

/**
 * –•—Ä–∞–Ω–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–æ–ø–∫–µ
 */
interface StoredButtonActions {
  actions: ButtonAction[];
  createdAt: number;
  expiresAt: number;
}

/**
 * –†–µ–µ—Å—Ç—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è actions –∏–∑ –∫–Ω–æ–ø–æ–∫
 * 
 * –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —Å actions, –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–µ–µ—Å—Ç—Ä.
 * –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, contact), –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ actions –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º.
 */
export class ButtonActionsRegistry {
  private static registry = new Map<string, StoredButtonActions>();
  
  // TTL –¥–ª—è actions - 5 –º–∏–Ω—É—Ç (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)
  private static TTL_MS = 5 * 60 * 1000;

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç actions –¥–ª—è –∫–Ω–æ–ø–∫–∏
   */
  static register(
    key: ButtonActionsKey,
    actions: ButtonAction[]
  ): void {
    const registryKey = this.makeKey(key);
    const now = Date.now();

    this.registry.set(registryKey, {
      actions,
      createdAt: now,
      expiresAt: now + this.TTL_MS
    });

    logger.debug('üìù Button actions registered', {
      key: registryKey,
      actionsCount: actions.length,
      expiresIn: `${this.TTL_MS / 1000}s`
    });

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    this.cleanup();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç actions –¥–ª—è –∫–Ω–æ–ø–∫–∏
   */
  static retrieve(key: ButtonActionsKey): ButtonAction[] | null {
    const registryKey = this.makeKey(key);
    const stored = this.registry.get(registryKey);

    if (!stored) {
      logger.debug('‚ùå Button actions not found', { key: registryKey });
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    if (Date.now() > stored.expiresAt) {
      logger.debug('‚è∞ Button actions expired', { key: registryKey });
      this.registry.delete(registryKey);
      return null;
    }

    logger.debug('‚úÖ Button actions retrieved', {
      key: registryKey,
      actionsCount: stored.actions.length
    });

    return stored.actions;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç actions –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  static remove(key: ButtonActionsKey): void {
    const registryKey = this.makeKey(key);
    this.registry.delete(registryKey);
    logger.debug('üóëÔ∏è Button actions removed', { key: registryKey });
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ actions –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static clearForUser(projectId: string, userId: string): void {
    let count = 0;
    for (const key of this.registry.keys()) {
      if (key.startsWith(`${projectId}:${userId}:`)) {
        this.registry.delete(key);
        count++;
      }
    }
    logger.debug('üßπ Cleared button actions for user', { projectId, userId, count });
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
   */
  private static cleanup(): void {
    const now = Date.now();
    let removed = 0;

    for (const [key, stored] of this.registry.entries()) {
      if (now > stored.expiresAt) {
        this.registry.delete(key);
        removed++;
      }
    }

    if (removed > 0) {
      logger.debug('üßπ Cleaned up expired button actions', { removed });
    }
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –∏–∑ –æ–±—ä–µ–∫—Ç–∞
   */
  private static makeKey(key: ButtonActionsKey): string {
    return `${key.projectId}:${key.userId}:${key.buttonText}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–µ—Å—Ç—Ä–∞
   */
  static getStats(): { total: number; expired: number } {
    const now = Date.now();
    let expired = 0;

    for (const stored of this.registry.values()) {
      if (now > stored.expiresAt) {
        expired++;
      }
    }

    return {
      total: this.registry.size,
      expired
    };
  }
}

export default ButtonActionsRegistry;

