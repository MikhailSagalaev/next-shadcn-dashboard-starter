/**
 * @file: src/lib/services/bot-flow-executor/error-handling.ts
 * @description: –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ fallback'–æ–≤ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, FlowExecutor
 * @created: 2025-09-30
 * @author: AI Assistant + User
 */

import { Context } from 'grammy';
import { SessionFlavor } from 'grammy';
import { logger } from '@/lib/logger';
import { BotFlowService } from '../bot-flow.service';

import type { BotConstructorSession } from '../bot-session.service';
import type { BotFlow } from '@/types/bot-constructor';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
type BotConstructorContext = Context & SessionFlavor<BotConstructorSession> & {
  updateType?: string;
};

export class ErrorHandlingSystem {
  private fallbackFlows: Map<string, string> = new Map(); // projectId -> fallbackFlowId
  private errorRecoveryAttempts: Map<string, number> = new Map(); // sessionKey -> attempts

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è fallback –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  registerFallbackFlow(projectId: string, fallbackFlowId: string): void {
    this.fallbackFlows.set(projectId, fallbackFlowId);
    logger.info('Fallback flow registered', { projectId, fallbackFlowId });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–¥—ã
   */
  async handleNodeExecutionError(
    ctx: BotConstructorContext,
    flowId: string,
    nodeId: string,
    error: unknown,
    flowExecutor: any
  ): Promise<void> {
    const userId = ctx.from?.id;
    const sessionKey = `${flowId}:${userId}`;

    logger.error('Node execution error', {
      flowId,
      nodeId,
      userId,
      error:
        error instanceof Error
          ? {
              message: error.message,
              stack: error.stack,
              name: error.name
            }
          : String(error)
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const attempts = this.errorRecoveryAttempts.get(sessionKey) || 0;
    this.errorRecoveryAttempts.set(sessionKey, attempts + 1);

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      const recovered = await this.attemptErrorRecovery(
        ctx,
        flowId,
        nodeId,
        error,
        attempts
      );

      if (recovered) {
        logger.info('Error recovery successful', {
          flowId,
          nodeId,
          userId,
          attempts: attempts + 1
        });
        return;
      }

      // –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
      await this.executeFallbackFlow(ctx, flowId, error);
    } catch (recoveryError) {
      logger.error('Error recovery failed', {
        flowId,
        nodeId,
        userId,
        recoveryError:
          recoveryError instanceof Error
            ? recoveryError.message
            : String(recoveryError)
      });

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.sendFinalErrorMessage(ctx);
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
   */
  private async attemptErrorRecovery(
    ctx: BotConstructorContext,
    flowId: string,
    nodeId: string,
    error: unknown,
    attempts: number
  ): Promise<boolean> {
    const maxRecoveryAttempts = 3;

    if (attempts >= maxRecoveryAttempts) {
      return false;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if (error instanceof Error) {
      const errorMessage = error.message.toLowerCase();

      // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏ - –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      if (
        errorMessage.includes('network') ||
        errorMessage.includes('timeout')
      ) {
        await this.delay(1000 * (attempts + 1)); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return true; // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }

      // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (
        errorMessage.includes('validation') ||
        errorMessage.includes('invalid')
      ) {
        await ctx.reply(
          '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
        return true;
      }

      // –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (
        errorMessage.includes('unauthorized') ||
        errorMessage.includes('auth')
      ) {
        await ctx.reply(
          'üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.'
        );
        return false; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }
    }

    return false;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ fallback –ø–æ—Ç–æ–∫–∞
   */
  private async executeFallbackFlow(
    ctx: BotConstructorContext,
    originalFlowId: string,
    error: unknown
  ): Promise<void> {
    const projectId = ctx.session?.projectId;
    if (!projectId) return;

    const fallbackFlowId = this.fallbackFlows.get(projectId);
    if (!fallbackFlowId) {
      logger.warn('No fallback flow configured', { projectId, originalFlowId });
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fallback –ø–æ—Ç–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const fallbackFlow = await BotFlowService.getFlowById(fallbackFlowId);
      if (!fallbackFlow || !fallbackFlow.isActive) {
        logger.warn('Fallback flow not found or inactive', { fallbackFlowId });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.errorInfo = {
        originalFlowId,
        error: error instanceof Error ? error.message : String(error),
        timestamp: new Date()
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º fallback –ø–æ—Ç–æ–∫
      await ctx.reply(
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...'
      );

      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å flowExecutor.startFlow
      // await flowExecutor.startFlow(ctx, fallbackFlowId);

      logger.info('Fallback flow started', {
        originalFlowId,
        fallbackFlowId,
        userId: ctx.from?.id,
        projectId
      });
    } catch (fallbackError) {
      logger.error('Fallback flow execution failed', {
        originalFlowId,
        fallbackFlowId,
        error:
          fallbackError instanceof Error
            ? fallbackError.message
            : String(fallbackError)
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  private async sendFinalErrorMessage(
    ctx: BotConstructorContext
  ): Promise<void> {
    const errorMessage = `üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè`;

    try {
      await ctx.reply(errorMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'cmd_start' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'cmd_help' }]
          ]
        }
      });
    } catch (sendError) {
      logger.error('Failed to send final error message', {
        error:
          sendError instanceof Error ? sendError.message : String(sendError)
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
   */
  async handleTimeoutError(
    ctx: BotConstructorContext,
    flowId: string,
    timeoutType: 'input' | 'action' | 'flow'
  ): Promise<void> {
    const timeoutMessages = {
      input:
        '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
      action: '‚è∞ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      flow: '‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.'
    };

    const message = timeoutMessages[timeoutType];

    try {
      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'cmd_start' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cmd_cancel' }]
          ]
        }
      });

      logger.info('Timeout handled', {
        flowId,
        timeoutType,
        userId: ctx.from?.id
      });
    } catch (error) {
      logger.error('Failed to handle timeout', {
        flowId,
        timeoutType,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  clearRecoveryData(sessionKey: string): void {
    this.errorRecoveryAttempts.delete(sessionKey);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
   */
  getErrorStats(): {
    totalRecoveryAttempts: number;
    activeRecoverySessions: number;
  } {
    return {
      totalRecoveryAttempts: Array.from(
        this.errorRecoveryAttempts.values()
      ).reduce((sum, attempts) => sum + attempts, 0),
      activeRecoverySessions: this.errorRecoveryAttempts.size
    };
  }

  // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ============

  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ middleware –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫
   */
  static createErrorHandlingMiddleware(errorHandler: ErrorHandlingSystem) {
    return async (ctx: BotConstructorContext, next: () => Promise<void>) => {
      try {
        await next();
      } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error('Unhandled error in middleware', {
          error:
            error instanceof Error
              ? {
                  message: error.message,
                  stack: error.stack,
                  name: error.name
                }
              : String(error),
          userId: ctx.from?.id,
          updateType: ctx.updateType
        });

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try {
          if (!ctx.update.callback_query) {
            // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –ø–æ–≤—Ç–æ—Ä–Ω–æ
            await ctx.reply(
              'üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            );
          }
        } catch (replyError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
      }
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  static validateErrorConfig(flow: BotFlow): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
  } {
    const errors: string[] = [];
    const warnings: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ fallback –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!flow.settings?.errorHandling) {
      warnings.push('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ—Ç–æ–∫–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ error handling
    flow.nodes.forEach((node) => {
      if (node.type === 'action' && !node.data.config?.action?.onError) {
        warnings.push(
          `–ù–æ–¥–∞ "${node.data.label}" –Ω–µ –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫`
        );
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–µ—á–Ω—ã—Ö –Ω–æ–¥
    const endNodes = flow.nodes.filter((n) => n.type === 'end');
    if (endNodes.length === 0) {
      errors.push('–ü–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–Ω–µ—á–Ω—É—é –Ω–æ–¥—É');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
declare module '../bot-session.service' {
  interface BotConstructorSession {
    errorInfo?: {
      originalFlowId: string;
      error: string;
      timestamp: Date;
    };
  }
}
