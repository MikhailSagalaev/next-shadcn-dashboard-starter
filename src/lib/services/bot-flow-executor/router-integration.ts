/**
 * @file: src/lib/services/bot-flow-executor/router-integration.ts
 * @description: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Grammy Router –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
 * @project: SaaS Bonus System
 * @dependencies: Grammy Router, FlowExecutor
 * @created: 2025-09-30
 * @author: AI Assistant + User
 */

import { Composer, Context } from 'grammy';
import { logger } from '@/lib/logger';
import { FlowExecutor } from './flow-executor';

import type { BotConstructorSession } from '../bot-session.service';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è Grammy Router
type SessionFlavor<T> = {
  session: T;
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
type BotConstructorContext = Context & SessionFlavor<BotConstructorSession>;

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è router
const router = (routes: Record<string, any>) => ({
  route: (key: string | ((ctx: any) => string | number | symbol)) => (ctx: any) => {},
  otherwise: (handler: any) => (ctx: any) => {}
});

export class RouterIntegration {
  private composer: Composer<BotConstructorContext>;
  private flowExecutor: FlowExecutor;
  private projectId: string;

  constructor(
    composer: Composer<BotConstructorContext>,
    flowExecutor: FlowExecutor,
    projectId: string
  ) {
    this.composer = composer;
    this.flowExecutor = flowExecutor;
    this.projectId = projectId;
    this.setupRouter();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private setupRouter(): void {
    // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const route = router((ctx) => {
      const update = ctx.update;

      if (update.message) {
        const message = update.message;

        // –ö–æ–Ω—Ç–∞–∫—Ç
        if (message.contact) {
          return 'contact';
        }

        // –ö–æ–º–∞–Ω–¥—ã
        if (message.text?.startsWith('/')) {
          return 'command';
        }

        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.text) {
          return 'text';
        }

        // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        return 'other_message';
      }

      if (update.callback_query) {
        return 'callback';
      }

      if (update.inline_query) {
        return 'inline';
      }

      return 'unknown';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.composer.use(route.route((ctx) => {
      const update = ctx.update;
      if (update.message?.contact) return 'contact';
      if (update.message?.text?.startsWith('/')) return 'command';
      if (update.message?.text) return 'text';
      if (update.callback_query) return 'callback';
      if (update.message) return 'other_message';
      if (update.inline_query) return 'inline';
      return 'unknown';
    }));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    this.composer.route((ctx) => 'contact', this.handleContact.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    this.composer.route((ctx) => 'command', this.handleCommand.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.composer.route((ctx) => 'text', this.handleTextMessage.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
    this.composer.route((ctx) => 'callback', this.handleCallback.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    this.composer.route((ctx) => 'other_message', this.handleOtherMessage.bind(this));
    this.composer.route((ctx) => 'inline', this.handleInlineQuery.bind(this));
    this.composer.route((ctx) => 'unknown', this.handleUnknown.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
   */
  private async handleCommand(ctx: BotConstructorContext): Promise<void> {
    const command = ctx.message?.text?.split(' ')[0]?.replace('/', '') || '';
    const args = ctx.message?.text?.split(' ').slice(1) || [];

    logger.info('Command received', {
      command,
      args,
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (ctx.session?.currentFlowId) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ—Ç–æ–∫–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ—Ç–æ–∫
        await this.handleFlowCommand(ctx, command, args);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –Ω–æ–≤—É—é
      switch (command) {
        case 'start':
          await this.handleStartCommand(ctx, args);
          break;

        case 'help':
          await this.handleHelpCommand(ctx);
          break;

        case 'menu':
          await this.handleMenuCommand(ctx);
          break;

        case 'cancel':
          await this.handleCancelCommand(ctx);
          break;

        default:
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Ç–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
          await this.tryStartFlowByCommand(ctx, command, args);
          break;
      }
    } catch (error) {
      logger.error('Command handling error', {
        command,
        error: error instanceof Error ? error.message : 'Unknown error'
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleTextMessage(ctx: BotConstructorContext): Promise<void> {
    const text = ctx.message?.text || '';

    logger.info('Text message received', {
      text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    // ‚ú® –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë—Ç –ª–∏ workflow –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramUserId = ctx.from?.id?.toString();
    if (telegramUserId) {
      const resumed = await this.checkAndResumeWaitingWorkflow(ctx, 'input', text);
      if (resumed) {
        return; // Workflow –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if (ctx.session?.currentFlowId) {
      // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.handleFlowMessage(ctx, text);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.handleRegularMessage(ctx, text);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
   */
  private async handleCallback(ctx: BotConstructorContext): Promise<void> {
    const callbackData = ctx.callbackQuery?.data || '';

    logger.info('üîµ CALLBACK RECEIVED', {
      callbackData,
      userId: ctx.from?.id,
      chatId: ctx.chat?.id,
      projectId: this.projectId,
      timestamp: new Date().toISOString()
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCallbackQuery();

    // ‚ú® –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë—Ç –ª–∏ workflow callback
    const telegramUserId = ctx.from?.id?.toString();
    if (telegramUserId) {
      logger.info('üîç CHECKING FOR WAITING WORKFLOW', {
        telegramUserId,
        callbackData,
        chatId: ctx.chat?.id
      });
      
      const resumed = await this.checkAndResumeWaitingWorkflow(ctx, 'callback', callbackData);
      
      logger.info(resumed ? '‚úÖ WORKFLOW RESUMED' : '‚ùå NO WAITING WORKFLOW FOUND', {
        callbackData,
        resumed
      });
      
      if (resumed) {
        return; // Workflow –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if (ctx.session?.currentFlowId) {
      await this.handleFlowCallback(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∫–∞–∫ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    if (callbackData.startsWith('flow_')) {
      // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–æ callback
      const flowId = callbackData.replace('flow_', '');
      await this.flowExecutor.startFlow(ctx, flowId);
    } else if (callbackData.startsWith('cmd_')) {
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ callback
      const command = callbackData.replace('cmd_', '');
      await this.handleCallbackCommand(ctx, command);
    } else {
      await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleOtherMessage(ctx: BotConstructorContext): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ —Ç.–¥.
    const messageType = this.getMessageType(ctx);

    logger.info('Other message type received', {
      messageType,
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    if (ctx.session?.currentFlowId) {
      // –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.handleFlowOtherMessage(ctx, messageType);
    } else {
      await ctx.reply(
        'üìé –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async handleInlineQuery(ctx: BotConstructorContext): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
    logger.info('Inline query received', {
      query: ctx.inlineQuery?.query,
      userId: ctx.from?.id,
      projectId: this.projectId
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  private async handleUnknown(ctx: BotConstructorContext): Promise<void> {
    logger.warn('Unknown update type received', {
      updateType: Object.keys(ctx.update)[0],
      userId: ctx.from?.id,
      projectId: this.projectId
    });
  }

  // ============ –ö–û–ú–ê–ù–î–´ ============

  private async handleStartCommand(
    ctx: BotConstructorContext,
    args: string[]
  ): Promise<void> {
    const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/bonuses - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å

üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`;

    await ctx.reply(welcomeMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ú–µ–Ω—é', callback_data: 'cmd_menu' }],
          [{ text: 'üí∞ –ë–æ–Ω—É—Å—ã', callback_data: 'cmd_bonuses' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'cmd_help' }]
        ]
      }
    });
  }

  private async handleHelpCommand(ctx: BotConstructorContext): Promise<void> {
    const helpMessage = `üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üí∞ –†–∞–±–æ—Ç–∞ —Å –±–æ–Ω—É—Å–∞–º–∏:
/bonuses - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
/cancel - –ü—Ä–µ—Ä–≤–∞—Ç—å –ª—é–±—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!`;

    await ctx.reply(helpMessage);
  }

  private async handleMenuCommand(ctx: BotConstructorContext): Promise<void> {
    const menuMessage = `üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`;

    await ctx.reply(menuMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí∞ –ú–æ–∏ –±–æ–Ω—É—Å—ã', callback_data: 'cmd_bonuses' }],
          [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'cmd_profile' }],
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'cmd_stats' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'cmd_help' }]
        ]
      }
    });
  }

  private async handleCancelCommand(ctx: BotConstructorContext): Promise<void> {
    if (ctx.session?.currentFlowId) {
      // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
      await this.flowExecutor.endFlow(ctx, ctx.session.currentFlowId);
      await ctx.reply('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    } else {
      await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
  }

  // ============ –ü–û–¢–û–ö–ò ============

  private async handleFlowCommand(
    ctx: BotConstructorContext,
    command: string,
    args: string[]
  ): Promise<void> {
    // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å FlowExecutor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Ç–æ–∫–∞
      logger.info('Flow command received', { flowId, command, args });
    }
  }

  private async handleFlowMessage(
    ctx: BotConstructorContext,
    text: string
  ): Promise<void> {
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ
      ctx.session.lastInput = text;

      // –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ –≤ –ø–æ—Ç–æ–∫–µ
      // await this.flowExecutor.processInput(ctx, flowId, text);
      logger.info('Flow message received', {
        flowId,
        text: text.substring(0, 50)
      });
    }
  }

  private async handleFlowCallback(
    ctx: BotConstructorContext,
    callbackData: string
  ): Promise<void> {
    // –ü–µ—Ä–µ–¥–∞–µ–º callback –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Ç–æ–∫–∞
      logger.info('Flow callback received', { flowId, callbackData });
    }
  }

  private async handleFlowOtherMessage(
    ctx: BotConstructorContext,
    messageType: string
  ): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Ç–æ–∫–µ
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      logger.info('Flow other message received', { flowId, messageType });
    }
  }

  private async tryStartFlowByCommand(
    ctx: BotConstructorContext,
    command: string,
    args: string[]
  ): Promise<void> {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ç–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ø–æ—Ç–æ–∫–æ–≤

    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    await ctx.reply(
      `‚ùì –ö–æ–º–∞–Ω–¥–∞ "/${command}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
    );
  }

  private async handleRegularMessage(
    ctx: BotConstructorContext,
    text: string
  ): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å NLP –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞

    const lowerText = text.toLowerCase();

    if (
      lowerText.includes('–ø—Ä–∏–≤–µ—Ç') ||
      lowerText.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') ||
      lowerText.includes('hi') ||
      lowerText.includes('hello')
    ) {
      await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.'
      );
    } else if (lowerText.includes('—Å–ø–∞—Å–∏–±–æ') || lowerText.includes('thank')) {
      await ctx.reply('üôÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å.');
    } else {
      await ctx.reply(
        'üí≠ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ /menu –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å".'
      );
    }
  }

  private async handleCallbackCommand(
    ctx: BotConstructorContext,
    command: string
  ): Promise<void> {
    switch (command) {
      case 'menu':
        await this.handleMenuCommand(ctx);
        break;
      case 'help':
        await this.handleHelpCommand(ctx);
        break;
      case 'bonuses':
        await ctx.reply(
          'üí∞ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –±–æ–Ω—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bonuses'
        );
        break;
      case 'profile':
        await ctx.reply(
          'üë§ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile'
        );
        break;
      case 'stats':
        await ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        break;
      default:
        await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  }

  // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ============

  private getMessageType(ctx: BotConstructorContext): string {
    const message = ctx.message;
    if (!message) return 'unknown';

    if (message.photo) return 'photo';
    if (message.document) return 'document';
    if (message.sticker) return 'sticker';
    if (message.voice) return 'voice';
    if (message.video) return 'video';
    if (message.audio) return 'audio';
    if (message.location) return 'location';
    if (message.contact) return 'contact';

    return 'other';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç workflow execution, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
   */
  private async handleContact(ctx: BotConstructorContext): Promise<void> {
    const contact = ctx.message?.contact;
    const telegramUserId = ctx.from?.id?.toString();

    if (!contact || !telegramUserId) {
      logger.warn('Contact or user ID missing', { 
        hasContact: !!contact, 
        hasTelegramUserId: !!telegramUserId 
      });
      return;
    }

    logger.info('Contact received', {
      phoneNumber: contact.phone_number,
      firstName: contact.first_name,
      userId: contact.user_id,
      telegramUserId,
      projectId: this.projectId
    });

    // ‚ú® –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await this.checkAndResumeWaitingWorkflow(ctx, 'contact', contact);
  }

  /**
   * ‚ú® –ù–û–í–û–ï: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è waiting workflow
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –æ–∂–∏–¥–∞–Ω–∏—è: contact, callback, input
   */
  private async checkAndResumeWaitingWorkflow(
    ctx: BotConstructorContext,
    waitType: 'contact' | 'callback' | 'input',
    data: any
  ): Promise<boolean> {
    const telegramUserId = ctx.from?.id?.toString();
    
    if (!telegramUserId) {
      return false;
    }

    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular dependencies
      const { db } = await import('@/lib/db');
      const { SimpleWorkflowProcessor } = await import('../simple-workflow-processor');

      // –ò—â–µ–º workflow execution –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting
      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –î–ª—è callback query chat –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ callbackQuery.message.chat
      const chatId = (ctx.chat?.id || ctx.callbackQuery?.message?.chat?.id)?.toString();
      
      logger.info('üîé SEARCHING FOR WAITING EXECUTION', {
        projectId: this.projectId,
        status: 'waiting',
        telegramChatId: chatId,
        waitType,
        hasChat: !!ctx.chat,
        hasCallbackChat: !!ctx.callbackQuery?.message?.chat,
        timestamp: new Date().toISOString()
      });
      
            const waitingExecution = await db.workflowExecution.findFirst({
              where: {
                projectId: this.projectId,
                status: 'waiting',
                telegramChatId: chatId,
                waitType: waitType === 'input' ? ({ in: ['input', 'contact'] } as any) : waitType
              },
              include: {
                workflow: true
              }
            });

      if (!waitingExecution) {
        logger.warn('‚ö†Ô∏è NO WAITING EXECUTION FOUND', {
          projectId: this.projectId,
          telegramChatId: chatId,
          waitType,
          hasChat: !!ctx.chat,
          hasCallbackChat: !!ctx.callbackQuery?.message?.chat
        });
        return false; // –ù–µ—Ç waiting workflow
      }

      logger.info('‚úÖ FOUND WAITING WORKFLOW EXECUTION', {
        executionId: waitingExecution.id,
        workflowId: waitingExecution.workflowId,
        currentNodeId: waitingExecution.currentNodeId,
        status: waitingExecution.status,
        waitType: waitingExecution.waitType,
        timestamp: new Date().toISOString()
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–∂–∏–¥–∞–Ω–∏—è
      let userId: string | undefined;
      let userData: any = {};

      if (waitType === 'contact') {
        const contact = data;
        const raw = contact.phone_number;
        const digits = raw.replace(/[^0-9]/g, ''); // –£–¥–∞–ª—è–µ–º –í–°–ï –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç.–¥.)
        const last10 = digits.length >= 10 ? digits.slice(-10) : digits;
        
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ë–ï–ó raw —Å –ø—Ä–æ–±–µ–ª–∞–º–∏!)
          const plus = `+${digits}`;
          const candidates = new Set<string>([plus, digits, last10]);
          
          // ‚ú® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ
          const withSpaces = `+${digits.slice(0, 1)} ${digits.slice(1, 4)} ${digits.slice(4, 7)} ${digits.slice(7)}`;
          candidates.add(withSpaces);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –†–§ –Ω–æ–º–µ—Ä–æ–≤
          if (digits.length === 11 && digits.startsWith('8')) {
            candidates.add(`+7${digits.slice(1)}`);
            candidates.add(`7${digits.slice(1)}`);
            const withSpaces7 = `+7 ${digits.slice(1, 4)} ${digits.slice(4, 7)} ${digits.slice(7)}`;
            candidates.add(withSpaces7);
          } else if (digits.length === 11 && digits.startsWith('7')) {
            candidates.add(`+7${digits.slice(1)}`);
            candidates.add(`8${digits.slice(1)}`);
            const withSpaces7 = `+7 ${digits.slice(1, 4)} ${digits.slice(4, 7)} ${digits.slice(7)}`;
            candidates.add(withSpaces7);
          }

        logger.info('üìû Contact received, normalized candidates', {
          raw,
          digitsOnly: digits,
          last10,
          candidates: Array.from(candidates),
          projectId: this.projectId
        });

        const existing = await db.user.findFirst({
          where: {
            projectId: this.projectId,
            OR: [
              { telegramId: BigInt(telegramUserId) },
              ...Array.from(candidates).map((ph) => ({ phone: ph }))
            ]
          }
        });

        logger.info('üîç User search result in router-integration', {
          found: !!existing,
          userIdInDB: existing?.id,
          phoneInDB: existing?.phone,
          telegramIdInDB: existing?.telegramId?.toString(),
          searchedCandidates: Array.from(candidates)
        });

        if (existing) {
          await db.user.update({
            where: { id: existing.id },
            data: {
              telegramId: BigInt(telegramUserId),
              telegramUsername: ctx.from?.username,
              isActive: true
            }
          });
          logger.info('‚úÖ Matched and updated existing user', { 
            userId: existing.id, 
            phoneInDB: existing.phone,
            newTelegramId: telegramUserId
          });
          userId = existing.id;
        }
        userData = {
          contactReceived: {
            phoneNumber: contact.phone_number,
            firstName: contact.first_name,
            lastName: contact.last_name,
            userId: userId,
            receivedAt: new Date().toISOString()
          }
        };
      } else if (waitType === 'callback') {
        userData = { callbackReceived: { data, receivedAt: new Date().toISOString() } };
      } else if (waitType === 'input') {
        userData = { inputReceived: { text: data, receivedAt: new Date().toISOString() } };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º execution: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º status = 'running'
            await db.workflowExecution.update({
              where: { id: waitingExecution.id },
              data: {
                status: 'running',
                waitType: null,
                userId: userId || waitingExecution.userId || undefined
              }
            });

            // ‚úÖ –ò–ù–í–ê–õ–ò–î–ò–†–£–ï–ú –ö–ï–® WAITING EXECUTION
            try {
              const { WorkflowRuntimeService } = await import('../workflow/workflow-runtime.service');
              await WorkflowRuntimeService.invalidateWaitingExecutionCache(
                projectId,
                telegramChatId,
                waitType
              );
            } catch (cacheError) {
              console.warn('Failed to invalidate waiting execution cache:', cacheError);
            }

      // ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º nextNodeId –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–∂–∏–¥–∞–Ω–∏—è
      let nextNodeId: string;
      
      if (waitType === 'contact') {
        // –î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ check-contact-user
        nextNodeId = 'check-contact-user';
      } else if (waitType === 'callback') {
        // ‚ú® –î–õ–Ø CALLBACK: –ò—â–µ–º trigger.callback –Ω–æ–¥—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º callbackData
        const callbackData = data;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã workflow
        const workflowNodes = waitingExecution.workflow.nodes as any[];
        
        // –ò—â–µ–º trigger.callback –Ω–æ–¥—É —Å matching callbackData
        const callbackTriggerNode = workflowNodes.find((node: any) => 
          node.type === 'trigger.callback' && 
          node.data?.config?.callbackData === callbackData
        );
        
        if (callbackTriggerNode) {
          nextNodeId = callbackTriggerNode.id;
          logger.info('‚úÖ Found matching callback trigger node', {
            callbackData,
            triggerNodeId: nextNodeId,
            triggerLabel: callbackTriggerNode.data?.label
          });
        } else {
          logger.warn('‚ö†Ô∏è No matching callback trigger found, using current node', {
            callbackData,
            availableTriggers: workflowNodes
              .filter((n: any) => n.type === 'trigger.callback')
              .map((n: any) => ({ id: n.id, callbackData: n.data?.config?.callbackData }))
          });
          // Fallback –∫ —Ç–µ–∫—É—â–µ–π –Ω–æ–¥–µ
          nextNodeId = waitingExecution.currentNodeId || 'start-trigger';
        }
      } else {
        // –î–ª—è input –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–¥—É
        nextNodeId = waitingExecution.currentNodeId || 'start-trigger';
      }
      
      logger.info('üöÄ RESUMING WORKFLOW', { 
        nextNodeId,
        currentNodeId: waitingExecution.currentNodeId,
        waitType,
        executionId: waitingExecution.id,
        workflowId: waitingExecution.workflowId,
        callbackData: waitType === 'callback' ? data : undefined
      });

      // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é workflow –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const { ExecutionContextManager } = await import('../workflow/execution-context-manager');
      const workflowVersion = await db.workflowVersion.findFirst({
        where: { workflowId: waitingExecution.workflowId, version: waitingExecution.version }
      });

      if (!workflowVersion) {
        logger.error('Workflow version not found for execution', {
          workflowId: waitingExecution.workflowId,
          version: waitingExecution.version
        });
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: –≤–µ—Ä—Å–∏—è workflow –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return false;
      }
      
      const context = await ExecutionContextManager.resumeContext(
        waitingExecution.id,
        chatId,
        telegramUserId,
        ctx.from?.username,
        waitType === 'input' ? data : undefined,
        waitType === 'callback' ? data : undefined
      );

      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {{telegram.contact.phoneNumber}}
      if (waitType === 'contact' && data) {
        (context as any).telegram.contact = {
          phoneNumber: data.phone_number,
          firstName: data.first_name,
          lastName: data.last_name,
          userId: data.user_id
        };

      // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      logger.info('üîç checkAndResumeWaitingWorkflow parameters', {
        waitType,
        hasData: !!data,
        dataType: typeof data,
        dataKeys: data ? Object.keys(data) : 'no data',
        executionId: waitingExecution.id
      });

      // ‚ú® –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º contactReceived –∫–∞–∫ workflow-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ {{contactReceived.phoneNumber}}
      (context as any).contactReceived = {
        phoneNumber: data.phone_number,
        firstName: data.first_name,
        lastName: data.last_name,
        userId: userId,
        receivedAt: new Date().toISOString()
      };

        // ‚ú® –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º contactReceived –≤ workflow_variables –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –Ω–æ–¥–∞—Ö
        const contactReceivedData = {
          phoneNumber: data.phone_number,
          firstName: data.first_name,
          lastName: data.last_name,
          userId: userId,
          receivedAt: new Date().toISOString()
        };
        
        logger.info('üíæ Saving contactReceived to workflow variables', {
          executionId: waitingExecution.id,
          contactReceivedData,
          userId
        });
        
        await context.variables.set('contactReceived', contactReceivedData);
        
        // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º projectId –≤ workflow_variables
        await context.variables.set('projectId', this.projectId);
        
        // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        const savedContactReceived = await context.variables.get('contactReceived', 'session');
        const savedProjectId = await context.variables.get('projectId', 'session');
        
        logger.info('‚úÖ contactReceived and projectId saved to workflow variables', {
          executionId: waitingExecution.id,
          projectId: this.projectId,
          savedContactReceived: savedContactReceived ? 'SAVED' : 'NOT SAVED',
          savedProjectId: savedProjectId ? 'SAVED' : 'NOT SAVED',
          contactReceivedData,
          projectIdValue: this.projectId
        });
      } else if (waitType === 'callback' && data) {
        (context as any).callbackReceived = {
          data,
          receivedAt: new Date().toISOString()
        };
        
        // ‚ú® –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º callbackReceived –≤ workflow_variables
        await context.variables.set('callbackReceived', {
          data,
          receivedAt: new Date().toISOString()
        });
      } else if (waitType === 'input' && data) {
        (context as any).inputReceived = {
          text: data,
          receivedAt: new Date().toISOString()
        };
        
        // ‚ú® –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º inputReceived –≤ workflow_variables
        await context.variables.set('inputReceived', {
          text: data,
          receivedAt: new Date().toISOString()
        });
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º executionId
      const processor = new SimpleWorkflowProcessor(
        workflowVersion as any,
        this.projectId
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º resumeWorkflow –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ execution
      await processor.resumeWorkflow(context, nextNodeId);

      logger.info('Workflow resumed successfully', {
        executionId: waitingExecution.id,
        waitType,
        nextNodeId
      });

      return true; // Workflow –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω

    } catch (error) {
      logger.error('Failed to resume waiting workflow', {
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        telegramUserId,
        projectId: this.projectId,
        waitType
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );

      return false;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–¥—É –ø–æ—Å–ª–µ waiting state
   */
  private getNextNodeAfterWaiting(
    workflow: any,
    currentNodeId: string | undefined | null
  ): string | null {
    if (!currentNodeId || !workflow.connections) {
      logger.warn('getNextNodeAfterWaiting: missing currentNodeId or connections', {
        currentNodeId,
        hasConnections: !!workflow.connections
      });
      return null;
    }

    const connections = workflow.connections as any[];
    logger.info('getNextNodeAfterWaiting: searching for connections', {
      currentNodeId,
      totalConnections: connections.length,
      allConnections: connections.map(c => ({ source: c.source, target: c.target }))
    });

    const nextConnection = connections.find(
      (conn: any) => conn.source === currentNodeId
    );

    logger.info('getNextNodeAfterWaiting: found connection', {
      currentNodeId,
      nextConnection: nextConnection ? { source: nextConnection.source, target: nextConnection.target } : null,
      nextNodeId: nextConnection?.target || null
    });

    return nextConnection?.target || null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ composer —Å router
   */
  static createRouterComposer(
    flowExecutor: FlowExecutor,
    projectId: string
  ): Composer<BotConstructorContext> {
    const composer = new Composer<BotConstructorContext>();

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    new RouterIntegration(composer, flowExecutor, projectId);

    return composer;
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
declare module '../bot-session.service' {
  interface BotConstructorSession {
    lastInput?: string;
  }
}
