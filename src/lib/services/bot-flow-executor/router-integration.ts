/**
 * @file: src/lib/services/bot-flow-executor/router-integration.ts
 * @description: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Grammy Router –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
 * @project: SaaS Bonus System
 * @dependencies: Grammy Router, FlowExecutor
 * @created: 2025-09-30
 * @author: AI Assistant + User
 */

import { Composer, Context } from 'grammy';
// import { router } from '@grammyjs/router';
// import { SessionFlavor } from 'grammy';
import { logger } from '@/lib/logger';
import { FlowExecutor } from './flow-executor';

import type { BotConstructorSession } from '../bot-session.service';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
type BotConstructorContext = Context & SessionFlavor<BotConstructorSession>;

export class RouterIntegration {
  private composer: Composer<BotConstructorContext>;
  private flowExecutor: FlowExecutor;
  private projectId: string;

  constructor(
    composer: Composer<BotConstructorContext>,
    flowExecutor: FlowExecutor,
    projectId: string
  ) {
    this.composer = composer;
    this.flowExecutor = flowExecutor;
    this.projectId = projectId;
    this.setupRouter();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private setupRouter(): void {
    // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const route = router<BotConstructorContext>((ctx) => {
      const update = ctx.update;

      if (update.message) {
        const message = update.message;

        // –ö–æ–º–∞–Ω–¥—ã
        if (message.text?.startsWith('/')) {
          return 'command';
        }

        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.text) {
          return 'text';
        }

        // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        return 'other_message';
      }

      if (update.callback_query) {
        return 'callback';
      }

      if (update.inline_query) {
        return 'inline';
      }

      return 'unknown';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.composer.use(route);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    this.composer.route('command', this.handleCommand.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.composer.route('text', this.handleTextMessage.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
    this.composer.route('callback', this.handleCallback.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    this.composer.route('other_message', this.handleOtherMessage.bind(this));
    this.composer.route('inline', this.handleInlineQuery.bind(this));
    this.composer.route('unknown', this.handleUnknown.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
   */
  private async handleCommand(ctx: BotConstructorContext): Promise<void> {
    const command = ctx.message?.text?.split(' ')[0]?.replace('/', '') || '';
    const args = ctx.message?.text?.split(' ').slice(1) || [];

    logger.info('Command received', {
      command,
      args,
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (ctx.session?.currentFlowId) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ—Ç–æ–∫–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ—Ç–æ–∫
        await this.handleFlowCommand(ctx, command, args);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –Ω–æ–≤—É—é
      switch (command) {
        case 'start':
          await this.handleStartCommand(ctx, args);
          break;

        case 'help':
          await this.handleHelpCommand(ctx);
          break;

        case 'menu':
          await this.handleMenuCommand(ctx);
          break;

        case 'cancel':
          await this.handleCancelCommand(ctx);
          break;

        default:
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Ç–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
          await this.tryStartFlowByCommand(ctx, command, args);
          break;
      }
    } catch (error) {
      logger.error('Command handling error', {
        command,
        error: error instanceof Error ? error.message : 'Unknown error'
      });

      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleTextMessage(ctx: BotConstructorContext): Promise<void> {
    const text = ctx.message?.text || '';

    logger.info('Text message received', {
      text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if (ctx.session?.currentFlowId) {
      // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.handleFlowMessage(ctx, text);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.handleRegularMessage(ctx, text);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
   */
  private async handleCallback(ctx: BotConstructorContext): Promise<void> {
    const callbackData = ctx.callbackQuery?.data || '';

    logger.info('Callback received', {
      callbackData,
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCallbackQuery();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if (ctx.session?.currentFlowId) {
      await this.handleFlowCallback(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∫–∞–∫ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    if (callbackData.startsWith('flow_')) {
      // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–æ callback
      const flowId = callbackData.replace('flow_', '');
      await this.flowExecutor.startFlow(ctx, flowId);
    } else if (callbackData.startsWith('cmd_')) {
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ callback
      const command = callbackData.replace('cmd_', '');
      await this.handleCallbackCommand(ctx, command);
    } else {
      await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleOtherMessage(ctx: BotConstructorContext): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ —Ç.–¥.
    const messageType = this.getMessageType(ctx);

    logger.info('Other message type received', {
      messageType,
      userId: ctx.from?.id,
      projectId: this.projectId
    });

    if (ctx.session?.currentFlowId) {
      // –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.handleFlowOtherMessage(ctx, messageType);
    } else {
      await ctx.reply(
        'üìé –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async handleInlineQuery(ctx: BotConstructorContext): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
    logger.info('Inline query received', {
      query: ctx.inlineQuery?.query,
      userId: ctx.from?.id,
      projectId: this.projectId
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  private async handleUnknown(ctx: BotConstructorContext): Promise<void> {
    logger.warn('Unknown update type received', {
      updateType: Object.keys(ctx.update)[0],
      userId: ctx.from?.id,
      projectId: this.projectId
    });
  }

  // ============ –ö–û–ú–ê–ù–î–´ ============

  private async handleStartCommand(
    ctx: BotConstructorContext,
    args: string[]
  ): Promise<void> {
    const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/bonuses - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å

üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`;

    await ctx.reply(welcomeMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ú–µ–Ω—é', callback_data: 'cmd_menu' }],
          [{ text: 'üí∞ –ë–æ–Ω—É—Å—ã', callback_data: 'cmd_bonuses' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'cmd_help' }]
        ]
      }
    });
  }

  private async handleHelpCommand(ctx: BotConstructorContext): Promise<void> {
    const helpMessage = `üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üí∞ –†–∞–±–æ—Ç–∞ —Å –±–æ–Ω—É—Å–∞–º–∏:
/bonuses - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
/cancel - –ü—Ä–µ—Ä–≤–∞—Ç—å –ª—é–±—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!`;

    await ctx.reply(helpMessage);
  }

  private async handleMenuCommand(ctx: BotConstructorContext): Promise<void> {
    const menuMessage = `üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`;

    await ctx.reply(menuMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí∞ –ú–æ–∏ –±–æ–Ω—É—Å—ã', callback_data: 'cmd_bonuses' }],
          [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'cmd_profile' }],
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'cmd_stats' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'cmd_help' }]
        ]
      }
    });
  }

  private async handleCancelCommand(ctx: BotConstructorContext): Promise<void> {
    if (ctx.session?.currentFlowId) {
      // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
      await this.flowExecutor.endFlow(ctx, ctx.session.currentFlowId);
      await ctx.reply('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    } else {
      await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
  }

  // ============ –ü–û–¢–û–ö–ò ============

  private async handleFlowCommand(
    ctx: BotConstructorContext,
    command: string,
    args: string[]
  ): Promise<void> {
    // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å FlowExecutor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Ç–æ–∫–∞
      logger.info('Flow command received', { flowId, command, args });
    }
  }

  private async handleFlowMessage(
    ctx: BotConstructorContext,
    text: string
  ): Promise<void> {
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ
      ctx.session.lastInput = text;

      // –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥–µ –≤ –ø–æ—Ç–æ–∫–µ
      // await this.flowExecutor.processInput(ctx, flowId, text);
      logger.info('Flow message received', {
        flowId,
        text: text.substring(0, 50)
      });
    }
  }

  private async handleFlowCallback(
    ctx: BotConstructorContext,
    callbackData: string
  ): Promise<void> {
    // –ü–µ—Ä–µ–¥–∞–µ–º callback –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Ç–æ–∫–∞
      logger.info('Flow callback received', { flowId, callbackData });
    }
  }

  private async handleFlowOtherMessage(
    ctx: BotConstructorContext,
    messageType: string
  ): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Ç–æ–∫–µ
    const flowId = ctx.session?.currentFlowId;
    if (flowId) {
      logger.info('Flow other message received', { flowId, messageType });
    }
  }

  private async tryStartFlowByCommand(
    ctx: BotConstructorContext,
    command: string,
    args: string[]
  ): Promise<void> {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ç–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ø–æ—Ç–æ–∫–æ–≤

    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    await ctx.reply(
      `‚ùì –ö–æ–º–∞–Ω–¥–∞ "/${command}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
    );
  }

  private async handleRegularMessage(
    ctx: BotConstructorContext,
    text: string
  ): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å NLP –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞

    const lowerText = text.toLowerCase();

    if (
      lowerText.includes('–ø—Ä–∏–≤–µ—Ç') ||
      lowerText.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') ||
      lowerText.includes('hi') ||
      lowerText.includes('hello')
    ) {
      await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.'
      );
    } else if (lowerText.includes('—Å–ø–∞—Å–∏–±–æ') || lowerText.includes('thank')) {
      await ctx.reply('üôÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å.');
    } else {
      await ctx.reply(
        'üí≠ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ /menu –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å".'
      );
    }
  }

  private async handleCallbackCommand(
    ctx: BotConstructorContext,
    command: string
  ): Promise<void> {
    switch (command) {
      case 'menu':
        await this.handleMenuCommand(ctx);
        break;
      case 'help':
        await this.handleHelpCommand(ctx);
        break;
      case 'bonuses':
        await ctx.reply(
          'üí∞ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –±–æ–Ω—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bonuses'
        );
        break;
      case 'profile':
        await ctx.reply(
          'üë§ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile'
        );
        break;
      case 'stats':
        await ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        break;
      default:
        await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  }

  // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ============

  private getMessageType(ctx: BotConstructorContext): string {
    const message = ctx.message;
    if (!message) return 'unknown';

    if (message.photo) return 'photo';
    if (message.document) return 'document';
    if (message.sticker) return 'sticker';
    if (message.voice) return 'voice';
    if (message.video) return 'video';
    if (message.audio) return 'audio';
    if (message.location) return 'location';
    if (message.contact) return 'contact';

    return 'other';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ composer —Å router
   */
  static createRouterComposer(
    flowExecutor: FlowExecutor,
    projectId: string
  ): Composer<BotConstructorContext> {
    const composer = new Composer<BotConstructorContext>();

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    new RouterIntegration(composer, flowExecutor, projectId);

    return composer;
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
declare module '../bot-session.service' {
  interface BotConstructorSession {
    lastInput?: string;
  }
}
