/**
 * @file: src/lib/services/workflow-runtime.service.ts
 * @description: Runtime —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö workflow
 * @project: SaaS Bonus System
 * @dependencies: BotFlowService, FlowExecutor
 * @created: 2025-10-12
 * @author: AI Assistant + User
 */

import { logger } from '@/lib/logger';
import { db } from '@/lib/db';
import { SimpleWorkflowProcessor } from './simple-workflow-processor';
import { initializeNodeHandlers } from './workflow/handlers';
import type { WorkflowVersion } from '@/types/workflow';

export class WorkflowRuntimeService {
  private static activeVersionsCache: Map<string, WorkflowVersion> = new Map();
  private static activeFlowsCache: Map<string, any> = new Map();
  private static compiledFlowsCache: Map<string, any> = new Map();

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  static clearAllCache(): void {
    this.activeVersionsCache.clear();
    this.activeFlowsCache.clear();
    this.compiledFlowsCache.clear();
    console.log('All workflow caches cleared');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ workflow
   */
  static async hasActiveWorkflow(projectId: string): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (this.activeVersionsCache.has(projectId)) {
        return true;
      }

      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î (—Ç–æ–ª—å–∫–æ count, –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
      const count = await db.workflowVersion.count({
        where: {
          workflow: {
            projectId,
            isActive: true
          },
          isActive: true
        }
      });

      return count > 0;
    } catch (error) {
      logger.error('Error checking for active workflow', { projectId, error });
      return false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º handlers –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  private static initialized = false;
  private static initializeHandlers() {
    if (!this.initialized) {
      initializeNodeHandlers();
      this.initialized = true;
      logger.info('Node handlers initialized');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é workflow –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async getActiveWorkflowVersion(projectId: string): Promise<WorkflowVersion | null> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º handlers
      this.initializeHandlers();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cached = this.activeVersionsCache.get(projectId);
      if (cached) {
        logger.debug('Returning cached active workflow version', { projectId, workflowId: cached.workflowId, version: cached.version });
        return cached;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î
      logger.debug('Loading active workflow version from database', { projectId });

      const activeVersion = await db.workflowVersion.findFirst({
        where: {
          workflow: {
            projectId,
            isActive: true
          },
          isActive: true
        },
        include: {
          workflow: true
        },
        orderBy: {
          createdAt: 'desc'
        }
      });

      if (!activeVersion) {
        logger.debug('No active workflow version found for project', { projectId });
        return null;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∏–ø–∞–º–∏
      const nodesArray = (activeVersion.nodes as any) || [];
      const nodesObject: Record<string, any> = {};

      nodesArray.forEach((node: any) => {
        nodesObject[node.id] = node;
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ WorkflowVersion
      const workflowVersion: WorkflowVersion = {
        id: activeVersion.id,
        workflowId: activeVersion.workflowId,
        version: activeVersion.version,
        nodes: nodesObject,
        entryNodeId: activeVersion.entryNodeId,
        variables: activeVersion.variables as any,
        settings: activeVersion.settings as any,
        isActive: activeVersion.isActive,
        createdAt: activeVersion.createdAt,
        // –î–æ–±–∞–≤–ª—è–µ–º connections –∏–∑ workflow
        connections: activeVersion.workflow.connections as any
      };

      // –ö—ç—à–∏—Ä—É–µ–º
      this.activeVersionsCache.set(projectId, workflowVersion);

      logger.info('Active workflow version loaded', {
        projectId,
        workflowId: workflowVersion.workflowId,
        version: workflowVersion.version,
        nodesCount: Object.keys(workflowVersion.nodes || {}).length
      });

      return workflowVersion;
    } catch (error) {
      logger.error('Failed to get active workflow version', {
        projectId,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å workflow –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async executeWorkflow(projectId: string, trigger: 'start' | 'message' | 'callback', context: any): Promise<boolean> {
    try {
      const workflowVersion = await this.getActiveWorkflowVersion(projectId);
      if (!workflowVersion) {
        logger.debug('No active workflow version found for execution', { projectId });
        return false;
      }

      const processor = new SimpleWorkflowProcessor(workflowVersion, projectId);
      const result = await processor.process(context, trigger);

      return result;
    } catch (error) {
      console.error('üí• CRITICAL WORKFLOW ERROR:', {
        projectId,
        trigger,
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      return false;
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static invalidateCache(projectId: string): void {
    logger.debug('Invalidating workflow cache', { projectId });

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∫—ç—à–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    this.activeFlowsCache.delete(projectId);
    this.activeVersionsCache.delete(projectId);

    // –¢–∞–∫–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º compiledFlowsCache –¥–ª—è –≤—Å–µ—Ö flow –≤ –ø—Ä–æ–µ–∫—Ç–µ
    for (const [flowId, flow] of Array.from(this.activeFlowsCache.entries())) {
      if (flow.projectId === projectId) {
        this.compiledFlowsCache.delete(flowId);
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  static clearCache(): void {
    logger.debug('Clearing all workflow cache');
    this.compiledFlowsCache.clear();
    this.activeFlowsCache.clear();
  }

}

