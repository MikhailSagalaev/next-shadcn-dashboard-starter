/**
 * @file: src/lib/telegram/bot-manager.ts
 * @description: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ Telegram –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, Node.js Map
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

// @ts-nocheck
// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Prisma

import { Bot, Context, SessionFlavor, webhookCallback } from 'grammy';
import { createBot } from './bot';
import { db } from '@/lib/db';
import type { BotSettings } from '@/types/bonus';

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å bot.ts)
interface SessionData {
  step?: string;
  projectId?: string;
  awaitingContact?: boolean;
}

type MyContext = Context & SessionFlavor<SessionData>;

interface BotInstance {
  bot: Bot<MyContext>;
  webhook: any | null; // null –≤ dev —Ä–µ–∂–∏–º–µ (polling), webhookCallback –≤ prod —Ä–µ–∂–∏–º–µ
  isActive: boolean;
  projectId: string;
  lastUpdated: Date;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
class BotManager {
  private bots: Map<string, BotInstance> = new Map();
  private readonly WEBHOOK_BASE_URL: string;

  constructor() {
    this.WEBHOOK_BASE_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:5006';
    // TODO: –ª–æ–≥–≥–µ—Ä
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –ø–æ projectId
   */
  getBot(projectId: string): BotInstance | undefined {
    return this.bots.get(projectId);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
   */
  async createBot(projectId: string, botSettings: BotSettings): Promise<BotInstance> {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      await this.stopBot(projectId);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const bot = createBot(botSettings.botToken, projectId);
      
      // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Grammy
      // TODO: –ª–æ–≥–≥–µ—Ä
      await bot.init();
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @${bot.botInfo.username} (ID: ${bot.botInfo.id})`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º dev —Ä–µ–∂–∏–º –ø–æ localhost URL –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º webhook callback
      const isDev = this.WEBHOOK_BASE_URL.includes('localhost') || this.WEBHOOK_BASE_URL.includes('127.0.0.1');
      
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`üîç –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${isDev ? 'Development (polling)' : 'Production (webhook)'}`);
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`üîó Base URL: ${this.WEBHOOK_BASE_URL}`);
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`üåç NODE_ENV: ${process.env.NODE_ENV}`);

      let webhook = null;

      if (isDev) {
        // Development —Ä–µ–∂–∏–º - –æ—á–∏—â–∞–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
        try {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.log(`üîÑ Development —Ä–µ–∂–∏–º: –æ—á–∏—â–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}`);
          await bot.api.deleteWebhook();
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.log(`‚úÖ Webhook –æ—á–∏—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`);
        } catch (error) {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}:`, error);
          // –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞ ${projectId}...`);
          bot.start({
            onStart: (botInfo) => {
              // TODO: –ª–æ–≥–≥–µ—Ä
              // console.log(`üöÄ Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ @${botInfo.username} (ID: ${botInfo.id})`);
              // TODO: –ª–æ–≥–≥–µ—Ä
              // console.log(`üì± –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ Telegram!`);
            },
            drop_pending_updates: true // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          });
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.log(`‚úÖ Polling –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`);
        } catch (error) {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling –¥–ª—è –±–æ—Ç–∞ ${projectId}:`, error);
          // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –ø—É—Å—Ç—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ç—è –±—ã —á–µ—Ä–µ–∑ API
        }
      } else {
        // Production —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º webhook callback –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.log(`üîÑ Production —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–µ–º webhook callback –¥–ª—è –±–æ—Ç–∞ ${projectId}`);
        webhook = webhookCallback(bot, 'std/http');
        // Production —Ä–µ–∂–∏–º - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å HTTPS
        const webhookUrl = `${this.WEBHOOK_BASE_URL}/api/telegram/webhook/${projectId}`;
        
        if (!webhookUrl.startsWith('https://')) {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.warn(`‚ö†Ô∏è HTTPS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è webhook –≤ production: ${webhookUrl}`);
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.warn(`‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ webhook (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)`);
          // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –ø—É—Å—Ç—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        } else {
          try {
            // TODO: –ª–æ–≥–≥–µ—Ä
            // console.log(`üîÑ Production —Ä–µ–∂–∏–º: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}: ${webhookUrl}`);
            
            await bot.api.setWebhook(webhookUrl, {
              allowed_updates: [
                'message',
                'callback_query',
                'inline_query',
                'my_chat_member'
              ]
            });
            
            // TODO: –ª–æ–≥–≥–µ—Ä
            // console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}: ${webhookUrl}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook info
            const webhookInfo = await bot.api.getWebhookInfo();
            // TODO: –ª–æ–≥–≥–µ—Ä
            // console.log(`üìä Webhook info –¥–ª—è –±–æ—Ç–∞ ${projectId}:`, webhookInfo);
            
          } catch (error) {
            // TODO: –ª–æ–≥–≥–µ—Ä
            // console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}:`, error);
            // TODO: –ª–æ–≥–≥–µ—Ä
            // console.warn(`‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ webhook (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)`);
            // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –ø—É—Å—Ç—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º BotInstance –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook/polling
      const botInstance: BotInstance = {
        bot,
        webhook, // null –≤ dev —Ä–µ–∂–∏–º–µ, webhookCallback –≤ prod —Ä–µ–∂–∏–º–µ
        isActive: botSettings.isActive,
        projectId,
        lastUpdated: new Date()
      };

      this.bots.set(projectId, botInstance);
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`üíæ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ BotManager`);
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`ü§ñ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      return botInstance;

    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
   */
  async updateBot(projectId: string, botSettings: BotSettings): Promise<BotInstance> {
    const existingBot = this.bots.get(projectId);
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç
    if (!existingBot || existingBot.bot.token !== botSettings.botToken) {
      return this.createBot(projectId, botSettings);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    existingBot.isActive = botSettings.isActive;
    existingBot.lastUpdated = new Date();

    // –ï—Å–ª–∏ –±–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (!botSettings.isActive) {
      try {
        await existingBot.bot.stop();
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.log(`üîÑ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ ${projectId}:`, error);
      }
    }

    this.bots.set(projectId, existingBot);
    return existingBot;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
   */
  async stopBot(projectId: string): Promise<void> {
    const botInstance = this.bots.get(projectId);
    
    if (botInstance) {
      try {
        // –£–¥–∞–ª—è–µ–º webhook
        await botInstance.bot.api.deleteWebhook();
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.log(`üõë Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`);
      } catch (error) {
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}:`, error);
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
      try {
        await botInstance.bot.stop();
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.log(`üõë –ë–æ—Ç ${projectId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } catch (error) {
        // TODO: –ª–æ–≥–≥–µ—Ä
        // console.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${projectId}:`, error);
      }

      this.bots.delete(projectId);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async loadAllBots(): Promise<void> {
    try {
      const allBotSettings = await db.botSettings.findMany({
        where: { isActive: true },
        include: { project: true }
      });

      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ ${allBotSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...`);

      for (const botSettings of allBotSettings) {
        try {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BotManager
          const botSettingsForManager = {
            ...botSettings,
            welcomeMessage: typeof botSettings.welcomeMessage === 'string' 
              ? botSettings.welcomeMessage 
              : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
          };
          await this.createBot(botSettings.projectId, botSettingsForManager as BotSettings);
        } catch (error) {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botSettings.projectId}:`, error);
        }
      }

      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.bots.size} –±–æ—Ç–æ–≤`);
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤
   */
  getStats() {
    const total = this.bots.size;
    const active = Array.from(this.bots.values()).filter(bot => bot.isActive).length;
    const inactive = total - active;

    return {
      total,
      active,
      inactive,
      bots: Array.from(this.bots.entries()).map(([projectId, instance]) => ({
        projectId,
        isActive: instance.isActive,
        lastUpdated: instance.lastUpdated
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ webhook handler –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –≤ dev —Ä–µ–∂–∏–º–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling)
   */
  getWebhookHandler(projectId: string) {
    const botInstance = this.bots.get(projectId);
    
    if (!botInstance || !botInstance.isActive) {
      return null;
    }

    // –í dev —Ä–µ–∂–∏–º–µ webhook –º–æ–∂–µ—Ç –±—ã—Ç—å null (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling)
    return botInstance.webhook;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   */
  getBot(projectId: string): BotInstance | null {
    return this.bots.get(projectId) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
   */
  async checkBotHealth(projectId: string): Promise<{
    isRunning: boolean;
    webhookInfo?: any;
    error?: string;
  }> {
    const botInstance = this.bots.get(projectId);
    
    if (!botInstance) {
      return { isRunning: false, error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    try {
      const webhookInfo = await botInstance.bot.api.getWebhookInfo();
      return {
        isRunning: true,
        webhookInfo
      };
    } catch (error) {
      return {
        isRunning: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const globalForBotManager = globalThis as unknown as {
  botManager: BotManager | undefined;
};

export const botManager = globalForBotManager.botManager ?? new BotManager();

if (process.env.NODE_ENV !== 'production') {
  globalForBotManager.botManager = botManager;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
botManager.loadAllBots().catch(error => {
  // TODO: –ª–æ–≥–≥–µ—Ä
  // console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', error);
}); 