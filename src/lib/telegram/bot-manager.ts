/**
 * @file: src/lib/telegram/bot-manager.ts
 * @description: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ Telegram –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, Node.js Map
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤

import {
  Bot,
  Context,
  SessionFlavor,
  webhookCallback,
  GrammyError,
  HttpError
} from 'grammy';
import { run } from '@grammyjs/runner';
import { createBot } from './bot';
import { db } from '@/lib/db';
import { logger } from '@/lib/logger';
import type { BotSettings } from '@/types/api';
import { setupGlobalErrorHandler } from './global-error-handler';

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å bot.ts)
interface SessionData {
  step?: string;
  projectId?: string;
  awaitingContact?: boolean;
}

type MyContext = Context & SessionFlavor<SessionData>;

interface BotInstance {
  bot: Bot<MyContext>;
  webhook: ReturnType<typeof webhookCallback> | null; // null –≤ dev —Ä–µ–∂–∏–º–µ (polling), webhookCallback –≤ prod —Ä–µ–∂–∏–º–µ
  isActive: boolean;
  projectId: string;
  lastUpdated: Date;
  isPolling?: boolean; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
class BotManager {
  private bots: Map<string, BotInstance> = new Map();
  private readonly WEBHOOK_BASE_URL: string;
  private readonly operationLocks: Map<string, Promise<any>> = new Map();

  constructor() {
    // –ë–µ—Ä–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º NEXT_PUBLIC_APP_URL,
    // –∑–∞—Ç–µ–º APP_URL, –∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º dev-–∑–Ω–∞—á–µ–Ω–∏–µ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    // —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ IP/HTTP –±–µ–∑ —Ö–∞–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–µ–∂–∏–º.
    this.WEBHOOK_BASE_URL =
      process.env.NEXT_PUBLIC_APP_URL ||
      process.env.APP_URL ||
      'http://localhost:5006';

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    setupGlobalErrorHandler();

    logger.info('BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      webhookBaseUrl: this.WEBHOOK_BASE_URL,
      isLocalDevelopment: process.env.NODE_ENV === 'development',
      component: 'bot-manager'
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –ø–æ projectId
   */
  getBot(projectId: string): BotInstance | undefined {
    return this.bots.get(projectId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  getAllBotsStatus(): Array<{
    projectId: string;
    token: string;
    isActive: boolean;
    isPolling: boolean;
  }> {
    return Array.from(this.bots.entries()).map(([projectId, botInstance]) => ({
      projectId,
      token: '***' + botInstance.bot.token.slice(-4),
      isActive: botInstance.isActive,
      isPolling: botInstance.isPolling
    }));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  getAllBots(): Array<[string, BotInstance]> {
    return Array.from(this.bots.entries());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
   */
  async sendRichBroadcastMessage(
    projectId: string,
    userIds: string[],
    message: string,
    options: {
      imageUrl?: string;
      buttons?: Array<{
        text: string;
        url?: string;
        callback_data?: string;
      }>;
      parseMode?: 'Markdown' | 'HTML';
    } = {}
  ): Promise<{
    success: boolean;
    sentCount: number;
    failedCount: number;
    errors: string[];
  }> {
    try {
      const botInstance = this.bots.get(projectId);
      if (!botInstance || !botInstance.isActive) {
        throw new Error('–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
      }

      const { imageUrl, buttons, parseMode = 'Markdown' } = options;
      let sentCount = 0;
      let failedCount = 0;
      const errors: string[] = [];

      // –°–æ–∑–¥–∞–µ–º inline keyboard –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
      let replyMarkup = undefined;
      if (buttons && buttons.length > 0) {
        const { InlineKeyboard } = await import('grammy');
        const keyboard = new InlineKeyboard();

        buttons.forEach((button, index) => {
          if (button.url) {
            keyboard.url(button.text, button.url);
          } else if (button.callback_data) {
            keyboard.text(button.text, button.callback_data);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
          if ((index + 1) % 2 === 0 && index < buttons.length - 1) {
            keyboard.row();
          }
        });

        replyMarkup = keyboard;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
      const CONCURRENCY = 20; // –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Telegram (30 msg/sec)
      logger.info(
        '–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É',
        {
          projectId,
          recipients: userIds.length,
          hasImage: !!imageUrl,
          buttons: buttons?.length || 0,
          parseMode
        },
        'bot-manager'
      );

      const sendToUser = async (userId: string) => {
        try {
          const user = await db.user.findUnique({ where: { id: userId } });
          if (!user || !user.telegramId) {
            failedCount++;
            errors.push(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram`
            );
            return;
          }

          try {
            if (imageUrl) {
              await botInstance.bot.api.sendPhoto(
                user.telegramId.toString(),
                imageUrl,
                {
                  caption: message,
                  parse_mode: parseMode,
                  reply_markup: replyMarkup
                }
              );
            } else {
              await botInstance.bot.api.sendMessage(
                user.telegramId.toString(),
                message,
                {
                  parse_mode: parseMode,
                  reply_markup: replyMarkup
                }
              );
            }
          } catch (primaryError) {
            // fallback –±–µ–∑ parse_mode –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
            const msg =
              primaryError instanceof Error
                ? primaryError.message
                : String(primaryError);
            if (
              /parse/i.test(msg) ||
              /can't parse/i.test(msg) ||
              /entities/i.test(msg)
            ) {
              if (imageUrl) {
                await botInstance.bot.api.sendPhoto(
                  user.telegramId.toString(),
                  imageUrl,
                  {
                    caption: message,
                    reply_markup: replyMarkup
                  }
                );
              } else {
                await botInstance.bot.api.sendMessage(
                  user.telegramId.toString(),
                  message,
                  {
                    reply_markup: replyMarkup
                  }
                );
              }
            } else {
              throw primaryError;
            }
          }

          sentCount++;
          logger.info(
            `–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
            {
              projectId,
              userId,
              messageLength: message.length,
              hasImage: !!imageUrl,
              buttonsCount: buttons?.length || 0
            },
            'bot-manager'
          );
        } catch (error) {
          failedCount++;
          const errorMsg =
            error instanceof Error ? error.message : 'Unknown error';
          errors.push(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${errorMsg}`);
          logger.error(
            `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
            { projectId, userId, error: errorMsg },
            'bot-manager'
          );
        }
      };

      for (let i = 0; i < userIds.length; i += CONCURRENCY) {
        const batch = userIds.slice(i, i + CONCURRENCY);
        await Promise.allSettled(batch.map((id) => sendToUser(id)));
      }

      logger.info(
        `–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`,
        {
          projectId,
          totalUsers: userIds.length,
          sentCount,
          failedCount,
          errorsCount: errors.length
        },
        'bot-manager'
      );

      return {
        success: sentCount > 0,
        sentCount,
        failedCount,
        errors
      };
    } catch (error) {
      logger.error(
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`,
        {
          projectId,
          error: error instanceof Error ? error.message : 'Unknown error'
        },
        'bot-manager'
      );

      return {
        success: false,
        sentCount: 0,
        failedCount: userIds.length,
        errors: [error instanceof Error ? error.message : 'Unknown error']
      };
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• –±–æ—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
   */
  async emergencyStopBotsWithToken(token: string): Promise<void> {
    logger.info(`üîç –ü–û–ò–°–ö –ë–û–¢–û–í –° –¢–û–ö–ï–ù–û–ú ***${token.slice(-4)}`, {
      token: '***' + token.slice(-4),
      allBots: Array.from(this.bots.entries()).map(([id, bot]) => ({
        projectId: id,
        token: '***' + bot.bot.token.slice(-4),
        isActive: bot.isActive,
        isPolling: bot.isPolling
      })),
      component: 'bot-manager'
    });

    const botsWithToken = Array.from(this.bots.entries()).filter(
      ([_, botInstance]) => botInstance.bot.token === token
    );

    if (botsWithToken.length === 0) {
      logger.info(`‚ÑπÔ∏è –ë–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º ***${token.slice(-4)} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, {
        component: 'bot-manager'
      });
      return;
    }

    logger.warn(`üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–û–í –° –¢–û–ö–ï–ù–û–ú ***${token.slice(-4)}`, {
      botCount: botsWithToken.length,
      projectIds: botsWithToken.map(([id]) => id),
      botsDetails: botsWithToken.map(([id, bot]) => ({
        projectId: id,
        isActive: bot.isActive,
        isPolling: bot.isPolling,
        token: '***' + bot.bot.token.slice(-4)
      })),
      component: 'bot-manager'
    });

    const promises = botsWithToken.map(async ([projectId, botInstance]) => {
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        botInstance.isPolling = false;
        botInstance.isActive = false;

        // –£–¥–∞–ª—è–µ–º webhook
        try {
          await botInstance.bot.api.deleteWebhook({
            drop_pending_updates: true
          });
        } catch (webhookError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ webhook
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        try {
          await botInstance.bot.stop();
        } catch (stopError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã
        this.bots.delete(projectId);

        logger.info(`‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${projectId} - —É—Å–ø–µ—à–Ω–æ`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`‚ùå –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${projectId} - –æ—à–∏–±–∫–∞`, {
          projectId,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          component: 'bot-manager'
        });
      }
    });

    await Promise.allSettled(promises);

    logger.warn(`üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, {
      component: 'bot-manager'
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Telegram API
    await new Promise((resolve) => setTimeout(resolve, 3000));
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• –±–æ—Ç–æ–≤ (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
   */
  async emergencyStopAll(): Promise<void> {
    logger.warn(`üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ë–û–¢–û–í`, {
      botCount: this.bots.size,
      component: 'bot-manager'
    });

    const promises = Array.from(this.bots.keys()).map(async (projectId) => {
      try {
        await this.stopBot(projectId);
        logger.info(`–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${projectId} - —É—Å–ø–µ—à–Ω–æ`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${projectId} - –æ—à–∏–±–∫–∞`, {
          projectId,
          error: error instanceof Error ? error.message : 'Unknown error',
          component: 'bot-manager'
        });
      }
    });

    await Promise.allSettled(promises);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    this.operationLocks.clear();
    this.bots.clear();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Telegram API
    await new Promise(resolve => setTimeout(resolve, 5000));

    logger.warn(`üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, {
      component: 'bot-manager'
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
   * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
   */
  async createBot(
    projectId: string,
    botSettings: BotSettings
  ): Promise<BotInstance> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const existingOperation = this.operationLocks.get(projectId);
    if (existingOperation) {
      logger.info(
        `–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`,
        {
          projectId,
          component: 'bot-manager'
        }
      );
      return existingOperation;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    const operation = this._createBotInternal(projectId, botSettings);
    this.operationLocks.set(projectId, operation);

    try {
      const result = await operation;
      return result;
    } finally {
      // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.operationLocks.delete(projectId);
    }
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
   */
  private async _createBotInternal(
    projectId: string,
    botSettings: BotSettings
  ): Promise<BotInstance> {
    try {
      logger.info(`üöÄ –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ${projectId}`, {
        projectId,
        token: '***' + botSettings.botToken.slice(-4),
        username: botSettings.botUsername,
        existingBots: Array.from(this.bots.keys()),
        existingTokens: Array.from(this.bots.values()).map(b => '***' + b.bot.token.slice(-4)),
        component: 'bot-manager'
      });

      // –ö–†–ò–¢–ò–ß–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      await this.stopBot(projectId);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Telegram API
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const bot = createBot(botSettings.botToken, projectId, botSettings);

      // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Grammy
      await bot.init();
      logger.info(`‚úÖ –ë–û–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù: @${bot.botInfo.username}`, {
        projectId,
        token: '***' + botSettings.botToken.slice(-4),
        botId: bot.botInfo.id,
        username: bot.botInfo.username,
        firstName: bot.botInfo.first_name,
        allBotsInManager: this.getAllBotsStatus(),
        component: 'bot-manager'
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ webhook: –Ω—É–∂–µ–Ω HTTPS.
      // –ï—Å–ª–∏ HTTPS –Ω–µ—Ç (IP/HTTP), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling.
      const isWebhookCapable = this.WEBHOOK_BASE_URL.startsWith('https://');
      const isLocalDevelopment = process.env.NODE_ENV === 'development';
      
      // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
      if (isLocalDevelopment) {
        logger.info('üè† –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling', {
          projectId,
          webhookBaseUrl: this.WEBHOOK_BASE_URL,
          component: 'bot-manager'
        });
        
        // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        try {
          await bot.api.deleteWebhook({ drop_pending_updates: true });
          logger.info('‚úÖ Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', {
            projectId,
            component: 'bot-manager'
          });
        } catch (webhookError) {
          logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)', {
            projectId,
            error: webhookError instanceof Error ? webhookError.message : 'Unknown',
            component: 'bot-manager'
          });
        }
      }

      const finalMode = isLocalDevelopment ? 'Local Development (polling)' : 
                       isWebhookCapable ? 'Production (webhook)' : 'Polling (no-https)';
      
      logger.info(`–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${finalMode}`, {
        projectId,
        isDev: !isWebhookCapable,
        isLocalDevelopment,
        baseUrl: this.WEBHOOK_BASE_URL,
        nodeEnv: process.env.NODE_ENV,
        component: 'bot-manager'
      });

      let webhook = null;
      let isPolling = false;

      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ä–µ–¥—ã
      if (isLocalDevelopment) {
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        logger.info('üè† –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º polling', {
          projectId,
          component: 'bot-manager'
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º grammY runner (long polling, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
        try {
          logger.info(`üöÄ –ó–ê–ü–£–°–ö GRAMMY RUNNER (–õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê)`, {
            projectId,
            token: '***' + bot.token.slice(-4),
            botInfo: bot.botInfo ? {
              id: bot.botInfo.id,
              username: bot.botInfo.username,
              firstName: bot.botInfo.first_name
            } : null,
            component: 'bot-manager'
          });

          void run(bot); // runner —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç polling –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é

          isPolling = true;
          logger.info(`‚úÖ RUNNER –ò–ù–ò–¶–ò–ò–†–û–í–ê–ù (–õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê)`, {
            projectId,
            token: '***' + bot.token.slice(-4),
            component: 'bot-manager'
          });
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

          if (errorMessage.includes('409') || errorMessage.includes('terminated by other getUpdates')) {
            logger.error('‚ùå 409 –ö–û–ù–§–õ–ò–ö–¢ –ü–†–ò –õ–û–ö–ê–õ–¨–ù–û–ú –ó–ê–ü–£–°–ö–ï', {
              projectId,
              token: '***' + bot.token.slice(-4),
              error: errorMessage,
              allBotsInManager: this.getAllBotsStatus(),
              component: 'bot-manager'
            });
            
            // –°–æ–∑–¥–∞–µ–º BotInstance –¥–∞–∂–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ, –Ω–æ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞
            const botInstance: BotInstance = {
              bot,
              webhook: null, // null –≤ dev —Ä–µ–∂–∏–º–µ (polling)
              isActive: false,
              isPolling: false,
              lastUpdated: new Date(),
              projectId
            };
            
            this.bots.set(projectId, botInstance);
            return botInstance;
          }
          
          logger.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', {
            projectId,
            description: errorMessage,
            component: 'bot-manager'
          });
          throw error;
        }
      } else if (!isWebhookCapable) {
        // –ë–µ–∑ HTTPS: –∏—Å–ø–æ–ª—å–∑—É–µ–º polling (webhook –ø–æ—Ç—Ä–µ–±—É–µ—Ç TLS)
        logger.info(`Development —Ä–µ–∂–∏–º: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞`, {
          projectId,
          component: 'bot-manager'
        });

        // –û—á–∏—â–∞–µ–º webhook –¥–ª—è polling —Ä–µ–∂–∏–º–∞
        try {
          await bot.api.deleteWebhook({ drop_pending_updates: true });
          logger.info(`Webhook –æ—á–∏—â–µ–Ω –¥–ª—è polling —Ä–µ–∂–∏–º–∞`, {
            projectId,
            component: 'bot-manager'
          });
        } catch (error) {
          logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook`, {
            projectId,
            error:
              error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.catch((err) => {
          const ctx = err.ctx;
          const e = err.error;

          logger.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx?.update?.update_id}:`,
            {
              projectId,
              error: e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
              component: 'bot-manager'
            }
          );

          if (e instanceof GrammyError) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 (–∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates)
            if (e.error_code === 409) {
              logger.error('‚ùå 409 –ö–û–ù–§–õ–ò–ö–¢ GETUPDATES', {
                projectId,
                token: '***' + bot.token.slice(-4),
                description: e.description,
                error_code: e.error_code,
                allBotsInManager: Array.from(this.bots.entries()).map(([pid, botInstance]) => ({
                  projectId: pid,
                  token: '***' + botInstance.bot.token.slice(-4),
                  isActive: botInstance.isActive,
                  isPolling: botInstance.isPolling
                })),
                component: 'bot-manager'
              });
              
              // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
              return;
            }
            
            logger.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', {
              projectId,
              description: e.description,
              error_code: e.error_code,
              component: 'bot-manager'
            });
          } else if (e instanceof HttpError) {
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:', {
              projectId,
              error: e.message,
              component: 'bot-manager'
            });
          } else {
            logger.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', {
              projectId,
              error: e instanceof Error ? e.message : String(e),
              component: 'bot-manager'
            });
          }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è polling
        const existingBot = Array.from(this.bots.values()).find(
          (botInstance) =>
            botInstance.bot.token === bot.token &&
            botInstance.projectId !== projectId &&
            botInstance.isPolling
        );

        if (existingBot) {
          logger.warn(
            `–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ ${existingBot.projectId}`,
            {
              projectId,
              existingProjectId: existingBot.projectId,
              component: 'bot-manager'
            }
          );
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç
          try {
            await this.stopBot(existingBot.projectId);
            logger.info(`–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, {
              projectId: existingBot.projectId,
              component: 'bot-manager'
            });
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–æ—Ç–∞`, {
              projectId: existingBot.projectId,
              error: error instanceof Error ? error.message : 'Unknown error',
              component: 'bot-manager'
            });
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º
        const remainingConflict = Array.from(this.bots.values()).find(
          (botInstance) =>
            botInstance.bot.token === bot.token &&
            botInstance.projectId !== projectId
        );

        if (!remainingConflict) {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
          try {
            await bot.api.deleteWebhook({ drop_pending_updates: true });
            logger.info(`Webhook —É–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling`, {
              projectId,
              component: 'bot-manager'
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Telegram API
            await new Promise(resolve => setTimeout(resolve, 2000));
          } catch (error) {
            logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook –ø–µ—Ä–µ–¥ polling`, {
              projectId,
              error: error instanceof Error ? error.message : 'Unknown error',
              component: 'bot-manager'
            });
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º grammY runner (long polling, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
          try {
            logger.info(`üöÄ –ó–ê–ü–£–°–ö GRAMMY RUNNER`, {
              projectId,
              token: '***' + bot.token.slice(-4),
              botInfo: bot.botInfo ? {
                id: bot.botInfo.id,
                username: bot.botInfo.username,
                firstName: bot.botInfo.first_name
              } : null,
              component: 'bot-manager'
            });

            void run(bot); // runner —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç polling –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é

            isPolling = true;
            logger.info(`‚úÖ RUNNER –ò–ù–ò–¶–ò–ò–†–û–í–ê–ù (POLLING)`, {
              projectId,
              token: '***' + bot.token.slice(-4),
              component: 'bot-manager'
            });
          } catch (error) {
            const errorMessage =
              error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

            if (
              errorMessage.includes('409') ||
              errorMessage.includes('terminated by other getUpdates')
            ) {
              logger.error('‚ùå 409 –ö–û–ù–§–õ–ò–ö–¢ –ü–†–ò –õ–û–ö–ê–õ–¨–ù–û–ú –ó–ê–ü–£–°–ö–ï', {
                projectId,
                token: '***' + bot.token.slice(-4),
                error: errorMessage,
                allBotsInManager: this.getAllBotsStatus(),
                component: 'bot-manager'
              });
              
              // –°–æ–∑–¥–∞–µ–º BotInstance –¥–∞–∂–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ, –Ω–æ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞
              const botInstance: BotInstance = {
                bot,
                webhook: null, // null –≤ dev —Ä–µ–∂–∏–º–µ (polling)
                isActive: false,
                isPolling: false,
                lastUpdated: new Date(),
                projectId
              };
              
              this.bots.set(projectId, botInstance);
              return botInstance;
            } else {
              logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling`, {
                projectId,
                error: errorMessage,
                component: 'bot-manager'
              });
              throw error;
            }
          }
        }
      } else {
        // Production —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º webhook callback –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        logger.info(`Production —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–µ–º webhook callback –¥–ª—è –±–æ—Ç–∞`, {
          projectId,
          component: 'bot-manager'
        });
        webhook = webhookCallback(bot, 'std/http');
        // Production —Ä–µ–∂–∏–º - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å HTTPS
        const webhookUrl = `${this.WEBHOOK_BASE_URL}/api/telegram/webhook/${projectId}`;
        if (webhookUrl.startsWith('https://')) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è webhook
          const existingWebhookBot = Array.from(this.bots.values()).find(
            (botInstance) =>
              botInstance.bot.token === bot.token &&
              botInstance.projectId !== projectId &&
              !botInstance.isPolling
          );

          if (existingWebhookBot) {
            logger.warn(
              `–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤ webhook: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ ${existingWebhookBot.projectId}`,
              {
                projectId,
                existingProjectId: existingWebhookBot.projectId,
                component: 'bot-manager'
              }
            );
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç
            try {
              await this.stopBot(existingWebhookBot.projectId);
              logger.info(`–ü—Ä–µ–¥—ã–¥—É—â–∏–π webhook –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, {
                projectId: existingWebhookBot.projectId,
                component: 'bot-manager'
              });
            } catch (error) {
              logger.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ webhook –±–æ—Ç–∞`, {
                projectId: existingWebhookBot.projectId,
                error: error instanceof Error ? error.message : 'Unknown error',
                component: 'bot-manager'
              });
            }
          }

          try {
            logger.info(`Production —Ä–µ–∂–∏–º: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              webhookUrl,
              component: 'bot-manager'
            });

            await bot.api.setWebhook(webhookUrl, {
              allowed_updates: [
                'message',
                'callback_query',
                'inline_query',
                'chosen_inline_result'
              ],
              drop_pending_updates: true
            });

            logger.info(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              webhookUrl,
              component: 'bot-manager'
            });
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              error:
                error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
              component: 'bot-manager'
            });
          }
        } else {
          // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–µ–π—Å —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥—ë—Ç, —Ç–∞–∫ –∫–∞–∫ isWebhookCapable=true —Ç–æ–ª—å–∫–æ –ø—Ä–∏ https
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º BotInstance –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const botInstance: BotInstance = {
        bot,
        webhook: webhook as any, // null –≤ dev —Ä–µ–∂–∏–º–µ, webhookCallback –≤ prod —Ä–µ–∂–∏–º–µ
        isActive: botSettings.isActive,
        projectId,
        lastUpdated: new Date(),
        isPolling // true –≤ dev (polling), false –≤ prod (webhook)
      };

      this.bots.set(projectId, botInstance);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º isActive –≤ –ë–î –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
      try {
        await db.botSettings.update({
          where: { projectId },
          data: { isActive: true }
        });
        logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î (isActive=true)`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (dbError) {
        logger.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –ë–î`, {
          projectId,
          error: dbError instanceof Error ? dbError.message : 'Unknown error',
          component: 'bot-manager'
        });
      }
      
      logger.info(`–ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, {
        projectId,
        mode: isPolling ? 'polling' : 'webhook',
        isPolling,
        hasWebhook: !!webhook,
        component: 'bot-manager'
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
      try {
        const botInfo = await bot.api.getMe();
        logger.info(`–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ ${projectId}:`, {
          projectId,
          botId: botInfo.id,
          username: botInfo.username,
          canJoinGroups: botInfo.can_join_groups,
          canReadAllGroupMessages: botInfo.can_read_all_group_messages,
          supportsInlineQueries: botInfo.supports_inline_queries,
          mode: isPolling ? 'polling' : 'webhook',
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ${projectId}:`, {
          projectId,
          error: error instanceof Error ? error.message : 'Unknown',
          component: 'bot-manager'
        });
      }

      return botInstance;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`, {
        projectId,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        component: 'bot-manager'
      });
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
   */
  async updateBot(
    projectId: string,
    botSettings: BotSettings
  ): Promise<BotInstance> {
    const existingBot = this.bots.get(projectId);

    logger.info('üîÑ UPDATE BOT –í–´–ó–í–ê–ù', {
      projectId,
      existingBot: existingBot ? {
        token: '***' + existingBot.bot.token.slice(-4),
        isActive: existingBot.isActive,
        isPolling: existingBot.isPolling
      } : null,
      newToken: '***' + botSettings.botToken.slice(-4),
      allBotsInManager: this.getAllBotsStatus(),
      component: 'bot-manager'
    });

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–æ—Ç, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!existingBot || existingBot.bot.token !== botSettings.botToken) {
      logger.info('üîÑ –¢–û–ö–ï–ù –ë–û–¢–ê –ò–ó–ú–ï–ù–ò–õ–°–Ø, –ü–ï–†–ï–°–û–ó–î–ê–ï–ú –ë–û–¢–ê', {
        projectId,
        oldToken: existingBot?.bot.token ? '***' + existingBot.bot.token.slice(-4) : 'none',
        newToken: '***' + botSettings.botToken.slice(-4),
        component: 'bot-manager'
      });

      // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
      if (existingBot) {
        try {
          await this.stopBot(projectId);
          logger.info('–°—Ç–∞—Ä—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞', {
            projectId,
            component: 'bot-manager'
          });
        } catch (error) {
          logger.warn('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ', {
            projectId,
            error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
        }
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã –±–æ—Ç–æ–≤
      this.bots.delete(projectId);

      // –ñ–¥–µ–º –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      await new Promise(resolve => setTimeout(resolve, 3000));

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç
      return this.createBot(projectId, botSettings);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    existingBot.isActive = botSettings.isActive;
    existingBot.lastUpdated = new Date();

    // –ï—Å–ª–∏ –±–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (!botSettings.isActive) {
      try {
        await this.stopBot(projectId);
        logger.info(`–ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ ${projectId}`, {
          projectId,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          component: 'bot-manager'
        });
      }
    }

    this.bots.set(projectId, existingBot);
    return existingBot;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
   */
  async stopBot(projectId: string): Promise<void> {
    const botInstance = this.bots.get(projectId);

    if (botInstance) {
      try {
        logger.info(`üö® –§–û–†–°–ò–†–û–í–ê–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê ${projectId}`, {
          projectId,
          token: '***' + botInstance.bot.token.slice(-4),
          isPolling: botInstance.isPolling,
          isActive: botInstance.isActive,
          component: 'bot-manager'
        });

        // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –°–†–ê–ó–£
        botInstance.isPolling = false;
        botInstance.isActive = false;

        // –£–¥–∞–ª—è–µ–º webhook –ü–ï–†–í–´–ú –¥–µ–ª–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        try {
          await botInstance.bot.api.deleteWebhook({
            drop_pending_updates: true
          });
          logger.info(`‚úÖ Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            component: 'bot-manager'
          });
        } catch (webhookError) {
          logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            error: webhookError instanceof Error ? webhookError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try {
          const stopPromise = botInstance.bot.stop();
          const timeoutPromise = new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Stop timeout')), 1000)
          );

          await Promise.race([stopPromise, timeoutPromise]);
          logger.info(`‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            component: 'bot-manager'
          });
        } catch (stopError) {
          logger.warn(`‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ polling –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            error: stopError instanceof Error ? stopError.message : 'Timeout',
            component: 'bot-manager'
          });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Telegram API
        await new Promise(resolve => setTimeout(resolve, 2000));

      } catch (error) {
        logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${projectId}`, {
          projectId,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          component: 'bot-manager'
        });
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ map –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      this.bots.delete(projectId);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º isActive –≤ –ë–î –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
      try {
        await db.botSettings.update({
          where: { projectId },
          data: { isActive: false }
        });
        logger.info(`‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î (isActive=false)`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (dbError) {
        logger.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –ë–î`, {
          projectId,
          error: dbError instanceof Error ? dbError.message : 'Unknown error',
          component: 'bot-manager'
        });
      }
      
      logger.info(`üóëÔ∏è –ë–æ—Ç ${projectId} —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞`, {
        projectId,
        component: 'bot-manager'
      });
    } else {
      logger.info(`‚ÑπÔ∏è –ë–æ—Ç ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ`, {
        projectId,
        component: 'bot-manager'
      });
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async loadAllBots(): Promise<void> {
    try {
      const allBotSettings = await db.botSettings.findMany({
        where: { isActive: true },
        include: { project: true }
      });

      logger.info(`–ó–∞–≥—Ä—É–∑–∫–∞ ${allBotSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...`, {
        component: 'bot-manager'
      });

      for (const botSettings of allBotSettings) {
        try {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BotManager
          const botSettingsForManager = {
            ...botSettings,
            welcomeMessage:
              typeof botSettings.welcomeMessage === 'string'
                ? botSettings.welcomeMessage
                : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
          };
          await this.createBot(
            botSettings.projectId,
            botSettingsForManager as any
          );
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botSettings.projectId}`, {
            projectId: botSettings.projectId,
            error:
              error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
        }
      }

      logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.bots.size} –±–æ—Ç–æ–≤`, {
        component: 'bot-manager'
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', {
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        component: 'bot-manager'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤
   */
  getStats() {
    const total = this.bots.size;
    const active = Array.from(this.bots.values()).filter(
      (bot) => bot.isActive
    ).length;
    const inactive = total - active;

    return {
      total,
      active,
      inactive,
      bots: Array.from(this.bots.entries()).map(([projectId, instance]) => ({
        projectId,
        isActive: instance.isActive,
        isPolling: instance.isPolling || false,
        lastUpdated: instance.lastUpdated
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  getBotInstance(projectId: string): BotInstance | undefined {
    return this.bots.get(projectId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ webhook handler –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   * –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç webhook (unified webhook architecture)
   */
  getWebhookHandler(projectId: string) {
    const botInstance = this.bots.get(projectId);

    if (!botInstance || !botInstance.isActive) {
      logger.warn(`Bot instance –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`, {
        projectId,
        exists: !!botInstance,
        isActive: botInstance?.isActive,
        component: 'bot-manager'
      });
      return null;
    }

    if (!botInstance.webhook) {
      logger.error(`Webhook handler –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞`, {
        projectId,
        component: 'bot-manager'
      });
      return null;
    }

    logger.info(`Webhook handler –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞`, {
      projectId,
      component: 'bot-manager'
    });

    return botInstance.webhook;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
   */
  async checkBotHealth(projectId: string): Promise<{
    isRunning: boolean;
    webhookInfo?: any;
    error?: string;
  }> {
    const botInstance = this.bots.get(projectId);

    if (!botInstance) {
      return { isRunning: false, error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    try {
      const webhookInfo = await botInstance.bot.api.getWebhookInfo();
      return {
        isRunning: true,
        webhookInfo
      };
    } catch (error) {
      return {
        isRunning: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const globalForBotManager = globalThis as unknown as {
  botManager: BotManager | undefined;
};

export const botManager = globalForBotManager.botManager ?? new BotManager();

if (process.env.NODE_ENV !== 'production') {
  globalForBotManager.botManager = botManager;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
// –û–¢–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É - –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
// botManager.loadAllBots().catch(error => {
//   logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', {
//     error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
//     component: 'bot-manager'
//   });
// });

