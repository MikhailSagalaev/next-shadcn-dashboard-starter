/**
 * @file: src/lib/telegram/bot-manager.ts
 * @description: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ Telegram –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, Node.js Map
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤

import {
  Bot,
  Context,
  SessionFlavor,
  webhookCallback,
  GrammyError,
  HttpError
} from 'grammy';
import { createBot } from './bot';
import { db } from '@/lib/db';
import { logger } from '@/lib/logger';
import type { BotSettings } from '@/types/bonus';
import { setupGlobalErrorHandler } from './global-error-handler';

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å bot.ts)
interface SessionData {
  step?: string;
  projectId?: string;
  awaitingContact?: boolean;
}

type MyContext = Context & SessionFlavor<SessionData>;

interface BotInstance {
  bot: Bot<MyContext>;
  webhook: ReturnType<typeof webhookCallback> | null; // null –≤ dev —Ä–µ–∂–∏–º–µ (polling), webhookCallback –≤ prod —Ä–µ–∂–∏–º–µ
  isActive: boolean;
  projectId: string;
  lastUpdated: Date;
  isPolling?: boolean; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
class BotManager {
  private bots: Map<string, BotInstance> = new Map();
  private readonly WEBHOOK_BASE_URL: string;
  private readonly operationLocks: Map<string, Promise<any>> = new Map();

  constructor() {
    this.WEBHOOK_BASE_URL =
      process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:5006';

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    setupGlobalErrorHandler();

    logger.info('BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      webhookBaseUrl: this.WEBHOOK_BASE_URL,
      component: 'bot-manager'
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –ø–æ projectId
   */
  getBot(projectId: string): BotInstance | undefined {
    return this.bots.get(projectId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  getAllBots(): Array<[string, BotInstance]> {
    return Array.from(this.bots.entries());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
   */
  async sendRichBroadcastMessage(
    projectId: string,
    userIds: string[],
    message: string,
    options: {
      imageUrl?: string;
      buttons?: Array<{
        text: string;
        url?: string;
        callback_data?: string;
      }>;
      parseMode?: 'Markdown' | 'HTML';
    } = {}
  ): Promise<{
    success: boolean;
    sentCount: number;
    failedCount: number;
    errors: string[];
  }> {
    try {
      const botInstance = this.bots.get(projectId);
      if (!botInstance || !botInstance.isActive) {
        throw new Error('–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
      }

      const { imageUrl, buttons, parseMode = 'Markdown' } = options;
      let sentCount = 0;
      let failedCount = 0;
      const errors: string[] = [];

      // –°–æ–∑–¥–∞–µ–º inline keyboard –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
      let replyMarkup = undefined;
      if (buttons && buttons.length > 0) {
        const { InlineKeyboard } = await import('grammy');
        const keyboard = new InlineKeyboard();

        buttons.forEach((button, index) => {
          if (button.url) {
            keyboard.url(button.text, button.url);
          } else if (button.callback_data) {
            keyboard.text(button.text, button.callback_data);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
          if ((index + 1) % 2 === 0 && index < buttons.length - 1) {
            keyboard.row();
          }
        });

        replyMarkup = keyboard;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      for (const userId of userIds) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
          const user = await db.user.findUnique({
            where: { id: userId }
          });

          if (!user || !user.telegramId) {
            failedCount++;
            errors.push(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram`
            );
            continue;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (imageUrl) {
            await botInstance.bot.api.sendPhoto(
              user.telegramId.toString(),
              imageUrl,
              {
                caption: message,
                parse_mode: parseMode,
                reply_markup: replyMarkup
              }
            );
          } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await botInstance.bot.api.sendMessage(
              user.telegramId.toString(),
              message,
              {
                parse_mode: parseMode,
                reply_markup: replyMarkup
              }
            );
          }

          sentCount++;
          logger.info(
            `–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
            {
              projectId,
              userId,
              messageLength: message.length,
              hasImage: !!imageUrl,
              buttonsCount: buttons?.length || 0
            },
            'bot-manager'
          );
        } catch (error) {
          failedCount++;
          const errorMsg =
            error instanceof Error ? error.message : 'Unknown error';
          errors.push(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${errorMsg}`);
          logger.error(
            `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
            {
              projectId,
              userId,
              error: errorMsg
            },
            'bot-manager'
          );
        }
      }

      logger.info(
        `–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`,
        {
          projectId,
          totalUsers: userIds.length,
          sentCount,
          failedCount,
          errorsCount: errors.length
        },
        'bot-manager'
      );

      return {
        success: sentCount > 0,
        sentCount,
        failedCount,
        errors
      };
    } catch (error) {
      logger.error(
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`,
        {
          projectId,
          error: error instanceof Error ? error.message : 'Unknown error'
        },
        'bot-manager'
      );

      return {
        success: false,
        sentCount: 0,
        failedCount: userIds.length,
        errors: [error instanceof Error ? error.message : 'Unknown error']
      };
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• –±–æ—Ç–æ–≤ (–¥–ª—è —Ä–µ—à–µ–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
   */
  async emergencyStopAll(): Promise<void> {
    logger.warn(`üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ë–û–¢–û–í`, {
      botCount: this.bots.size,
      component: 'bot-manager'
    });

    const promises = Array.from(this.bots.keys()).map(async (projectId) => {
      try {
        await this.stopBot(projectId);
        logger.info(`–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${projectId} - —É—Å–ø–µ—à–Ω–æ`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${projectId} - –æ—à–∏–±–∫–∞`, {
          projectId,
          error: error instanceof Error ? error.message : 'Unknown error',
          component: 'bot-manager'
        });
      }
    });

    await Promise.allSettled(promises);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    this.operationLocks.clear();
    this.bots.clear();

    logger.warn(`üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, {
      component: 'bot-manager'
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Telegram API
    await new Promise((resolve) => setTimeout(resolve, 3000));
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
   * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
   */
  async createBot(
    projectId: string,
    botSettings: BotSettings
  ): Promise<BotInstance> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const existingOperation = this.operationLocks.get(projectId);
    if (existingOperation) {
      logger.info(
        `–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`,
        {
          projectId,
          component: 'bot-manager'
        }
      );
      return existingOperation;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    const operation = this._createBotInternal(projectId, botSettings);
    this.operationLocks.set(projectId, operation);

    try {
      const result = await operation;
      return result;
    } finally {
      // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.operationLocks.delete(projectId);
    }
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
   */
  private async _createBotInternal(
    projectId: string,
    botSettings: BotSettings
  ): Promise<BotInstance> {
    try {
      // –ö–†–ò–¢–ò–ß–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      await this.stopBot(projectId);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Telegram API
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const bot = createBot(botSettings.botToken, projectId, botSettings);

      // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Grammy
      await bot.init();
      logger.info(`–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @${bot.botInfo.username}`, {
        projectId,
        botId: bot.botInfo.id,
        username: bot.botInfo.username,
        component: 'bot-manager'
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º dev —Ä–µ–∂–∏–º –ø–æ localhost URL –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º webhook callback
      const isDev =
        this.WEBHOOK_BASE_URL.includes('localhost') ||
        this.WEBHOOK_BASE_URL.includes('127.0.0.1');

      logger.info(
        `–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${isDev ? 'Development (polling)' : 'Production (webhook)'}`,
        {
          projectId,
          isDev,
          baseUrl: this.WEBHOOK_BASE_URL,
          nodeEnv: process.env.NODE_ENV,
          component: 'bot-manager'
        }
      );

      let webhook = null;
      let isPolling = false;

      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ä–µ–¥—ã
      if (isDev) {
        // Development: –∏—Å–ø–æ–ª—å–∑—É–µ–º polling (webhook —Ç—Ä–µ–±—É–µ—Ç HTTPS)
        logger.info(`Development —Ä–µ–∂–∏–º: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞`, {
          projectId,
          component: 'bot-manager'
        });

        // –û—á–∏—â–∞–µ–º webhook –¥–ª—è polling —Ä–µ–∂–∏–º–∞
        try {
          await bot.api.deleteWebhook({ drop_pending_updates: true });
          logger.info(`Webhook –æ—á–∏—â–µ–Ω –¥–ª—è polling —Ä–µ–∂–∏–º–∞`, {
            projectId,
            component: 'bot-manager'
          });
        } catch (error) {
          logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook`, {
            projectId,
            error:
              error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot.catch((err) => {
          const ctx = err.ctx;
          const e = err.error;

          logger.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx?.update?.update_id}:`,
            {
              projectId,
              error: e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
              component: 'bot-manager'
            }
          );

          if (e instanceof GrammyError) {
            logger.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', {
              projectId,
              description: e.description,
              error_code: e.error_code,
              component: 'bot-manager'
            });
          } else if (e instanceof HttpError) {
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:', {
              projectId,
              error: e.message,
              component: 'bot-manager'
            });
          } else {
            logger.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', {
              projectId,
              error: e instanceof Error ? e.message : String(e),
              component: 'bot-manager'
            });
          }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è polling
        const existingBot = Array.from(this.bots.values()).find(
          (botInstance) =>
            botInstance.bot.token === bot.token &&
            botInstance.projectId !== projectId &&
            botInstance.isPolling
        );

        if (existingBot) {
          logger.warn(
            `–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤: –±–æ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ ${existingBot.projectId}`,
            {
              projectId,
              existingProjectId: existingBot.projectId,
              component: 'bot-manager'
            }
          );
          // –°–æ–∑–¥–∞–µ–º –±–æ—Ç –±–µ–∑ polling –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
          isPolling = false;
        } else {
          // –ó–∞–ø—É—Å–∫–∞–µ–º polling
          try {
            logger.info(`–ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              component: 'bot-manager'
            });

            await bot.start({
              onStart: (botInfo) => {
                logger.info(`Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ @${botInfo.username}`, {
                  projectId,
                  botId: botInfo.id,
                  username: botInfo.username,
                  component: 'bot-manager'
                });
              },
              drop_pending_updates: true
            });

            isPolling = true;
            logger.info(`Polling —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, {
              projectId,
              component: 'bot-manager'
            });
          } catch (error) {
            const errorMessage =
              error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

            if (
              errorMessage.includes('409') ||
              errorMessage.includes('terminated by other getUpdates')
            ) {
              logger.warn(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç polling: —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`, {
                projectId,
                error: errorMessage,
                component: 'bot-manager'
              });
            } else {
              logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling`, {
                projectId,
                error: errorMessage,
                component: 'bot-manager'
              });
              throw error;
            }
            isPolling = false;
          }
        }
      } else {
        // Production —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º webhook callback –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        logger.info(`Production —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–µ–º webhook callback –¥–ª—è –±–æ—Ç–∞`, {
          projectId,
          component: 'bot-manager'
        });
        webhook = webhookCallback(bot, 'std/http');
        // Production —Ä–µ–∂–∏–º - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å HTTPS
        const webhookUrl = `${this.WEBHOOK_BASE_URL}/api/telegram/webhook/${projectId}`;

        if (!webhookUrl.startsWith('https://')) {
          logger.warn(`HTTPS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è webhook –≤ production`, {
            projectId,
            webhookUrl,
            component: 'bot-manager'
          });
          logger.warn(
            `–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ webhook (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)`,
            {
              projectId,
              component: 'bot-manager'
            }
          );
        } else {
          try {
            logger.info(`Production —Ä–µ–∂–∏–º: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              webhookUrl,
              component: 'bot-manager'
            });

            await bot.api.setWebhook(webhookUrl, {
              allowed_updates: [
                'message',
                'callback_query',
                'inline_query',
                'chosen_inline_result'
              ],
              drop_pending_updates: true
            });

            logger.info(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              webhookUrl,
              component: 'bot-manager'
            });
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è –±–æ—Ç–∞`, {
              projectId,
              error:
                error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
              component: 'bot-manager'
            });
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º BotInstance –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const botInstance: BotInstance = {
        bot,
        webhook: webhook as any, // null –≤ dev —Ä–µ–∂–∏–º–µ, webhookCallback –≤ prod —Ä–µ–∂–∏–º–µ
        isActive: botSettings.isActive,
        projectId,
        lastUpdated: new Date(),
        isPolling // true –≤ dev (polling), false –≤ prod (webhook)
      };

      this.bots.set(projectId, botInstance);
      logger.info(`–ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, {
        projectId,
        mode: isPolling ? 'polling' : 'webhook',
        isPolling,
        hasWebhook: !!webhook,
        component: 'bot-manager'
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
      try {
        const botInfo = await bot.api.getMe();
        logger.info(`–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ ${projectId}:`, {
          projectId,
          botId: botInfo.id,
          username: botInfo.username,
          canJoinGroups: botInfo.can_join_groups,
          canReadAllGroupMessages: botInfo.can_read_all_group_messages,
          supportsInlineQueries: botInfo.supports_inline_queries,
          mode: isPolling ? 'polling' : 'webhook',
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ ${projectId}:`, {
          projectId,
          error: error instanceof Error ? error.message : 'Unknown',
          component: 'bot-manager'
        });
      }

      return botInstance;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`, {
        projectId,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        component: 'bot-manager'
      });
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
   */
  async updateBot(
    projectId: string,
    botSettings: BotSettings
  ): Promise<BotInstance> {
    const existingBot = this.bots.get(projectId);

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç
    if (!existingBot || existingBot.bot.token !== botSettings.botToken) {
      return this.createBot(projectId, botSettings);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    existingBot.isActive = botSettings.isActive;
    existingBot.lastUpdated = new Date();

    // –ï—Å–ª–∏ –±–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (!botSettings.isActive) {
      try {
        await this.stopBot(projectId);
        logger.info(`–ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, {
          projectId,
          component: 'bot-manager'
        });
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ ${projectId}`, {
          projectId,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          component: 'bot-manager'
        });
      }
    }

    this.bots.set(projectId, existingBot);
    return existingBot;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
   */
  async stopBot(projectId: string): Promise<void> {
    const botInstance = this.bots.get(projectId);

    if (botInstance) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const wasPolling = botInstance.isPolling;

        // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        botInstance.isPolling = false;
        botInstance.isActive = false;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if (wasPolling) {
          logger.info(`–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            component: 'bot-manager'
          });

          try {
            // –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
            const stopPromise = botInstance.bot.stop();
            const timeoutPromise = new Promise((_, reject) =>
              setTimeout(() => reject(new Error('Stop timeout')), 2000)
            );

            await Promise.race([stopPromise, timeoutPromise]);

            logger.info(`Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
              projectId,
              component: 'bot-manager'
            });
          } catch (stopError) {
            logger.warn(
              `–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ polling –¥–ª—è –±–æ—Ç–∞ ${projectId}`,
              {
                projectId,
                error:
                  stopError instanceof Error ? stopError.message : 'Timeout',
                component: 'bot-manager'
              }
            );
          }
        } else {
          logger.info(`–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            component: 'bot-manager'
          });
        }

        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º webhook –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        try {
          await botInstance.bot.api.deleteWebhook({
            drop_pending_updates: true
          });
          logger.info(`Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            component: 'bot-manager'
          });
        } catch (webhookError) {
          logger.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook –¥–ª—è –±–æ—Ç–∞ ${projectId}`, {
            projectId,
            error:
              webhookError instanceof Error
                ? webhookError.message
                : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ webhook –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
        }
      } catch (error) {
        logger.warn(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${projectId}`, {
          projectId,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          component: 'bot-manager'
        });
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –∏–∑ map –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      this.bots.delete(projectId);
      logger.info(`–ë–æ—Ç ${projectId} —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞`, {
        projectId,
        component: 'bot-manager'
      });
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async loadAllBots(): Promise<void> {
    try {
      const allBotSettings = await db.botSettings.findMany({
        where: { isActive: true },
        include: { project: true }
      });

      logger.info(`–ó–∞–≥—Ä—É–∑–∫–∞ ${allBotSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...`, {
        component: 'bot-manager'
      });

      for (const botSettings of allBotSettings) {
        try {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BotManager
          const botSettingsForManager = {
            ...botSettings,
            welcomeMessage:
              typeof botSettings.welcomeMessage === 'string'
                ? botSettings.welcomeMessage
                : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
          };
          await this.createBot(
            botSettings.projectId,
            botSettingsForManager as any
          );
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ ${botSettings.projectId}`, {
            projectId: botSettings.projectId,
            error:
              error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            component: 'bot-manager'
          });
        }
      }

      logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.bots.size} –±–æ—Ç–æ–≤`, {
        component: 'bot-manager'
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', {
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        component: 'bot-manager'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤
   */
  getStats() {
    const total = this.bots.size;
    const active = Array.from(this.bots.values()).filter(
      (bot) => bot.isActive
    ).length;
    const inactive = total - active;

    return {
      total,
      active,
      inactive,
      bots: Array.from(this.bots.entries()).map(([projectId, instance]) => ({
        projectId,
        isActive: instance.isActive,
        isPolling: instance.isPolling || false,
        lastUpdated: instance.lastUpdated
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  getBotInstance(projectId: string): BotInstance | undefined {
    return this.bots.get(projectId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ webhook handler –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   * –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç webhook (unified webhook architecture)
   */
  getWebhookHandler(projectId: string) {
    const botInstance = this.bots.get(projectId);

    if (!botInstance || !botInstance.isActive) {
      logger.warn(`Bot instance –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`, {
        projectId,
        exists: !!botInstance,
        isActive: botInstance?.isActive,
        component: 'bot-manager'
      });
      return null;
    }

    if (!botInstance.webhook) {
      logger.error(`Webhook handler –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞`, {
        projectId,
        component: 'bot-manager'
      });
      return null;
    }

    logger.info(`Webhook handler –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞`, {
      projectId,
      component: 'bot-manager'
    });

    return botInstance.webhook;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
   */
  async checkBotHealth(projectId: string): Promise<{
    isRunning: boolean;
    webhookInfo?: any;
    error?: string;
  }> {
    const botInstance = this.bots.get(projectId);

    if (!botInstance) {
      return { isRunning: false, error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    try {
      const webhookInfo = await botInstance.bot.api.getWebhookInfo();
      return {
        isRunning: true,
        webhookInfo
      };
    } catch (error) {
      return {
        isRunning: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const globalForBotManager = globalThis as unknown as {
  botManager: BotManager | undefined;
};

export const botManager = globalForBotManager.botManager ?? new BotManager();

if (process.env.NODE_ENV !== 'production') {
  globalForBotManager.botManager = botManager;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
// –û–¢–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É - –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
// botManager.loadAllBots().catch(error => {
//   logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', {
//     error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
//     component: 'bot-manager'
//   });
// });
