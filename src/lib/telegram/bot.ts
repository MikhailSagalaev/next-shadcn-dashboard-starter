/**
 * @file: src/lib/telegram/bot.ts
 * @description: –§–∞–±—Ä–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Workflow
 * @project: SaaS Bonus System
 * @dependencies: Grammy, FlowExecutor, WorkflowRuntime
 * @created: 2025-01-12
 * @updated: 2025-10-12
 * @author: AI Assistant + User
 */

import { Bot, Context, SessionFlavor } from 'grammy';
import { logger } from '@/lib/logger';
import {
  BotSessionService,
  BotConstructorSession
} from '@/lib/services/bot-session.service';
import { SimpleWorkflowProcessor } from '@/lib/services/simple-workflow-processor';
import { WorkflowRuntimeService } from '@/lib/services/workflow-runtime.service';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)
type MyContext = Context & SessionFlavor<BotConstructorSession>;

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Workflow
 */
export function createBot(token: string, projectId: string, botSettings?: any) {
  logger.info(`ü§ñ –°–û–ó–î–ê–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê –ë–û–¢–ê`, {
    projectId,
    token: '***' + token.slice(-4),
    botSettings: botSettings ? {
      botUsername: botSettings.botUsername,
      isActive: botSettings.isActive
    } : null,
    component: 'bot-factory'
  });

  const bot = new Bot<MyContext>(token);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ middleware
  bot.use(BotSessionService.createSessionMiddleware(projectId));
  bot.use(BotSessionService.createActivityMiddleware());
  bot.use(BotSessionService.createTimeoutMiddleware());

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use(async (ctx, next) => {
    const updateType = ctx.update.message
      ? 'message'
      : ctx.update.callback_query
        ? 'callback_query'
        : ctx.update.inline_query
          ? 'inline_query'
          : 'other';

    logger.info(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, {
      fromId: ctx.from?.id,
      username: ctx.from?.username,
      updateType,
      updateId: ctx.update.update_id,
      projectId,
      component: 'telegram-bot'
    });

    await next();
  });

  // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Workflow
  bot.use(async (ctx, next) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ —Å–µ—Å—Å–∏–∏
      const projectId = ctx.session?.projectId;
      if (!projectId) {
        logger.debug('–ù–µ—Ç projectId –≤ —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º workflow –æ–±—Ä–∞–±–æ—Ç–∫—É', { session: ctx.session });
        await next();
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞
      let trigger: 'start' | 'message' | 'callback' = 'message';
      if (ctx.message?.text?.startsWith('/start')) {
        trigger = 'start';
      } else if (ctx.callbackQuery) {
        trigger = 'callback';
      }

      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow', { trigger, projectId, userId: ctx.from?.id });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow –î–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const hasActiveWorkflow = await WorkflowRuntimeService.hasActiveWorkflow(projectId);
      
      if (!hasActiveWorkflow) {
        logger.debug('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π workflow –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback', {
          projectId,
          trigger
        });
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ workflow –≤–æ–æ–±—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–¥—ë–º –∫ fallback
        await next();
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º workflow —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
      logger.info('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow', { trigger, projectId, userId: ctx.from?.id });
      const processed = await WorkflowRuntimeService.executeWorkflow(projectId, trigger, ctx);

      logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow', { 
        processed, 
        projectId, 
        trigger,
        userId: ctx.from?.id 
      });

      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ workflow
      // –î–∞–∂–µ –µ—Å–ª–∏ workflow –≤–µ—Ä–Ω—É–ª false (–æ—à–∏–±–∫–∞), –ù–ï –≤—ã–∑—ã–≤–∞–µ–º fallback
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      return;
      
    } catch (error) {
      logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ workflow', {
        projectId: ctx.session?.projectId,
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });

      // ‚úÖ –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º fallback
      // Workflow —É–∂–µ –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      return;
    }
  });

  // ==========================================
  // FALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–µ—Å–ª–∏ –Ω–µ—Ç workflow)
  // ==========================================

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
  bot.command('test', async (ctx) => {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test (fallback)', { projectId });
    await ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /test –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n\n‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π workflow –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º.');
  });

  // Fallback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
  bot.command('start', async (ctx) => {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (fallback)', { projectId });
    
    await ctx.reply(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
      '‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (workflow).\n\n' +
      'üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω:\n' +
      '1. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–®–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤"\n' +
      '2. –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω \n' +
      '3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n' +
      '4. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow\n\n' +
      'üí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.'
    );
  });

  // Fallback –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (ctx) => {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (fallback)', {
        projectId,
      messageType: ctx.message.text ? 'text' : 'other'
    });
    
    await ctx.reply(
      '‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ fallback.\n\n' +
      '–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.'
    );
  });

  // Fallback –¥–ª—è callback queries
  bot.on('callback_query', async (ctx) => {
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback (fallback)', {
      projectId,
      data: ctx.callbackQuery.data
    });
    
    await ctx.answerCallbackQuery({
      text: '‚ö†Ô∏è Workflow –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    });
    
    await ctx.reply(
      '‚ö†Ô∏è –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å workflow –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.'
    );
  });

  logger.info(`‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`, {
      projectId,
    component: 'bot-factory'
  });

  return bot;
}
