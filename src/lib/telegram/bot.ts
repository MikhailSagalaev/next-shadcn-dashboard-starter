import { Bot, Context, session, SessionFlavor, InlineKeyboard } from 'grammy';
import { UserService, BonusService } from '@/lib/services/user.service';
import { ProjectService } from '@/lib/services/project.service';
import { BonusLevelService } from '@/lib/services/bonus-level.service';
import { ReferralService } from '@/lib/services/referral.service';
import { logger } from '@/lib/logger';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  step?: string;
  projectId?: string;
  awaitingContact?: boolean;
  awaitingEmail?: boolean;
  linkingMethod?: 'phone' | 'email';
}

type MyContext = Context & SessionFlavor<SessionData>;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
export function createBot(token: string, projectId: string, botSettings?: any) {
  const bot = new Bot<MyContext>(token);

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
  bot.use(
    session({
      initial: (): SessionData => ({})
    })
  );

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use(async (ctx, next) => {
    const updateType = ctx.update.message
      ? 'message'
      : ctx.update.callback_query
        ? 'callback_query'
        : ctx.update.inline_query
          ? 'inline_query'
          : 'other';

    logger.info(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, {
      fromId: ctx.from?.id,
      username: ctx.from?.username,
      updateType,
      updateId: ctx.update.update_id,
      projectId,
      component: 'telegram-bot'
    });

    await next();
  });

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const getBotSettings = async () => {
    if (botSettings) {
      return botSettings;
    }
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    const project = await ProjectService.getProjectById(projectId);
    return project?.botSettings;
  };

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
  bot.command('test', async (ctx) => {
    await ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /test –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
  });

  // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
  bot.command('start', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);
    const settings = await getBotSettings();

    if (user && user.projectId === projectId) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
      const balance = await UserService.getUserBalance(user.id);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      const project = await ProjectService.getProjectById(projectId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
      const showBalanceButton =
        settings?.functionalSettings?.showBalance !== false;
      const showLevelButton = settings?.functionalSettings?.showLevel !== false;
      const showReferralButton =
        settings?.functionalSettings?.showReferral !== false;
      const showHistoryButton =
        settings?.functionalSettings?.showHistory !== false;
      const showHelpButton = settings?.functionalSettings?.showHelp !== false;

      const keyboard = new InlineKeyboard();
      if (showBalanceButton) keyboard.text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance');
      if (showLevelButton) keyboard.text('üèÜ –£—Ä–æ–≤–µ–Ω—å', 'check_level');
      if (showBalanceButton || showLevelButton) keyboard.row();
      if (showReferralButton) keyboard.text('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'check_referral');
      if (showHistoryButton) keyboard.text('üìù –ò—Å—Ç–æ—Ä–∏—è', 'view_history');
      if (showReferralButton || showHistoryButton) keyboard.row();
      if (showHelpButton) keyboard.text('‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'show_help');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
      const balanceMessage =
        settings?.messageSettings?.balanceMessage ||
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: *{balance}‚ÇΩ*\nüèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {totalEarned}‚ÇΩ\nüí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {totalSpent}‚ÇΩ\n‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: {expiringSoon}‚ÇΩ`;

      const formattedBalanceMessage = balanceMessage
        .replace('{balance}', balance.currentBalance.toString())
        .replace('{totalEarned}', balance.totalEarned.toString())
        .replace('{totalSpent}', balance.totalSpent.toString())
        .replace('{expiringSoon}', balance.expiringSoon.toString());

      await ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, ${user.firstName || '–¥—Ä—É–≥'}!\n\n` +
          `üè™ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
          formattedBalanceMessage +
          `\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      ctx.session.projectId = projectId;
      ctx.session.awaitingContact = true;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
      const project = await ProjectService.getProjectById(projectId);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
      const welcomeMessage =
        settings?.messageSettings?.welcomeMessage ||
        settings?.welcomeMessage ||
        'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!';

      const keyboard = new InlineKeyboard()
        .text('üìû –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'link_phone')
        .text('üìß –ü–æ email', 'link_email')
        .row()
        .text('‚ùì –ü–æ–º–æ—â—å', 'show_help');

      await ctx.reply(
        `${welcomeMessage}\n\n` +
          `üè™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
          `üì± –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏:`,
        { reply_markup: keyboard }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  bot.on('message:contact', async (ctx) => {
    if (!ctx.session.awaitingContact || !ctx.session.projectId) {
      await ctx.reply('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
      return;
    }

    const contact = ctx.message.contact;
    const telegramId = BigInt(ctx.from.id);

    try {
      const user = await UserService.linkTelegramAccount(
        ctx.session.projectId,
        telegramId,
        ctx.from.username,
        { phone: contact.phone_number }
      );

      if (user) {
        ctx.session.awaitingContact = false;

        const balance = await UserService.getUserBalance(user.id);

        await ctx.reply(
          `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
            `üë§ ${user.firstName || ''} ${user.lastName || ''}\n` +
            `üìû ${user.phone}\n\n` +
            `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.currentBalance}‚ÇΩ\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
            `/history - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
            `/help - –ø–æ–º–æ—â—å`,
          {
            reply_markup: { remove_keyboard: true }
          }
        );
      } else {
        await ctx.reply(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n' +
            'üìß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          {
            reply_markup: { remove_keyboard: true }
          }
        );
      }
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: { remove_keyboard: true }
        }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è email)
  bot.on('message:text', async (ctx) => {
    if (!ctx.session.awaitingContact || !ctx.session.projectId) {
      return;
    }

    const text = ctx.message.text;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (emailRegex.test(text)) {
      const telegramId = BigInt(ctx.from.id);

      try {
        const user = await UserService.linkTelegramAccount(
          ctx.session.projectId,
          telegramId,
          ctx.from.username,
          { email: text }
        );

        if (user) {
          ctx.session.awaitingContact = false;

          const balance = await UserService.getUserBalance(user.id);

          await ctx.reply(
            `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
              `üë§ ${user.firstName || ''} ${user.lastName || ''}\n` +
              `üìß ${user.email}\n\n` +
              `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.currentBalance}‚ÇΩ\n\n` +
              `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n` +
              `/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
              `/history - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
              `/help - –ø–æ–º–æ—â—å`
          );
        } else {
          await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–∏–º email.\n\n' +
              'üìû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
          );
        }
      } catch (error) {
        // TODO: –ª–æ–≥–≥–µ—Ä
        await ctx.reply(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    } else {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n' +
          'üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
  bot.command('balance', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const balance = await UserService.getUserBalance(user.id);

      await ctx.reply(
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n\n` +
          `üè¶ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.currentBalance}‚ÇΩ\n` +
          `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
          `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
          `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: ${balance.expiringSoon}‚ÇΩ`
      );
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
  bot.command('history', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const { transactions } = await BonusService.getUserTransactions(
        user.id,
        1,
        10
      );

      if (transactions.length === 0) {
        await ctx.reply('üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏.');
        return;
      }

      let message = 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n';

      for (const transaction of transactions) {
        const date = transaction.createdAt.toLocaleDateString('ru-RU');
        const type = transaction.type === 'EARN' ? '‚ûï' : '‚ûñ';
        const amount = Number(transaction.amount);

        message += `${type} ${amount}‚ÇΩ - ${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;
        message += `üìÖ ${date}\n\n`;
      }

      await ctx.reply(message);
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.command('level', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const userWithLevel = await UserService.getUserWithLevel(user.id);

      if (!userWithLevel) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
        return;
      }

      const progress = await BonusLevelService.calculateProgressToNextLevel(
        user.projectId,
        userWithLevel.totalPurchases
      );

      const currentLevel = userWithLevel.level;
      let message = `üèÜ –í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n`;

      if (currentLevel) {
        message += `üéØ –£—Ä–æ–≤–µ–Ω—å: ${currentLevel.name}\n`;
        message += `üíé –ë–æ–Ω—É—Å—ã: ${currentLevel.bonusPercent}%\n`;
        message += `üí≥ –û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏: –¥–æ ${currentLevel.paymentPercent}%\n\n`;
      } else {
        message += `üéØ –£—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π\n\n`;
      }

      message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${Number(userWithLevel.totalPurchases)}‚ÇΩ\n\n`;

      if (progress.nextLevel) {
        const remaining =
          Number(progress.nextLevel.minAmount) -
          Number(userWithLevel.totalPurchases);
        const progressPercent = Math.round(progress.progressPercent);

        message += `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ "${progress.nextLevel.name}":\n`;
        message += `‚ñì${'‚ñà'.repeat(Math.floor(progressPercent / 10))}${'‚ñë'.repeat(10 - Math.floor(progressPercent / 10))} ${progressPercent}%\n`;
        message += `\nüíµ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${remaining}‚ÇΩ\n`;
        message += `üéÅ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–∞—Å—Ç ${progress.nextLevel.bonusPercent}% –±–æ–Ω—É—Å–æ–≤!`;
      } else {
        message += `üèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!`;
      }

      await ctx.reply(message);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  bot.command('referral', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const referralProgram = await ReferralService.getReferralProgram(
        user.projectId
      );

      if (!referralProgram || !referralProgram.isActive) {
        await ctx.reply(
          'üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n\n' +
            '‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
      const stats = await ReferralService.getReferralStats(user.projectId);

      let message = `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n`;
      message += `üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: ${referralProgram.referrerBonus}% —Å –ø–æ–∫—É–ø–æ–∫ –¥—Ä—É–∑–µ–π\n`;
      message += `üéâ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: ${referralProgram.refereeBonus}% –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n`;
      message += `üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${referralProgram.minPurchaseAmount}‚ÇΩ\n\n`;

      message += `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      message += `üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.totalReferrals}\n`;
      message += `üí∏ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${stats.totalBonusPaid}‚ÇΩ\n\n`;

      message += `üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /invite —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!`;

      await ctx.reply(message);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  bot.command('invite', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const referralProgram = await ReferralService.getReferralProgram(
        user.projectId
      );

      if (!referralProgram || !referralProgram.isActive) {
        await ctx.reply(
          'üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n\n' +
            '‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        );
        return;
      }

      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const referralCode = await ReferralService.ensureUserReferralCode(
        user.id
      );

      if (!referralCode) {
        await ctx.reply(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
      const project = await ProjectService.getProjectById(user.projectId);
      if (!project) {
        await ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        return;
      }

      const referralLink = await ReferralService.generateReferralLink(
        user.id,
        'https://example.com' // TODO: –¥–æ–±–∞–≤–∏—Ç—å websiteUrl –≤ —Å—Ö–µ–º—É Project
      );

      await ctx.reply(
        `üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n` +
          `${referralLink}\n\n` +
          `üíù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏!\n\n` +
          `üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ${referralProgram.referrerBonus}% —Å –µ–≥–æ –ø–æ–∫—É–ø–æ–∫\n` +
          `üéâ –ê –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç ${referralProgram.refereeBonus}% –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!`
      );
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
  bot.command('help', async (ctx) => {
    await ctx.reply(
      'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
        '/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n' +
        '/level - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å\n' +
        '/referral - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n' +
        '/invite - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n' +
        '/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n' +
        '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (inline –∫–Ω–æ–ø–∫–∏)
  bot.callbackQuery('check_balance', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.editMessageText(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const balance = await UserService.getUserBalance(user.id);

      const keyboard = new InlineKeyboard()
        .text('üìù –ò—Å—Ç–æ—Ä–∏—è', 'view_history')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
        .row();

      await ctx.editMessageText(
        `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤*\n\n` +
          `üè¶ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${balance.currentBalance}‚ÇΩ*\n` +
          `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
          `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
          `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–∏: ${balance.expiringSoon}‚ÇΩ`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
    }
  });

  bot.callbackQuery('check_level', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.editMessageText(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const userWithLevel = await UserService.getUserWithLevel(user.id);

      if (!userWithLevel) {
        await ctx.editMessageText(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.'
        );
        return;
      }

      const progress = await BonusLevelService.calculateProgressToNextLevel(
        user.projectId,
        userWithLevel.totalPurchases
      );

      const currentLevel = userWithLevel.level;
      let message = `üèÜ *–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å*\n\n`;

      if (currentLevel) {
        message += `üéØ –£—Ä–æ–≤–µ–Ω—å: *${currentLevel.name}*\n`;
        message += `üíé –ë–æ–Ω—É—Å—ã: ${currentLevel.bonusPercent}%\n`;
        message += `üí≥ –û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏: –¥–æ ${currentLevel.paymentPercent}%\n\n`;
      } else {
        message += `üéØ –£—Ä–æ–≤–µ–Ω—å: *–ë–∞–∑–æ–≤—ã–π*\n\n`;
      }

      message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${Number(userWithLevel.totalPurchases)}‚ÇΩ\n\n`;

      if (progress.nextLevel) {
        const remaining =
          Number(progress.nextLevel.minAmount) -
          Number(userWithLevel.totalPurchases);
        const progressPercent = Math.round(progress.progressPercent);

        message += `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ "${progress.nextLevel.name}":\n`;
        message += `‚ñì${'‚ñà'.repeat(Math.floor(progressPercent / 10))}${'‚ñë'.repeat(10 - Math.floor(progressPercent / 10))} ${progressPercent}%\n`;
        message += `\nüíµ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${remaining}‚ÇΩ`;
      } else {
        message += `üèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!`;
      }

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
        .row();

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      await ctx.editMessageText(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  bot.callbackQuery('check_referral', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.editMessageText(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const referralProgram = await ReferralService.getReferralProgram(
        user.projectId
      );

      if (!referralProgram || !referralProgram.isActive) {
        const keyboard = new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'back_to_main');

        await ctx.editMessageText(
          'üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n\n‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          { reply_markup: keyboard }
        );
        return;
      }

      const stats = await ReferralService.getReferralStats(user.projectId);

      let message = `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n`;
      message += `üéÅ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: ${referralProgram.referrerBonus}% —Å –ø–æ–∫—É–ø–æ–∫ –¥—Ä—É–∑–µ–π\n`;
      message += `üéâ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: ${referralProgram.refereeBonus}% –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n`;
      message += `üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${referralProgram.minPurchaseAmount}‚ÇΩ\n\n`;

      message += `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      message += `üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.totalReferrals}\n`;
      message += `üí∏ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${stats.totalBonusPaid}‚ÇΩ`;

      const keyboard = new InlineKeyboard()
        .text('üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', 'get_invite_link')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
        .row();

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      await ctx.editMessageText(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  bot.callbackQuery('get_invite_link', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.editMessageText(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const referralProgram = await ReferralService.getReferralProgram(
        user.projectId
      );

      if (!referralProgram || !referralProgram.isActive) {
        await ctx.editMessageText(
          'üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.'
        );
        return;
      }

      const referralCode = await ReferralService.ensureUserReferralCode(
        user.id
      );

      if (!referralCode) {
        await ctx.editMessageText(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
        return;
      }

      const referralLink = await ReferralService.generateReferralLink(
        user.id,
        'https://example.com' // TODO: –¥–æ–±–∞–≤–∏—Ç—å websiteUrl –≤ —Å—Ö–µ–º—É Project
      );

      const keyboard = new InlineKeyboard()
        .text('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'check_referral')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
        .row();

      await ctx.editMessageText(
        `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n` +
          `\`${referralLink}\`\n\n` +
          `üíù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏!\n\n` +
          `üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ${referralProgram.referrerBonus}% —Å –µ–≥–æ –ø–æ–∫—É–ø–æ–∫\n` +
          `üéâ –ê –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç ${referralProgram.refereeBonus}% –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      await ctx.editMessageText(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  bot.callbackQuery('view_history', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (!user) {
      await ctx.editMessageText('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.');
      return;
    }

    try {
      const { transactions } = await BonusService.getUserTransactions(
        user.id,
        1,
        5
      );

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
        .row();

      if (transactions.length === 0) {
        await ctx.editMessageText(
          'üìù *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏.',
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
        return;
      }

      let message = 'üìù *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n';

      for (const transaction of transactions) {
        const date = transaction.createdAt.toLocaleDateString('ru-RU');
        const type = transaction.type === 'EARN' ? '‚ûï' : '‚ûñ';
        const amount = Number(transaction.amount);

        message += `${type} *${amount}‚ÇΩ* - ${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;
        message += `üìÖ ${date}\n\n`;
      }

      if (transactions.length === 5) {
        message += '_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π_';
      }

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
    }
  });

  bot.callbackQuery('show_help', async (ctx) => {
    await ctx.answerCallbackQuery();

    const keyboard = new InlineKeyboard().text('üîô –ù–∞–∑–∞–¥', 'back_to_main');

    await ctx.editMessageText(
      `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n` +
        `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
        `/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
        `/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n` +
        `/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
        `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
        `üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n` +
        `‚Ä¢ –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n` +
        `‚Ä¢ –¢—Ä–∞—Ç—å—Ç–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö\n` +
        `‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å—Ä–æ–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n` +
        `‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );
  });

  bot.callbackQuery('back_to_main', async (ctx) => {
    await ctx.answerCallbackQuery();

    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(projectId, telegramId);

    if (user && user.projectId === projectId) {
      const balance = await UserService.getUserBalance(user.id);
      const project = await ProjectService.getProjectById(projectId);

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance')
        .text('üèÜ –£—Ä–æ–≤–µ–Ω—å', 'check_level')
        .row()
        .text('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'check_referral')
        .text('üìù –ò—Å—Ç–æ—Ä–∏—è', 'view_history')
        .row()
        .text('‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'show_help');

      // –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
      await ctx.editMessageText(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, ${user.firstName || '–¥—Ä—É–≥'}!\n\n` +
          `üè™ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
          `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: *${balance.currentBalance}‚ÇΩ*\n` +
          `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
          `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
          `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: ${balance.expiringSoon}‚ÇΩ\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const project = await ProjectService.getProjectById(projectId);
      const welcomeMessage =
        project?.botSettings?.welcomeMessage ||
        'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!';

      const keyboard = new InlineKeyboard()
        .text('üìû –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'link_phone')
        .text('üìß –ü–æ email', 'link_email')
        .row()
        .text('‚ùì –ü–æ–º–æ—â—å', 'show_help');

      await ctx.editMessageText(
        `${welcomeMessage}\n\n` +
          `üè™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
          `üì± –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏:`,
        { reply_markup: keyboard }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
  bot.callbackQuery('link_phone', async (ctx) => {
    await ctx.answerCallbackQuery();
    ctx.session.awaitingContact = true;
    ctx.session.linkingMethod = 'phone';

    await ctx.deleteMessage();
    await ctx.reply(
      'üìû *–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    );
  });

  bot.callbackQuery('link_email', async (ctx) => {
    await ctx.answerCallbackQuery();
    ctx.session.awaitingContact = true;
    ctx.session.linkingMethod = 'email';

    await ctx.editMessageText(
      'üìß *–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ email*\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',
      { parse_mode: 'Markdown' }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err) => {
    // TODO: –ª–æ–≥–≥–µ—Ä
  });

  return bot;
}
