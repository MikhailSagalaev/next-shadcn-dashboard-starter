import { Bot, Context, session, SessionFlavor, InlineKeyboard } from 'grammy';
import { UserService, BonusService } from '@/lib/services/user.service';
import { ProjectService } from '@/lib/services/project.service';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  step?: string;
  projectId?: string;
  awaitingContact?: boolean;
  awaitingEmail?: boolean;
  linkingMethod?: 'phone' | 'email';
}

type MyContext = Context & SessionFlavor<SessionData>;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
export function createBot(token: string, projectId: string) {
  const bot = new Bot<MyContext>(token);

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
  bot.use(session({
    initial: (): SessionData => ({}),
  }));

  // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
  bot.command('start', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(telegramId);

    if (user && user.projectId === projectId) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
      const balance = await UserService.getUserBalance(user.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      const project = await ProjectService.getProjectById(projectId);
      
      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance')
        .text('üìù –ò—Å—Ç–æ—Ä–∏—è', 'view_history').row()
        .text('‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'show_help');
      
      await ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, ${user.firstName || '–¥—Ä—É–≥'}!\n\n` +
        `üè™ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: *${balance.currentBalance}‚ÇΩ*\n` +
        `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
        `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
        `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: ${balance.expiringSoon}‚ÇΩ\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        { 
          parse_mode: 'Markdown',
          reply_markup: keyboard 
        }
      );
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      ctx.session.projectId = projectId;
      ctx.session.awaitingContact = true;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
      const project = await ProjectService.getProjectById(projectId);
      const welcomeMessage = project?.botSettings?.welcomeMessage || 
        'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!';
      
      const keyboard = new InlineKeyboard()
        .text('üìû –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'link_phone')
        .text('üìß –ü–æ email', 'link_email').row()
        .text('‚ùì –ü–æ–º–æ—â—å', 'show_help');
      
      await ctx.reply(
        `${welcomeMessage}\n\n` +
        `üè™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
        `üì± –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏:`,
        { reply_markup: keyboard }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  bot.on('message:contact', async (ctx) => {
    if (!ctx.session.awaitingContact || !ctx.session.projectId) {
      await ctx.reply('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
      return;
    }

    const contact = ctx.message.contact;
    const telegramId = BigInt(ctx.from.id);
    
    try {
      const user = await UserService.linkTelegramAccount(
        ctx.session.projectId,
        telegramId,
        ctx.from.username,
        { phone: contact.phone_number }
      );

      if (user) {
        ctx.session.awaitingContact = false;
        
        const balance = await UserService.getUserBalance(user.id);
        
        await ctx.reply(
          `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
          `üë§ ${user.firstName || ''} ${user.lastName || ''}\n` +
          `üìû ${user.phone}\n\n` +
          `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.currentBalance}‚ÇΩ\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
          `/history - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
          `/help - –ø–æ–º–æ—â—å`,
          {
            reply_markup: { remove_keyboard: true },
          }
        );
      } else {
        await ctx.reply(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n' +
          'üìß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          {
            reply_markup: { remove_keyboard: true },
          }
        );
      }
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: { remove_keyboard: true },
        }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è email)
  bot.on('message:text', async (ctx) => {
    if (!ctx.session.awaitingContact || !ctx.session.projectId) {
      return;
    }

    const text = ctx.message.text;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    if (emailRegex.test(text)) {
      const telegramId = BigInt(ctx.from.id);
      
      try {
        const user = await UserService.linkTelegramAccount(
          ctx.session.projectId,
          telegramId,
          ctx.from.username,
          { email: text }
        );

        if (user) {
          ctx.session.awaitingContact = false;
          
          const balance = await UserService.getUserBalance(user.id);
          
          await ctx.reply(
            `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n` +
            `üë§ ${user.firstName || ''} ${user.lastName || ''}\n` +
            `üìß ${user.email}\n\n` +
            `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.currentBalance}‚ÇΩ\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
            `/history - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
            `/help - –ø–æ–º–æ—â—å`
          );
        } else {
          await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–∏–º email.\n\n' +
            'üìû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
          );
        }
      } catch (error) {
        // TODO: –ª–æ–≥–≥–µ—Ä
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } else {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n' +
        'üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
  bot.command('balance', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const balance = await UserService.getUserBalance(user.id);
      
      await ctx.reply(
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n\n` +
        `üè¶ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.currentBalance}‚ÇΩ\n` +
        `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
        `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
        `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: ${balance.expiringSoon}‚ÇΩ`
      );
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
  bot.command('history', async (ctx) => {
    const telegramId = BigInt(ctx.from!.id);
    const user = await UserService.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.reply(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
      );
      return;
    }

    try {
      const { transactions } = await BonusService.getUserTransactions(user.id, 1, 10);
      
      if (transactions.length === 0) {
        await ctx.reply('üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏.');
        return;
      }

      let message = 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n';
      
      for (const transaction of transactions) {
        const date = transaction.createdAt.toLocaleDateString('ru-RU');
        const type = transaction.type === 'EARN' ? '‚ûï' : '‚ûñ';
        const amount = Number(transaction.amount);
        
        message += `${type} ${amount}‚ÇΩ - ${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;
        message += `üìÖ ${date}\n\n`;
      }

      await ctx.reply(message);
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
  bot.command('help', async (ctx) => {
    await ctx.reply(
      'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
      '/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n' +
      '/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n' +
      '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
      '‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (inline –∫–Ω–æ–ø–∫–∏)
  bot.callbackQuery('check_balance', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.editMessageText('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.');
      return;
    }

    try {
      const balance = await UserService.getUserBalance(user.id);
      
      const keyboard = new InlineKeyboard()
        .text('üìù –ò—Å—Ç–æ—Ä–∏—è', 'view_history')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main').row();
      
      await ctx.editMessageText(
        `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤*\n\n` +
        `üè¶ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${balance.currentBalance}‚ÇΩ*\n` +
        `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
        `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
        `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–∏: ${balance.expiringSoon}‚ÇΩ`,
        { 
          parse_mode: 'Markdown',
          reply_markup: keyboard 
        }
      );
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
    }
  });

  bot.callbackQuery('view_history', async (ctx) => {
    await ctx.answerCallbackQuery();
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.editMessageText('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.');
      return;
    }

    try {
      const { transactions } = await BonusService.getUserTransactions(user.id, 1, 5);
      
      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance')
        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main').row();
      
      if (transactions.length === 0) {
        await ctx.editMessageText(
          'üìù *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏.',
          { 
            parse_mode: 'Markdown',
            reply_markup: keyboard 
          }
        );
        return;
      }

      let message = 'üìù *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n';
      
      for (const transaction of transactions) {
        const date = transaction.createdAt.toLocaleDateString('ru-RU');
        const type = transaction.type === 'EARN' ? '‚ûï' : '‚ûñ';
        const amount = Number(transaction.amount);
        
        message += `${type} *${amount}‚ÇΩ* - ${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;
        message += `üìÖ ${date}\n\n`;
      }

      if (transactions.length === 5) {
        message += '_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π_';
      }

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard 
      });
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
    }
  });

  bot.callbackQuery('show_help', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard()
      .text('üîô –ù–∞–∑–∞–¥', 'back_to_main');
    
    await ctx.editMessageText(
      `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n` +
      `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
      `/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
      `/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n` +
      `/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n` +
      `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
      `üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n` +
      `‚Ä¢ –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n` +
      `‚Ä¢ –¢—Ä–∞—Ç—å—Ç–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö\n` +
      `‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å—Ä–æ–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n` +
      `‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard 
      }
    );
  });

  bot.callbackQuery('back_to_main', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    ctx.message = { text: '/start' } as any;
    await ctx.deleteMessage();
    
    // –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    const telegramId = BigInt(ctx.from.id);
    const user = await UserService.getUserByTelegramId(telegramId);

    if (user && user.projectId === projectId) {
      const balance = await UserService.getUserBalance(user.id);
      const project = await ProjectService.getProjectById(projectId);
      
      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'check_balance')
        .text('üìù –ò—Å—Ç–æ—Ä–∏—è', 'view_history').row()
        .text('‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'show_help');
      
      await ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, ${user.firstName || '–¥—Ä—É–≥'}!\n\n` +
        `üè™ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: ${project?.name || '–ù–∞—à –º–∞–≥–∞–∑–∏–Ω'}\n\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: *${balance.currentBalance}‚ÇΩ*\n` +
        `üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned}‚ÇΩ\n` +
        `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${balance.totalSpent}‚ÇΩ\n` +
        `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π: ${balance.expiringSoon}‚ÇΩ\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        { 
          parse_mode: 'Markdown',
          reply_markup: keyboard 
        }
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
  bot.callbackQuery('link_phone', async (ctx) => {
    await ctx.answerCallbackQuery();
    ctx.session.awaitingContact = true;
    ctx.session.linkingMethod = 'phone';
    
    await ctx.deleteMessage();
    await ctx.reply(
      'üìû *–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  });

  bot.callbackQuery('link_email', async (ctx) => {
    await ctx.answerCallbackQuery();
    ctx.session.awaitingContact = true;
    ctx.session.linkingMethod = 'email';
    
    await ctx.editMessageText(
      'üìß *–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ email*\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',
      { parse_mode: 'Markdown' }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err) => {
    // TODO: –ª–æ–≥–≥–µ—Ä
  });

  return bot;
} 