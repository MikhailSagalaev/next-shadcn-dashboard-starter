/**
 * @file: src/lib/telegram/startup.ts
 * @description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
 * @project: SaaS Bonus System
 * @dependencies: BotManager, Database
 * @created: 2025-08-09
 * @author: AI Assistant + User
 */

import { db } from '@/lib/db';
import { botManager } from './bot-manager';
import { logger } from '@/lib/logger';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function initializeAllBots() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...', {
      component: 'bot-startup'
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤
    let activeBotSettings;
    try {
      activeBotSettings = await db.botSettings.findMany({
        where: {
          isActive: true,
          botToken: { not: '' }
        },
        include: {
          project: {
            select: {
              id: true,
              name: true,
              webhookSecret: true,
              bonusPercentage: true,
              bonusExpiryDays: true,
              // bonusBehavior: true,
              isActive: true,
              createdAt: true,
              updatedAt: true,
              botStatus: true,
              botToken: true,
              botUsername: true
            }
          }
        }
      });
    } catch (error: unknown) {
      logger.error(
        'üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤',
        {
          error: error instanceof Error ? error.message : 'Unknown error',
          component: 'bot-startup'
        }
      );
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    }

    if (activeBotSettings.length === 0) {
      logger.info('üì≠ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
        component: 'bot-startup'
      });
      return;
    }

    logger.info(`ü§ñ –ù–∞–π–¥–µ–Ω–æ ${activeBotSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤`, {
      bots: activeBotSettings.map(
        (s: {
          projectId: string;
          botUsername: string | null;
          project: { name: string };
        }) => ({
          projectId: s.projectId,
          username: s.botUsername,
          projectName: s.project.name
        })
      ),
      component: 'bot-startup'
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
    const results: Array<{
      projectId: string;
      success: boolean;
      username?: string;
      error?: string;
    }> = [];
    for (const botSettings of activeBotSettings) {
      try {
        logger.info(
          `‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${botSettings.project.name}`,
          {
            projectId: botSettings.projectId,
            username: botSettings.botUsername,
            component: 'bot-startup'
          }
        );

        const botInstance = await botManager.createBot(
          botSettings.projectId,
          botSettings as any
        );

        results.push({
          projectId: botSettings.projectId,
          success: true,
          username: botInstance.bot.botInfo.username
        });

        logger.info(`‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`, {
          projectId: botSettings.projectId,
          username: botInstance.bot.botInfo.username,
          projectName: botSettings.project.name,
          component: 'bot-startup'
        });

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–æ–≤
        await new Promise((resolve) => setTimeout(resolve, 1000));
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞`, {
          projectId: botSettings.projectId,
          username: botSettings.botUsername,
          error: error instanceof Error ? error.message : 'Unknown error',
          component: 'bot-startup'
        });

        results.push({
          projectId: botSettings.projectId,
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    const successCount = results.filter(
      (r: { success: boolean }) => r.success
    ).length;
    const failureCount = results.filter(
      (r: { success: boolean }) => !r.success
    ).length;

    logger.info(`üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, {
      total: activeBotSettings.length,
      success: successCount,
      failures: failureCount,
      results,
      component: 'bot-startup'
    });
  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤', {
      error: error instanceof Error ? error.message : 'Unknown error',
      component: 'bot-startup'
    });
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
 */
export async function startupBots() {
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  setTimeout(async () => {
    await initializeAllBots();
  }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
}
