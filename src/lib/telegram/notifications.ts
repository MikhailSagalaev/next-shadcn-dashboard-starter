/**
 * @file: src/lib/telegram/notifications.ts
 * @description: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, BotManager
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

import { botManager } from './bot-manager';
import type { User, Bonus, BonusType } from '@/types/bonus';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
 */
export async function sendBonusNotification(
  user: User,
  bonus: Bonus,
  projectId: string
): Promise<void> {
  if (!user.telegramId) {
    return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram
  }

  let botInstance = botManager.getBot(projectId);
  try {
    if (!botInstance || !botInstance.isActive) {
      // –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
      try {
        const { db } = await import('@/lib/db');
        const settings = await db.botSettings.findUnique({
          where: { projectId }
        });
        if (settings?.botToken && settings.isActive !== false) {
          botInstance = await botManager.createBot(projectId, settings as any);
        }
      } catch (e) {
        // ignore, –æ—Ç—Ä–µ–ø–æ—Ä—Ç–∏–º –Ω–∏–∂–µ
      }
      if (!botInstance || !botInstance.isActive) {
        console.log(`‚ùå –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
    }

    const emoji = getBonusEmoji(bonus.type);
    const typeText = getBonusTypeText(bonus.type);

    const message =
      `${emoji} *–ù–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!*\n\n` +
      `üí∞ –°—É–º–º–∞: *+${bonus.amount}‚ÇΩ*\n` +
      `üìù –¢–∏–ø: ${typeText}\n` +
      `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${bonus.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
      `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${bonus.expiresAt ? bonus.expiresAt.toLocaleDateString('ru-RU') : '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /balance —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å! üéâ`;

    await botInstance.bot.api.sendMessage(Number(user.telegramId), message, {
      parse_mode: 'Markdown'
    });

    console.log(
      `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} –≤ Telegram (telegramId: ${user.telegramId})`
    );
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`,
      error
    );
    console.error(
      `–î–µ—Ç–∞–ª–∏: projectId=${projectId}, telegramId=${user.telegramId}, botActive=${botInstance?.isActive}`
    );
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
 */
export async function sendBonusSpentNotification(
  user: User,
  amount: number,
  description: string,
  projectId: string
): Promise<void> {
  if (!user.telegramId) {
    return;
  }

  try {
    const botInstance = botManager.getBot(projectId);
    if (!botInstance || !botInstance.isActive) {
      return;
    }

    const message =
      `üí∏ *–ë–æ–Ω—É—Å—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã*\n\n` +
      `üí∞ –°—É–º–º–∞: *-${amount}‚ÇΩ*\n` +
      `üìÑ –ó–∞: ${description}\n\n` +
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.`;

    await botInstance.bot.api.sendMessage(Number(user.telegramId), message, {
      parse_mode: 'Markdown'
    });

    // console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    // console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
 */
export async function sendBonusExpiryWarning(
  user: User,
  expiringAmount: number,
  expiryDate: Date,
  projectId: string
): Promise<void> {
  if (!user.telegramId) {
    return;
  }

  try {
    const botInstance = botManager.getBot(projectId);
    if (!botInstance || !botInstance.isActive) {
      return;
    }

    const daysLeft = Math.ceil(
      (expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)
    );

    const message =
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ–Ω—É—Å—ã —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç*\n\n` +
      `üí∞ –°—É–º–º–∞: *${expiringAmount}‚ÇΩ*\n` +
      `üìÖ –ò—Å—Ç–µ–∫–∞—é—Ç: ${expiryDate.toLocaleDateString('ru-RU')}\n` +
      `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: *${daysLeft}*\n\n` +
      `–ü–æ—Å–ø–µ—à–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ–Ω—É—Å–∞–º–∏! üèÉ‚Äç‚ôÇÔ∏è`;

    await botInstance.bot.api.sendMessage(Number(user.telegramId), message, {
      parse_mode: 'Markdown'
    });

    // console.log(`‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    // console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
  }
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export interface RichNotification {
  message: string;
  imageUrl?: string;
  buttons?: Array<{
    text: string;
    url?: string;
    callback_data?: string;
  }>;
  parseMode?: 'Markdown' | 'HTML';
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
 */
export async function sendBroadcastMessage(
  projectId: string,
  message: string,
  userIds?: string[]
): Promise<{ sent: number; failed: number }> {
  return sendRichBroadcastMessage(projectId, { message }, userIds);
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–æ–∫
 */
export async function sendRichBroadcastMessage(
  projectId: string,
  notification: RichNotification,
  userIds?: string[]
): Promise<{ sent: number; failed: number }> {
  try {
    const { db } = await import('@/lib/db');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotManager
    let instance = botManager.getBot(projectId);
    if (!instance || !instance.isActive) {
      const settings = await db.botSettings.findUnique({
        where: { projectId }
      });
      if (!settings || !settings.botToken || settings.isActive === false) {
        return { sent: 0, failed: 1 };
      }
      try {
        instance = await botManager.createBot(projectId, settings as any);
      } catch {
        return { sent: 0, failed: 1 };
      }
    }

    // –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let targetUserIds: string[];
    if (userIds && userIds.length > 0) {
      targetUserIds = userIds;
    } else {
      const dbUsers = await db.user.findMany({
        where: { projectId, telegramId: { not: null }, isActive: true },
        select: { id: true }
      });
      targetUserIds = dbUsers.map((u: { id: string }) => u.id);
    }

    if (targetUserIds.length === 0) {
      const { logger } = await import('@/lib/logger');
      logger.warn(
        '–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞',
        { projectId },
        'notifications'
      );
      return { sent: 0, failed: 0 };
    }

    const result = await botManager.sendRichBroadcastMessage(
      projectId,
      targetUserIds,
      notification.message,
      {
        imageUrl: notification.imageUrl,
        buttons: notification.buttons,
        parseMode: notification.parseMode || 'Markdown'
      }
    );

    return { sent: result.sentCount, failed: result.failedCount };
  } catch (error) {
    return { sent: 0, failed: 1 };
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getBonusEmoji(type: BonusType): string {
  switch (type) {
    case 'PURCHASE':
      return 'üõí';
    case 'BIRTHDAY':
      return 'üéÇ';
    case 'MANUAL':
      return 'üë®‚Äçüíº';
    case 'REFERRAL':
      return 'üë•';
    case 'PROMO':
      return 'üéÅ';
    default:
      return 'üí∞';
  }
}

function getBonusTypeText(type: BonusType): string {
  switch (type) {
    case 'PURCHASE':
      return '–ó–∞ –ø–æ–∫—É–ø–∫—É';
    case 'BIRTHDAY':
      return '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è';
    case 'MANUAL':
      return '–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ';
    case 'REFERRAL':
      return '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞';
    case 'PROMO':
      return '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è';
    default:
      return '–ë–æ–Ω—É—Å';
  }
}
