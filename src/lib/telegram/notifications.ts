/**
 * @file: src/lib/telegram/notifications.ts
 * @description: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Grammy, BotManager
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

import { botManager } from './bot-manager';
import type { User, Bonus, BonusType } from '@/types/bonus';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
 */
export async function sendBonusNotification(
  user: User,
  bonus: Bonus,
  projectId: string
): Promise<void> {
  if (!user.telegramId) {
    return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram
  }

  try {
    const botInstance = botManager.getBot(projectId);
    if (!botInstance || !botInstance.isActive) {
      // console.log(`–ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const emoji = getBonusEmoji(bonus.type);
    const typeText = getBonusTypeText(bonus.type);
    
    const message = 
      `${emoji} *–ù–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!*\n\n` +
      `üí∞ –°—É–º–º–∞: *+${bonus.amount}‚ÇΩ*\n` +
      `üìù –¢–∏–ø: ${typeText}\n` +
      `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${bonus.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
      `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${bonus.expiresAt ? bonus.expiresAt.toLocaleDateString('ru-RU') : '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /balance —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å! üéâ`;

    await botInstance.bot.api.sendMessage(
      Number(user.telegramId),
      message,
      { parse_mode: 'Markdown' }
    );

    // console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} –≤ Telegram`);
  } catch (error) {
    // console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
 */
export async function sendBonusSpentNotification(
  user: User,
  amount: number,
  description: string,
  projectId: string
): Promise<void> {
  if (!user.telegramId) {
    return;
  }

  try {
    const botInstance = botManager.getBot(projectId);
    if (!botInstance || !botInstance.isActive) {
      return;
    }

    const message = 
      `üí∏ *–ë–æ–Ω—É—Å—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã*\n\n` +
      `üí∞ –°—É–º–º–∞: *-${amount}‚ÇΩ*\n` +
      `üìÑ –ó–∞: ${description}\n\n` +
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.`;

    await botInstance.bot.api.sendMessage(
      Number(user.telegramId),
      message,
      { parse_mode: 'Markdown' }
    );

    // console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    // console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
 */
export async function sendBonusExpiryWarning(
  user: User,
  expiringAmount: number,
  expiryDate: Date,
  projectId: string
): Promise<void> {
  if (!user.telegramId) {
    return;
  }

  try {
    const botInstance = botManager.getBot(projectId);
    if (!botInstance || !botInstance.isActive) {
      return;
    }

    const daysLeft = Math.ceil((expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
    
    const message = 
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ–Ω—É—Å—ã —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç*\n\n` +
      `üí∞ –°—É–º–º–∞: *${expiringAmount}‚ÇΩ*\n` +
      `üìÖ –ò—Å—Ç–µ–∫–∞—é—Ç: ${expiryDate.toLocaleDateString('ru-RU')}\n` +
      `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: *${daysLeft}*\n\n` +
      `–ü–æ—Å–ø–µ—à–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ–Ω—É—Å–∞–º–∏! üèÉ‚Äç‚ôÇÔ∏è`;

    await botInstance.bot.api.sendMessage(
      Number(user.telegramId),
      message,
      { parse_mode: 'Markdown' }
    );

    // console.log(`‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
  } catch (error) {
    // console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
  }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
 */
export async function sendBroadcastMessage(
  projectId: string,
  message: string,
  userIds?: string[]
): Promise<{ sent: number; failed: number }> {
  try {
    const botInstance = botManager.getBot(projectId);
    if (!botInstance || !botInstance.isActive) {
      return { sent: 0, failed: 0 };
    }

    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å Telegram ID
    let users: User[] = [];
    if (userIds) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    } else {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ —Å telegramId
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    }

    let sent = 0;
    let failed = 0;

    for (const user of users) {
      if (user.telegramId) {
        try {
          await botInstance.bot.api.sendMessage(
            Number(user.telegramId),
            message,
            { parse_mode: 'Markdown' }
          );
          sent++;
        } catch (error) {
          // TODO: –ª–æ–≥–≥–µ—Ä
          // console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
          failed++;
        }
      }
    }

    // TODO: –ª–æ–≥–≥–µ—Ä
    // console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent}, –æ—à–∏–±–æ–∫ ${failed}`);
    return { sent, failed };
  } catch (error) {
    // TODO: –ª–æ–≥–≥–µ—Ä
    // console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    return { sent: 0, failed: 0 };
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getBonusEmoji(type: BonusType): string {
  switch (type) {
    case 'PURCHASE':
      return 'üõí';
    case 'BIRTHDAY':
      return 'üéÇ';
    case 'MANUAL':
      return 'üë®‚Äçüíº';
    case 'REFERRAL':
      return 'üë•';
    case 'PROMO':
      return 'üéÅ';
    default:
      return 'üí∞';
  }
}

function getBonusTypeText(type: BonusType): string {
  switch (type) {
    case 'PURCHASE':
      return '–ó–∞ –ø–æ–∫—É–ø–∫—É';
    case 'BIRTHDAY':
      return '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è';
    case 'MANUAL':
      return '–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ';
    case 'REFERRAL':
      return '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞';
    case 'PROMO':
      return '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è';
    default:
      return '–ë–æ–Ω—É—Å';
  }
} 