/**
 * @file: src/app/api/projects/[id]/bot/setup/route.ts
 * @description: API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
 * @project: SaaS Bonus System
 * @dependencies: botManager, db
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import { botManager } from '@/lib/telegram/bot-manager';
import { db } from '@/lib/db';
import { logger } from '@/lib/logger';
import { BotSettings } from '@/types/bonus';
import { withApiRateLimit } from '@/lib';

async function handlePOST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const project = await db.project.findUnique({
      where: { id },
      include: {
        botSettings: true
      }
    });

    if (!project) {
      return NextResponse.json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    const botSettings = project.botSettings;
    if (!botSettings || !botSettings.botToken) {
      return NextResponse.json(
        { error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
    try {
      await botManager.stopBot(id);
      logger.info(`–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id}`, {
        projectId: id,
        component: 'bot-setup'
      });
    } catch (stopError) {
      logger.warn(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id}`, {
        projectId: id,
        error:
          stopError instanceof Error ? stopError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        component: 'bot-setup'
      });
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await new Promise((resolve) => setTimeout(resolve, 500));

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç
    const botSettingsForManager = {
      ...botSettings,
      welcomeMessage:
        typeof botSettings.welcomeMessage === 'string'
          ? botSettings.welcomeMessage
          : (botSettings.welcomeMessage as any)?.text ||
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
    };

    const botInstance = await botManager.createBot(
      id,
      botSettingsForManager as BotSettings
    );

    logger.info(`–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`, {
      projectId: id,
      component: 'bot-setup'
    });

    return NextResponse.json({
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω',
      botInfo: {
        projectId: id,
        isActive: botInstance.isActive,
        lastUpdated: botInstance.lastUpdated
      }
    });
  } catch (error) {
    const { id } = await params;
    logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id}`, {
      projectId: id,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      component: 'bot-setup'
    });

    return NextResponse.json(
      { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
      { status: 500 }
    );
  }
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
export const POST = withApiRateLimit(handlePOST);
