/**
 * @file: src/app/api/projects/[id]/bot/route.ts
 * @description: API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram –±–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
 * @project: SaaS Bonus System
 * @dependencies: Next.js App Router, Prisma, Grammy
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { ProjectService } from '@/lib/services/project.service';
import { botManager } from '@/lib/telegram/bot-manager';
import type { BotSettings } from '@/types/bonus';
import { logger } from '@/lib/logger';

// GET /api/projects/[id]/bot - –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await ProjectService.getProjectById(id);
    if (!project) {
      return NextResponse.json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    const botSettings = await db.botSettings.findUnique({
      where: { projectId: id }
    });

    return NextResponse.json(botSettings);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞' },
      { status: 500 }
    );
  }
}

// POST /api/projects/[id]/bot - –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const body = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await ProjectService.getProjectById(id);
    if (!project) {
      return NextResponse.json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.botToken) {
      return NextResponse.json(
        { error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
    if (!body.botToken.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞' },
        { status: 400 }
      );
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultMessageSettings = {
      welcomeMessage:
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.',
      balanceMessage: '–í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: {balance}',
      helpMessage:
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'
    };

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultFunctionalSettings = {
      showBalance: true,
      showLevel: true,
      showReferral: true,
      showHistory: true,
      showHelp: true
    };

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const botSettings = await db.botSettings.upsert({
      where: { projectId: id },
      update: {
        botToken: body.botToken,
        botUsername: body.botUsername || null,
        welcomeMessage:
          body.welcomeMessage || defaultMessageSettings.welcomeMessage,
        messageSettings: body.messageSettings || defaultMessageSettings,
        functionalSettings:
          body.functionalSettings || defaultFunctionalSettings,
        isActive: body.isActive !== undefined ? body.isActive : true
      },
      create: {
        projectId: id,
        botToken: body.botToken,
        botUsername: body.botUsername || null,
        welcomeMessage:
          body.welcomeMessage || defaultMessageSettings.welcomeMessage,
        messageSettings: body.messageSettings || defaultMessageSettings,
        functionalSettings:
          body.functionalSettings || defaultFunctionalSettings,
        isActive: body.isActive !== undefined ? body.isActive : true
      }
    });

    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ BotManager
    try {
      if (botSettings.isActive) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BotManager
        const botSettingsForManager = {
          ...botSettings,
          welcomeMessage:
            typeof botSettings.welcomeMessage === 'string'
              ? botSettings.welcomeMessage
              : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
        };
        await botManager.createBot(id, botSettingsForManager as BotSettings);
        console.log(`‚úÖ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id} —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      } else {
        await botManager.stopBot(id);
        console.log(`üîÑ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ BotManager:', error);
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î
    }

    return NextResponse.json(botSettings, { status: 201 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', error);

    if (error instanceof Error && error.message.includes('Unique constraint')) {
      return NextResponse.json(
        { error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ–µ–∫—Ç–µ' },
        { status: 409 }
      );
    }

    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞' },
      { status: 500 }
    );
  }
}

// PUT /api/projects/[id]/bot - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const body = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    const existingBot = await db.botSettings.findUnique({
      where: { projectId: id }
    });

    if (!existingBot) {
      return NextResponse.json(
        { error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (body.botToken && !body.botToken.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞' },
        { status: 400 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updateData: any = {};
    if (body.botToken !== undefined) updateData.botToken = body.botToken;
    if (body.botUsername !== undefined)
      updateData.botUsername = body.botUsername;
    if (body.welcomeMessage !== undefined)
      updateData.welcomeMessage = body.welcomeMessage;
    if (body.isActive !== undefined) updateData.isActive = body.isActive;

    const updatedBot = await db.botSettings.update({
      where: { projectId: id },
      data: updateData
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ BotManager
    try {
      if (updatedBot.isActive) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BotManager
        const botSettingsForManager = {
          ...updatedBot,
          welcomeMessage:
            typeof updatedBot.welcomeMessage === 'string'
              ? updatedBot.welcomeMessage
              : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–≠—Ç–æ –±–æ—Ç –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
        };
        await botManager.updateBot(id, botSettingsForManager as BotSettings);
        console.log(`üîÑ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      } else {
        await botManager.stopBot(id);
        console.log(`üîÑ –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotManager:', error);
    }

    return NextResponse.json(updatedBot);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞' },
      { status: 500 }
    );
  }
}

// DELETE /api/projects/[id]/bot - –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    const botSettings = await db.botSettings.findUnique({
      where: { projectId: id }
    });

    if (!botSettings) {
      return NextResponse.json(
        { error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const deactivatedBot = await db.botSettings.update({
      where: { projectId: id },
      data: { isActive: false }
    });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –≤ BotManager
    try {
      await botManager.stopBot(id);
      console.log(`üõë –ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotManager:', error);
    }

    return NextResponse.json({
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
      bot: deactivatedBot
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞' },
      { status: 500 }
    );
  }
}
