/**
 * @file: route.ts
 * @description: API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
 * @project: SaaS Bonus System
 * @dependencies: Next.js App Router, BotManager
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { logger } from '@/lib/logger';
import { botManager } from '@/lib/telegram/bot-manager';

// POST /api/projects/[id]/bot/restart - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id: projectId } = await context.params;
    const body = await request.json().catch(() => ({}));
    const shouldStop = body.stop === true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await db.project.findUnique({
      where: { id: projectId },
      include: {
        botSettings: true
      }
    });

    if (!project) {
      return NextResponse.json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (!project.botSettings) {
      return NextResponse.json(
        { error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    logger.info('üîÑ RESTART API –í–´–ó–í–ê–ù', {
      projectId,
      shouldStop,
      botToken: project.botSettings.botToken ? '***' + project.botSettings.botToken.slice(-4) : 'none',
      allBotsInManager: botManager.getAllBotsStatus(),
      component: 'bot-restart'
    });

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
    if (shouldStop) {
      // –≠–ö–°–¢–†–ï–ù–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –ë–û–¢–´ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      await botManager.emergencyStopAll();
      logger.info('üõë –í–°–ï –ë–û–¢–´ –≠–ö–°–¢–†–ï–ù–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–´', { projectId }, 'bot-restart');
      
      return NextResponse.json({
        success: true,
        message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      });
    }

    // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    // –≠–ö–°–¢–†–ï–ù–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –ë–û–¢–´ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await botManager.emergencyStopAll();
    logger.info('üö® –í–°–ï –ë–û–¢–´ –≠–ö–°–¢–†–ï–ù–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–´', { projectId }, 'bot-restart');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const botInstance = await botManager.createBot(
      projectId,
      project.botSettings as any
    );
    logger.info(
      'Bot restarted successfully',
      {
        projectId,
        botId: botInstance.bot.botInfo.id,
        username: botInstance.bot.botInfo.username
      },
      'bot-restart'
    );

    return NextResponse.json({
      success: true,
      message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω',
      bot: {
        id: botInstance.bot.botInfo.id,
        username: botInstance.bot.botInfo.username,
        isActive: botInstance.isActive,
        isPolling: botInstance.isPolling
      }
    });
  } catch (error) {
    logger.error(
      'Error restarting bot',
      {
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      },
      'bot-restart'
    );

    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞' },
      { status: 500 }
    );
  }
}
