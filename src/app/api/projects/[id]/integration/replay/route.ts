/**
 * @file: route.ts
 * @description: API endpoint –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Next.js, Prisma, logger
 * @created: 2025-09-23
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import type { NextRequest as NextRequestType } from 'next/server';
import { db } from '@/lib/db';

interface ReplayRequestBody {
  logId: string;
  endpoint: string;
  method: string;
  headers: Record<string, string>;
  body: unknown;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É—Å–µ—á–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ç–µ–ª
const safeJson = (obj: any, limit = 10000) => {
  try {
    const str = JSON.stringify(obj);
    if (str.length > limit) {
      return { _truncated: true, preview: str.slice(0, limit) } as any;
    }
    return obj;
  } catch {
    return { _error: 'serialization_failed' } as any;
  }
};

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const resolvedParams = await params;
  const projectId = resolvedParams.id;

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (!projectId) {
      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_REQUEST',
            message: 'ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
          }
        },
        { status: 400 }
      );
    }

    let body: ReplayRequestBody;
    try {
      body = await request.json();
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_JSON',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ –∑–∞–ø—Ä–æ—Å–µ'
          }
        },
        { status: 400 }
      );
    }

    const { logId, endpoint, method, headers, body: requestBody } = body;

    if (!logId || !endpoint || !method || !headers || !requestBody) {
      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_REQUEST',
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
          }
        },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    let project;
    try {
      project = await db.project.findUnique({
        where: { id: projectId },
        select: { id: true, webhookSecret: true, name: true }
      });
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î:', {
        projectId,
        error: dbError instanceof Error ? dbError.message : String(dbError),
        component: 'webhook-replay'
      });

      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'DATABASE_ERROR',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            details:
              dbError instanceof Error ? dbError.message : String(dbError)
          }
        },
        { status: 500 }
      );
    }

    if (!project) {
      return NextResponse.json(
        {
          success: false,
          error: { type: 'NOT_FOUND', message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }
        },
        { status: 404 }
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ webhook –∑–∞–ø—Ä–æ—Å–∞', {
      projectId,
      logId,
      endpoint,
      method,
      component: 'webhook-replay'
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    // –ï—Å–ª–∏ endpoint —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    let targetUrl = endpoint;
    let baseUrl: string | undefined;

    if (!/^https?:\/\//i.test(endpoint)) {
      baseUrl = process.env.NEXT_PUBLIC_APP_URL;

      if (!baseUrl) {
        const host = request.headers.get('host');
        const protocol = request.headers.get('x-forwarded-proto') || 'http';
        baseUrl = `${protocol}://${host}`;
      }

      targetUrl = `${baseUrl}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;
    }

    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è replay:', {
      envAppUrl: process.env.NEXT_PUBLIC_APP_URL,
      requestHost: request.headers.get('host'),
      requestProto: request.headers.get('x-forwarded-proto'),
      finalBaseUrl: baseUrl,
      endpoint,
      targetUrl,
      component: 'webhook-replay'
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è Node.js
    let response;
    let responseBody;

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å:', {
      targetUrl,
      method,
      hasBody: !!requestBody,
      contentType: request.headers.get('content-type'),
      component: 'webhook-replay'
    });

    try {
      response = await fetch(targetUrl, {
        method,
        headers: {
          'Content-Type': 'application/json',
          ...headers
        },
        body: JSON.stringify(requestBody)
      });

      console.log('‚úÖ Fetch –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        component: 'webhook-replay'
      });

      // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
      try {
        responseBody = await response.json();
        console.log('‚úÖ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:', {
          hasBody: !!responseBody,
          bodyType: typeof responseBody,
          component: 'webhook-replay'
        });
      } catch (jsonError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞:', {
          error:
            jsonError instanceof Error ? jsonError.message : String(jsonError),
          component: 'webhook-replay'
        });
        responseBody = { _error: 'failed_to_parse_response' };
      }
    } catch (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch –∑–∞–ø—Ä–æ—Å–∞:', {
        projectId,
        logId,
        targetUrl,
        method,
        error:
          fetchError instanceof Error ? fetchError.message : String(fetchError),
        errorName: fetchError instanceof Error ? fetchError.name : 'Unknown',
        cause:
          fetchError && typeof fetchError === 'object' && 'cause' in fetchError
            ? (fetchError as any).cause
            : undefined,
        stack: fetchError instanceof Error ? fetchError.stack : undefined,
        component: 'webhook-replay'
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      let errorType = 'FETCH_ERROR';
      let errorMessage = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞';

      if (fetchError instanceof Error) {
        if (fetchError.message.includes('ECONNREFUSED')) {
          errorType = 'CONNECTION_REFUSED';
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ECONNREFUSED)';
        } else if (fetchError.message.includes('ENOTFOUND')) {
          errorType = 'DNS_ERROR';
          errorMessage = 'DNS –æ—à–∏–±–∫–∞ - —Ö–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (fetchError.message.includes('timeout')) {
          errorType = 'TIMEOUT_ERROR';
          errorMessage = '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞';
        }
      }

      return NextResponse.json(
        {
          success: false,
          error: {
            type: errorType,
            message: errorMessage,
            details:
              fetchError instanceof Error
                ? fetchError.message
                : String(fetchError),
            targetUrl,
            method
          }
        },
        { status: 500 }
      );
    }

    // –ï—Å–ª–∏ fetch –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ fetch', {
      responseStatus: response.status,
      hasResponseBody: !!responseBody,
      component: 'webhook-replay'
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîÑ Webhook –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      projectId,
      logId,
      endpoint,
      method,
      requestStatus: response.status,
      responseSuccess: response.ok,
      responseBody: safeJson(responseBody),
      component: 'webhook-replay'
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!response || responseBody === undefined) {
      console.error(
        '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: response –∏–ª–∏ responseBody –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
        {
          hasResponse: !!response,
          hasResponseBody: responseBody !== undefined,
          component: 'webhook-replay'
        }
      );

      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_RESPONSE',
            message: '–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'
          }
        },
        { status: 500 }
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
    let newLog;
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥ –≤ –ë–î:', {
        projectId,
        endpoint,
        method,
        hasHeaders: !!headers,
        hasBody: !!requestBody,
        hasResponse: !!responseBody,
        status: response.status,
        ok: response.ok,
        component: 'webhook-replay'
      });

      newLog = await db.webhookLog.create({
        data: {
          projectId,
          endpoint,
          method,
          headers: safeJson(headers),
          body: safeJson(requestBody),
          response: safeJson(responseBody),
          status: response.status,
          success: response.ok
        }
      });

      console.log('üìù –ù–æ–≤—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–Ω', {
        projectId,
        logId: newLog.id,
        originalLogId: logId,
        component: 'webhook-replay'
      });
    } catch (dbCreateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∞ –≤ –ë–î:', {
        projectId,
        logId,
        error:
          dbCreateError instanceof Error
            ? dbCreateError.message
            : String(dbCreateError),
        component: 'webhook-replay'
      });

      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'DATABASE_CREATE_ERROR',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            details:
              dbCreateError instanceof Error
                ? dbCreateError.message
                : String(dbCreateError)
          }
        },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      log: {
        id: newLog.id,
        status: response.status,
        success: response.ok,
        response: responseBody
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ webhook –∑–∞–ø—Ä–æ—Å–∞:', {
      projectId: resolvedParams?.id || 'undefined',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      component: 'webhook-replay'
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ webhook –∑–∞–ø—Ä–æ—Å–∞:', {
      projectId: resolvedParams?.id || 'undefined',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      component: 'webhook-replay'
    });

    return NextResponse.json(
      {
        success: false,
        error: {
          type: 'REPLAY_ERROR',
          message:
            error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          details: error instanceof Error ? error.stack : String(error)
        }
      },
      { status: 500 }
    );
  }
}
