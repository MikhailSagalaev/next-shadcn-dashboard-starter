/**
 * @file: route.ts
 * @description: API endpoint –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Next.js, Prisma, logger
 * @created: 2025-09-23
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import type { NextRequest as NextRequestType } from 'next/server';
import { db } from '@/lib/db';

interface ReplayRequestBody {
  logId: string;
  endpoint: string;
  method: string;
  headers: Record<string, string>;
  body: unknown;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É—Å–µ—á–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ç–µ–ª
const safeJson = (obj: any, limit = 10000) => {
  try {
    const str = JSON.stringify(obj);
    if (str.length > limit) {
      return { _truncated: true, preview: str.slice(0, limit) } as any;
    }
    return obj;
  } catch {
    return { _error: 'serialization_failed' } as any;
  }
};

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const resolvedParams = await params;
  const projectId = resolvedParams.id;

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (!projectId) {
      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_REQUEST',
            message: 'ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
          }
        },
        { status: 400 }
      );
    }

    let body: ReplayRequestBody;
    try {
      body = await request.json();
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_JSON',
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ –∑–∞–ø—Ä–æ—Å–µ'
          }
        },
        { status: 400 }
      );
    }

    const { logId, endpoint, method, headers, body: requestBody } = body;

    if (!logId || !endpoint || !method || !headers || !requestBody) {
      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'INVALID_REQUEST',
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
          }
        },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    let project;
    try {
      project = await db.project.findUnique({
        where: { id: projectId },
        select: { id: true, webhookSecret: true, name: true }
      });
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î:', {
        projectId,
        error: dbError instanceof Error ? dbError.message : String(dbError),
        component: 'webhook-replay'
      });

      return NextResponse.json(
        {
          success: false,
          error: {
            type: 'DATABASE_ERROR',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            details:
              dbError instanceof Error ? dbError.message : String(dbError)
          }
        },
        { status: 500 }
      );
    }

    if (!project) {
      return NextResponse.json(
        {
          success: false,
          error: { type: 'NOT_FOUND', message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }
        },
        { status: 404 }
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ webhook –∑–∞–ø—Ä–æ—Å–∞', {
      projectId,
      logId,
      endpoint,
      method,
      component: 'webhook-replay'
    });

    // –í–ê–ñ–ù–û: –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ server-side –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ,
    // –º—ã –Ω–µ –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å fetch –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ URL
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    console.log('üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞', {
      projectId,
      logId,
      endpoint,
      method,
      component: 'webhook-replay'
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    return NextResponse.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
      replayData: {
        endpoint,
        method,
        headers,
        body: requestBody,
        projectId,
        logId
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', {
      projectId,
      logId,
      endpoint,
      method,
      component: 'webhook-replay'
    });

    return NextResponse.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
      replayData: {
        endpoint,
        method,
        headers,
        body: requestBody,
        projectId,
        logId
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ webhook –∑–∞–ø—Ä–æ—Å–∞:', {
      projectId: resolvedParams?.id || 'undefined',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      component: 'webhook-replay'
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ webhook –∑–∞–ø—Ä–æ—Å–∞:', {
      projectId: resolvedParams?.id || 'undefined',
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      component: 'webhook-replay'
    });

    return NextResponse.json(
      {
        success: false,
        error: {
          type: 'REPLAY_ERROR',
          message:
            error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          details: error instanceof Error ? error.stack : String(error)
        }
      },
      { status: 500 }
    );
  }
}
