/**
 * @file: route.ts
 * @description: API endpoint –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: Next.js, Prisma, logger
 * @created: 2025-09-23
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { logger } from '@/lib/logger';

interface ReplayRequestBody {
  logId: string;
  endpoint: string;
  method: string;
  headers: Record<string, string>;
  body: unknown;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É—Å–µ—á–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ç–µ–ª
const safeJson = (obj: any, limit = 10000) => {
  try {
    const str = JSON.stringify(obj);
    if (str.length > limit) {
      return { _truncated: true, preview: str.slice(0, limit) } as any;
    }
    return obj;
  } catch {
    return { _error: 'serialization_failed' } as any;
  }
};

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const resolvedParams = await params;
  const projectId = resolvedParams.id;

  try {
    const body: ReplayRequestBody = await request.json();
    const { logId, endpoint, method, headers, body: requestBody } = body;

    if (!projectId) {
      return NextResponse.json(
        { error: { type: 'INVALID_REQUEST', message: 'ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' } },
        { status: 400 }
      );
    }

    if (!logId || !endpoint || !method || !headers || !requestBody) {
      return NextResponse.json(
        {
          error: {
            type: 'INVALID_REQUEST',
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
          }
        },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = await db.project.findUnique({
      where: { id: projectId },
      select: { id: true, webhookSecret: true, name: true }
    });

    if (!project) {
      return NextResponse.json(
        { error: { type: 'NOT_FOUND', message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' } },
        { status: 404 }
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ webhook –∑–∞–ø—Ä–æ—Å–∞', {
      projectId,
      logId,
      endpoint,
      method,
      component: 'webhook-replay'
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
    const targetUrl = `${baseUrl}${endpoint}`;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(targetUrl, {
      method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      },
      body: JSON.stringify(requestBody)
    });

    // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
    let responseBody;
    try {
      responseBody = await response.json();
    } catch {
      responseBody = { _error: 'failed_to_parse_response' };
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info('üîÑ Webhook –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      projectId,
      logId,
      endpoint,
      method,
      requestStatus: response.status,
      responseSuccess: response.ok,
      responseBody: safeJson(responseBody),
      component: 'webhook-replay'
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
    const newLog = await db.webhookLog.create({
      data: {
        projectId,
        endpoint,
        method,
        headers: safeJson(headers),
        body: safeJson(requestBody),
        response: safeJson(responseBody),
        status: response.status,
        success: response.ok
      }
    });

    logger.info('üìù –ù–æ–≤—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–Ω', {
      projectId,
      logId: newLog.id,
      originalLogId: logId,
      component: 'webhook-replay'
    });

    return NextResponse.json({
      success: true,
      message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      log: {
        id: newLog.id,
        status: response.status,
        success: response.ok,
        response: responseBody
      }
    });
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ webhook –∑–∞–ø—Ä–æ—Å–∞', {
      projectId,
      error: error instanceof Error ? error.message : String(error),
      component: 'webhook-replay'
    });

    return NextResponse.json(
      {
        success: false,
        error: {
          type: 'REPLAY_ERROR',
          message:
            error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          details: error
        }
      },
      { status: 500 }
    );
  }
}
