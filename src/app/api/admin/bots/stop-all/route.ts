/**
 * @file: route.ts
 * @description: API –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
 * @project: SaaS Bonus System
 * @dependencies: BotManager
 * @created: 2025-01-31
 * @author: AI Assistant + User
 */

import { NextRequest, NextResponse } from 'next/server';
import { botManager } from '@/lib/telegram/bot-manager';
import { logger } from '@/lib/logger';

// POST /api/admin/bots/stop-all - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
export async function POST(request: NextRequest) {
  try {
    logger.info('–ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –±–æ—Ç–æ–≤', {}, 'admin-api');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const activeBots = botManager.getAllBots();

    if (activeBots.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
        stoppedCount: 0
      });
    }

    logger.warn(
      `üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: –Ω–∞–π–¥–µ–Ω–æ ${activeBots.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤`,
      {
        botCount: activeBots.length
      },
      'admin-api'
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try {
      await botManager.emergencyStopAll();

      const stoppedCount = activeBots.length;
      logger.info(
        `‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
        {
          stoppedCount
        },
        'admin-api'
      );

      return NextResponse.json({
        success: true,
        message: `‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –±–æ—Ç–æ–≤, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã`,
        stoppedCount,
        totalBots: activeBots.length,
        method: 'emergency_stop'
      });
    } catch (error) {
      // Fallback –∫ –æ–±—ã—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –µ—Å–ª–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
      logger.warn(
        `–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é`,
        {
          error: error instanceof Error ? error.message : 'Unknown error'
        },
        'admin-api'
      );

      let stoppedCount = 0;
      const errors: string[] = [];

      for (const [projectId] of activeBots) {
        try {
          await botManager.stopBot(projectId);
          stoppedCount++;
          logger.info(
            `–ë–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`,
            { projectId },
            'admin-api'
          );
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${projectId}: ${error instanceof Error ? error.message : 'Unknown error'}`;
          errors.push(errorMsg);
          logger.error(errorMsg, { projectId }, 'admin-api');
        }
      }

      return NextResponse.json({
        success: true,
        message: `–û–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: ${stoppedCount} –∏–∑ ${activeBots.length} –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`,
        stoppedCount,
        totalBots: activeBots.length,
        errors: errors.length > 0 ? errors : undefined,
        method: 'fallback_stop'
      });
    }
  } catch (error) {
    logger.error(
      '–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤',
      {
        error: error instanceof Error ? error.message : 'Unknown error'
      },
      'admin-api'
    );

    return NextResponse.json(
      {
        success: false,
        error: '–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
