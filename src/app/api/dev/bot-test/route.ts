import { NextRequest, NextResponse } from 'next/server';

interface TestBotConfig {
  botToken?: string;
  webhookUrl?: string;
  commands: string[];
  testMode: boolean;
}

interface TestMessage {
  id: string;
  type: 'command' | 'text' | 'callback';
  content: string;
  timestamp: string;
  response?: any;
}

// –î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const defaultTestConfig: TestBotConfig = {
  botToken: 'demo_bot_token',
  webhookUrl: 'https://example.com/api/telegram/webhook/test',
  commands: ['/start', '/help', '/status', '/bonus'],
  testMode: true
};

// –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let testMessages: TestMessage[] = [];

/**
 * GET /api/dev/bot-test
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '20');

    console.log('Bot test configuration requested');

    return NextResponse.json({
      success: true,
      config: defaultTestConfig,
      messages: testMessages.slice(-limit),
      totalMessages: testMessages.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Bot test config error:', error);
    return NextResponse.json(
      { error: 'Failed to get test configuration' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/dev/bot-test
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, type = 'text', projectId = 'test' } = body;

    console.log('Test message received:', { message, type, projectId });

    if (!message) {
      return NextResponse.json(
        { error: 'Message is required' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage: TestMessage = {
      id: `test_${Date.now()}`,
      type,
      content: message,
      timestamp: new Date().toISOString()
    };

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞
    let botResponse: any = null;

    switch (type) {
      case 'command':
        botResponse = await simulateCommandResponse(message, projectId);
        break;

      case 'callback':
        botResponse = await simulateCallbackResponse(message, projectId);
        break;

      default:
        botResponse = await simulateTextResponse(message, projectId);
        break;
    }

    testMessage.response = botResponse;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    testMessages.push(testMessage);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if (testMessages.length > 100) {
      testMessages = testMessages.slice(-100);
    }

    console.log('Bot response generated:', botResponse);

    return NextResponse.json({
      success: true,
      message: testMessage,
      response: botResponse,
      processed: true
    });
  } catch (error) {
    console.error('Bot test error:', error);
    return NextResponse.json(
      { error: 'Failed to process test message' },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/dev/bot-test
 * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
 */
export async function DELETE(request: NextRequest) {
  try {
    console.log('Clearing test message history');

    const clearedCount = testMessages.length;
    testMessages = [];

    return NextResponse.json({
      success: true,
      message: 'Test history cleared',
      clearedMessages: clearedCount,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Clear test history error:', error);
    return NextResponse.json(
      { error: 'Failed to clear test history' },
      { status: 500 }
    );
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
async function simulateCommandResponse(command: string, projectId: string) {
  console.log('Simulating command response:', command);

  switch (command) {
    case '/start':
      return {
        method: 'sendMessage',
        text: `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!\n\n–ü—Ä–æ–µ–∫—Ç: ${projectId}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ü–æ–º–æ—â—å\n/status - –°—Ç–∞—Ç—É—Å\n/bonus - –ë–æ–Ω—É—Å—ã`,
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
              { text: 'üéÅ –ë–æ–Ω—É—Å—ã', callback_data: 'bonuses' }
            ]
          ]
        }
      };

    case '/help':
      return {
        method: 'sendMessage',
        text: `üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞–ª–æ\n/help - –°–ø—Ä–∞–≤–∫–∞\n/status - –°—Ç–∞—Ç—É—Å\n/bonus - –ë–æ–Ω—É—Å—ã\n\n‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞!`
      };

    case '/status':
      return {
        method: 'sendMessage',
        text: `üìä –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å\n\nüÜî Test User ID: 12345\nüì± –ü—Ä–æ–µ–∫—Ç: ${projectId}\nüîß –†–µ–∂–∏–º: Development\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}`
      };

    case '/bonus':
      const randomBonus = Math.floor(Math.random() * 1000) + 100;
      return {
        method: 'sendMessage',
        text: `üéÅ –¢–µ—Å—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å—ã\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${randomBonus} –±–æ–Ω—É—Å–æ–≤\n‚≠ê –£—Ä–æ–≤–µ–Ω—å: Test Level\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${Math.floor(Math.random() * 5) + 1}`
      };

    default:
      return {
        method: 'sendMessage',
        text: `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
      };
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
async function simulateCallbackResponse(
  callbackData: string,
  projectId: string
) {
  console.log('Simulating callback response:', callbackData);

  switch (callbackData) {
    case 'stats':
      return {
        method: 'sendMessage',
        text: `üìä –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Math.floor(Math.random() * 100) + 50}\nüìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +${Math.floor(Math.random() * 20) + 5}%\nüéØ –¢–µ—Å—Ç–æ–≤: ${Math.floor(Math.random() * 50) + 10}`
      };

    case 'bonuses':
      return {
        method: 'sendMessage',
        text: `üéÅ –¢–µ—Å—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å—ã\n\nüí∞ –î–µ–º–æ –±–∞–ª–∞–Ω—Å: ${Math.floor(Math.random() * 500) + 100}\nüîß –†–µ–∂–∏–º: Development\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è`
      };

    default:
      return {
        method: 'sendMessage',
        text: `üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: ${callbackData}`
      };
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç
async function simulateTextResponse(text: string, projectId: string) {
  console.log('Simulating text response:', text);

  const responses = [
    `–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`,
    `ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞: "${text}"`,
    `üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç: "${text}"`,
    `üí¨ Echo: ${text}`
  ];

  const randomResponse =
    responses[Math.floor(Math.random() * responses.length)];

  return {
    method: 'sendMessage',
    text: `${randomResponse}\n\nüîß –ü—Ä–æ–µ–∫—Ç: ${projectId}\n‚è∞ ${new Date().toLocaleTimeString('ru-RU')}`
  };
}
