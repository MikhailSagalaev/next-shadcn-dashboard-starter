import { NextRequest, NextResponse } from 'next/server';
import {
  processBonusExpiration,
  scheduleExpirationWarnings
} from '@/features/bonuses/utils/bonus-expiration';
import type { BonusTransaction } from '@/features/bonuses/types';

// –°–∏–º—É–ª—è—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å –ë–î
let mockUsers = [
  {
    id: '1',
    name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
    email: 'ivan@example.com',
    bonusBalance: 1500,
    totalEarned: 3000,
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date()
  },
  {
    id: '2',
    name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
    email: 'maria@example.com',
    bonusBalance: 750,
    totalEarned: 1200,
    createdAt: new Date('2024-02-01'),
    updatedAt: new Date()
  }
];

let mockTransactions: BonusTransaction[] = [
  {
    id: '1',
    userId: '1',
    type: 'EARN',
    amount: 500,
    description: '–ë–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É',
    expiresAt: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è
    createdAt: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000) // –°–æ–∑–¥–∞–Ω 25 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
  },
  {
    id: '2',
    userId: '1',
    type: 'EARN',
    amount: 1000,
    description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å',
    expiresAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000)
  },
  {
    id: '3',
    userId: '2',
    type: 'EARN',
    amount: 250,
    description: '–ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤',
    expiresAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // –£–∂–µ –∏—Å—Ç–µ–∫
    createdAt: new Date(Date.now() - 31 * 24 * 60 * 60 * 1000)
  }
];

let mockNotifications: any[] = [];

/**
 * Cron job –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
 * –î–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é cron job (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–∞ –∑–∞—â–∏—Ç–∞)
    const authHeader = request.headers.get('authorization');
    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('üîÑ –ó–∞–ø—É—Å–∫ cron job –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤...');

    // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–æ–Ω—É—Å—ã
    const expirationResult = await processBonusExpiration(
      mockTransactions,
      mockUsers
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (expirationResult.expirationTransactions.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è
      mockTransactions.push(...expirationResult.expirationTransactions);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      expirationResult.expiredTransactions.forEach((expiredTx) => {
        const user = mockUsers.find((u) => u.id === expiredTx.userId);
        if (user) {
          user.bonusBalance = Math.max(0, user.bonusBalance - expiredTx.amount);
          user.updatedAt = new Date();
        }
      });

      console.log(
        `üí∏ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${expirationResult.summary.totalExpiredBonuses} –∏—Å—Ç–µ–∫—à–∏—Ö –±–æ–Ω—É—Å–æ–≤ –Ω–∞ —Å—É–º–º—É ${expirationResult.summary.totalExpiredAmount}`
      );
    }

    // 2. –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –±–æ–Ω—É—Å–∞—Ö
    const warningNotifications = await scheduleExpirationWarnings(
      mockTransactions,
      mockUsers,
      [7, 3, 1] // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 7, 3 –∏ 1 –¥–µ–Ω—å
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    mockNotifications.push(...expirationResult.notifications);
    mockNotifications.push(...warningNotifications);

    // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    for (const notification of [
      ...expirationResult.notifications,
      ...warningNotifications
    ]) {
      await sendEmailNotification(notification);
    }

    // 4. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      processing: {
        expiredBonuses: expirationResult.summary.totalExpiredBonuses,
        affectedUsers: expirationResult.summary.affectedUsers,
        totalExpiredAmount: expirationResult.summary.totalExpiredAmount
      },
      notifications: {
        expirationNotifications: expirationResult.notifications.length,
        warningNotifications: warningNotifications.length,
        totalSent:
          expirationResult.notifications.length + warningNotifications.length
      },
      nextRunAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    };

    console.log('‚úÖ Cron job –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', report);

    return NextResponse.json({
      success: true,
      message: 'Bonus expiration processing completed',
      report
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ cron job:', error);

    return NextResponse.json(
      {
        success: false,
        error: 'Internal server error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

/**
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤...');

    // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É GET –∑–∞–ø—Ä–æ—Å–∞
    return await GET(request);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ:', error);

    return NextResponse.json(
      {
        success: false,
        error: 'Manual processing failed',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
 */
export async function HEAD(request: NextRequest) {
  return NextResponse.json({
    lastRun: new Date().toISOString(),
    nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    status: 'healthy'
  });
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendEmailNotification(notification: any): Promise<void> {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
  console.log(
    `üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.userId}:`,
    {
      title: notification.title,
      message: notification.message
    }
  );

  // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
  await new Promise((resolve) => setTimeout(resolve, 100));
}
