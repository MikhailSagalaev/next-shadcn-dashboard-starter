import { NextRequest, NextResponse } from 'next/server';

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    chat: {
      id: number;
      type: string;
      title?: string;
      username?: string;
      first_name?: string;
      last_name?: string;
    };
    date: number;
    text?: string;
  };
  callback_query?: {
    id: string;
    from: any;
    message?: any;
    data?: string;
  };
}

interface BotCommand {
  command: string;
  description: string;
  handler: (update: TelegramUpdate, projectId: string) => Promise<any>;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
const botCommands: BotCommand[] = [
  {
    command: '/start',
    description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
    handler: async (update, projectId) => {
      const chatId = update.message?.chat.id;
      const userName = update.message?.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç ${projectId}!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ü–æ–º–æ—â—å\n/status - –°—Ç–∞—Ç—É—Å\n/bonus - –ú–æ–∏ –±–æ–Ω—É—Å—ã`,
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
              { text: 'üéÅ –ë–æ–Ω—É—Å—ã', callback_data: 'bonuses' }
            ],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }]
          ]
        }
      };
    }
  },
  {
    command: '/help',
    description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
    handler: async (update, projectId) => {
      const chatId = update.message?.chat.id;

      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n/bonus - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.`
      };
    }
  },
  {
    command: '/status',
    description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    handler: async (update, projectId) => {
      const chatId = update.message?.chat.id;
      const userId = update.message?.from.id;

      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üìä –í–∞—à —Å—Ç–∞—Ç—É—Å\n\nüÜî ID: ${userId}\nüì± –ü—Ä–æ–µ–∫—Ç: ${projectId}\n‚≠ê –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π\nüéÅ –ë–æ–Ω—É—Å—ã: ${Math.floor(Math.random() * 1000) + 100}\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –Ø–Ω–≤–∞—Ä—å 2024`,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_status' }]
          ]
        }
      };
    }
  }
];

/**
 * POST /api/telegram/webhook/[projectId]
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
 */
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ projectId: string }> }
) {
  try {
    const { projectId } = await params;
    const update: TelegramUpdate = await request.json();

    console.log('Telegram webhook:', { projectId, updateId: update.update_id });

    let response: any = null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message?.text) {
      const text = update.message.text;
      const command = text.split(' ')[0];

      // –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
      const botCommand = botCommands.find((cmd) => cmd.command === command);

      if (botCommand) {
        response = await botCommand.handler(update, projectId);
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        response = {
          method: 'sendMessage',
          chat_id: update.message.chat.id,
          text: `–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
        };
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      response = await handleCallbackQuery(update.callback_query, projectId);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (response) {
      await sendTelegramResponse(response, projectId);
    }

    return NextResponse.json({
      success: true,
      processed: true,
      update_id: update.update_id
    });
  } catch (error) {
    console.error('Telegram webhook error:', error);
    return NextResponse.json(
      { error: 'Failed to process webhook' },
      { status: 500 }
    );
  }
}

/**
 * GET /api/telegram/webhook/[projectId]
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ projectId: string }> }
) {
  try {
    const { projectId } = await params;

    console.log('Webhook status check for project:', projectId);

    return NextResponse.json({
      success: true,
      project_id: projectId,
      webhook_status: 'active',
      bot_commands: botCommands.map((cmd) => ({
        command: cmd.command,
        description: cmd.description
      })),
      last_update: new Date().toISOString()
    });
  } catch (error) {
    console.error('Webhook status error:', error);
    return NextResponse.json(
      { error: 'Failed to check webhook status' },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
async function handleCallbackQuery(callbackQuery: any, projectId: string) {
  const chatId = callbackQuery.message?.chat?.id;
  const data = callbackQuery.data;

  console.log('Callback query:', { data, projectId });

  // –û—Ç–≤–µ—Ç –Ω–∞ callback query
  await answerCallbackQuery(callbackQuery.id);

  switch (data) {
    case 'stats':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Math.floor(Math.random() * 1000) + 500}\nüìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +${Math.floor(Math.random() * 20) + 5}%\nüéØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${(Math.random() * 10 + 5).toFixed(1)}%`
      };

    case 'bonuses':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `üéÅ –í–∞—à–∏ –±–æ–Ω—É—Å—ã\n\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${Math.floor(Math.random() * 1000) + 100} –±–æ–Ω—É—Å–æ–≤\n‚≠ê –£—Ä–æ–≤–µ–Ω—å: Gold\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${Math.floor(Math.random() * 10) + 3}`,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∏ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã', callback_data: 'spend_bonuses' }]
          ]
        }
      };

    case 'settings':
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\nüåç –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\nüì± –¢–µ–º–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è`,
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'toggle_notifications' },
              { text: 'üåç –Ø–∑—ã–∫', callback_data: 'change_language' }
            ]
          ]
        }
      };

    default:
      return {
        method: 'sendMessage',
        chat_id: chatId,
        text: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${data}`
      };
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç—É
async function sendTelegramResponse(response: any, projectId: string) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API
  console.log('Sending telegram response:', {
    projectId,
    method: response.method
  });
}

// –û—Ç–≤–µ—Ç –Ω–∞ callback query
async function answerCallbackQuery(callbackQueryId: string) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ answerCallbackQuery API
  console.log('Answering callback query:', callbackQueryId);
}
