/**
 * @file: src/features/bot-constructor/components/bot-constructor-header.tsx
 * @description: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–∞–º–∏
 * @project: SaaS Bonus System
 * @dependencies: React, UI components
 * @created: 2025-09-30
 * @author: AI Assistant + User
 */

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import {
  ArrowLeft,
  Save,
  Play,
  Settings,
  Plus,
  FileText,
  Eye,
  EyeOff,
  MoreHorizontal
} from 'lucide-react';

import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';

import type { BotFlow, CreateFlowRequest } from '@/types/bot-constructor';

interface BotConstructorHeaderProps {
  projectId: string;
  flows: BotFlow[];
  currentFlow: BotFlow | null;
  selectedFlowId: string | null;
  onFlowSelect: (flowId: string | null) => void;
  onFlowCreate: (data: CreateFlowRequest) => Promise<BotFlow>;
  onFlowLoad: (flowId: string) => Promise<BotFlow | null>;
  onFlowSave: () => Promise<void>;
  onFlowDelete: (flowId: string) => Promise<void>;
  isPreviewMode: boolean;
  onPreviewToggle: (preview: boolean) => void;
}

export function BotConstructorHeader({
  projectId,
  flows,
  currentFlow,
  selectedFlowId,
  onFlowSelect,
  onFlowCreate,
  onFlowLoad,
  onFlowSave,
  onFlowDelete,
  isPreviewMode,
  onPreviewToggle
}: BotConstructorHeaderProps) {
  const router = useRouter();
  const { toast } = useToast();

  // Dialog states
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [newFlowName, setNewFlowName] = useState('');
  const [newFlowDescription, setNewFlowDescription] = useState('');

  // Handle flow selection
  const handleFlowSelect = async (flowId: string) => {
    onFlowSelect(flowId);
    await onFlowLoad(flowId);
  };

  // Handle create flow
  const handleCreateFlow = async () => {
    if (!newFlowName.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞',
        variant: 'destructive'
      });
      return;
    }

    try {
      await onFlowCreate({
        name: newFlowName.trim(),
        description: newFlowDescription.trim() || undefined
      });

      setShowCreateDialog(false);
      setNewFlowName('');
      setNewFlowDescription('');
    } catch (error) {
      // Error handled in hook
    }
  };

  // Handle delete flow
  const handleDeleteFlow = async () => {
    if (!currentFlow) return;

    try {
      await onFlowDelete(currentFlow.id);
      setShowDeleteDialog(false);
    } catch (error) {
      // Error handled in hook
    }
  };

  return (
    <>
      {/* Header */}
      <div className='bg-background/95 supports-[backdrop-filter]:bg-background/60 border-b backdrop-blur'>
        <div className='flex h-16 items-center px-4'>
          {/* Back button */}
          <Button
            variant='ghost'
            size='sm'
            onClick={() => router.back()}
            className='mr-4'
          >
            <ArrowLeft className='mr-2 h-4 w-4' />
            –ù–∞–∑–∞–¥
          </Button>

          {/* Title */}
          <div className='flex-1'>
            <h1 className='text-2xl font-bold tracking-tight'>
              ü§ñ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–∞
            </h1>
            {currentFlow && (
              <p className='text-muted-foreground text-sm'>
                {currentFlow.description ||
                  '–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Telegram –±–æ—Ç–æ–≤'}
              </p>
            )}
          </div>

          {/* Actions */}
          <div className='flex items-center space-x-2'>
            {/* Flow selector */}
            <Select
              value={selectedFlowId || ''}
              onValueChange={handleFlowSelect}
            >
              <SelectTrigger className='w-[200px]'>
                <SelectValue placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫' />
              </SelectTrigger>
              <SelectContent>
                {flows.map((flow) => (
                  <SelectItem key={flow.id} value={flow.id}>
                    <div className='flex w-full items-center justify-between'>
                      <span>{flow.name}</span>
                      {flow.isActive && (
                        <Badge variant='secondary' className='ml-2 text-xs'>
                          –ê–∫—Ç–∏–≤–µ–Ω
                        </Badge>
                      )}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Create flow */}
            <Button
              variant='outline'
              size='sm'
              onClick={() => setShowCreateDialog(true)}
            >
              <Plus className='mr-2 h-4 w-4' />
              –ù–æ–≤—ã–π –ø–æ—Ç–æ–∫
            </Button>

            {/* Preview toggle */}
            <Button
              variant={isPreviewMode ? 'default' : 'outline'}
              size='sm'
              onClick={() => onPreviewToggle(!isPreviewMode)}
            >
              {isPreviewMode ? (
                <EyeOff className='mr-2 h-4 w-4' />
              ) : (
                <Eye className='mr-2 h-4 w-4' />
              )}
              {isPreviewMode ? '–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–µ–≤—å—é' : '–ü—Ä–µ–≤—å—é'}
            </Button>

            {/* Save */}
            <Button
              variant='outline'
              size='sm'
              onClick={onFlowSave}
              disabled={!currentFlow}
            >
              <Save className='mr-2 h-4 w-4' />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>

            {/* More actions */}
            {currentFlow && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant='outline' size='sm'>
                    <MoreHorizontal className='h-4 w-4' />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align='end'>
                  <DropdownMenuItem>
                    <FileText className='mr-2 h-4 w-4' />
                    –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Settings className='mr-2 h-4 w-4' />
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    className='text-destructive'
                    onClick={() => setShowDeleteDialog(true)}
                  >
                    –£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </div>
        </div>
      </div>

      {/* Create Flow Dialog */}
      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫</DialogTitle>
            <DialogDescription>
              –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
            </DialogDescription>
          </DialogHeader>

          <div className='space-y-4'>
            <div>
              <Label htmlFor='flow-name'>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞</Label>
              <Input
                id='flow-name'
                value={newFlowName}
                onChange={(e) => setNewFlowName(e.target.value)}
                placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç–±–æ—Ç'
              />
            </div>

            <div>
              <Label htmlFor='flow-description'>–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
              <Input
                id='flow-description'
                value={newFlowDescription}
                onChange={(e) => setNewFlowDescription(e.target.value)}
                placeholder='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞'
              />
            </div>
          </div>

          <DialogFooter>
            <Button
              variant='outline'
              onClick={() => setShowCreateDialog(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleCreateFlow}>–°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Flow Dialog */}
      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–£–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫</DialogTitle>
            <DialogDescription>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫ "{currentFlow?.name}"? –≠—Ç–æ
              –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </DialogDescription>
          </DialogHeader>

          <DialogFooter>
            <Button
              variant='outline'
              onClick={() => setShowDeleteDialog(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button variant='destructive' onClick={handleDeleteFlow}>
              –£–¥–∞–ª–∏—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
