/**
 * @file: src/features/bots/components/bot-management-view.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–∞
 * @project: SaaS Bonus System
 * @dependencies: React, HeroUI, form handling
 * @created: 2024-12-31
 * @author: AI Assistant + User
 */

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Bot, BotOff, Settings, Eye, EyeOff, ArrowLeft, Save, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Heading } from '@/components/ui/heading';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { BotTestDialog } from './bot-test-dialog';
import type { Project, BotSettings } from '@/types/bonus';

interface BotManagementViewProps {
  projectId: string;
}

export function BotManagementView({ projectId }: BotManagementViewProps) {
  const router = useRouter();
  const { toast } = useToast();

  // State
  const [project, setProject] = useState<Project | null>(null);
  const [botSettings, setBotSettings] = useState<BotSettings | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [showToken, setShowToken] = useState(false);


  // Form state
  const [formData, setFormData] = useState({
    botToken: '',
    botUsername: '',
    welcomeMessage: '',
    isActive: true
  });

  const loadData = async () => {
    try {
      setLoading(true);
      
      // Load project
      const projectResponse = await fetch(`/api/projects/${projectId}`);
      if (projectResponse.ok) {
        const projectData = await projectResponse.json();
        setProject(projectData);
      }

      // Load bot settings
      const botResponse = await fetch(`/api/projects/${projectId}/bot`);
      if (botResponse.ok) {
        const botData = await botResponse.json();
        if (botData) {
          setBotSettings(botData);
          setFormData({
            botToken: botData.botToken || '',
            botUsername: botData.botUsername || '',
            welcomeMessage: botData.welcomeMessage || '',
            isActive: botData.isActive ?? true
          });
        }
      }
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, [loadData]);

  const handleSave = async () => {
    if (!formData.botToken.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        variant: 'destructive',
      });
      return;
    }

    try {
      setSaving(true);
      
      const method = botSettings ? 'PUT' : 'POST';
      const response = await fetch(`/api/projects/${projectId}/bot`, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const updatedBot = await response.json();
        setBotSettings(updatedBot);
        
        toast({
          title: '–£—Å–ø–µ—Ö',
          description: botSettings ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' : '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        });
      } else {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive',
      });
    } finally {
      setSaving(false);
    }
  };

  const handleDeactivate = async () => {
    if (!botSettings) return;

    try {
      const response = await fetch(`/api/projects/${projectId}/bot`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setBotSettings({ ...botSettings, isActive: false });
        setFormData({ ...formData, isActive: false });
        
        toast({
          title: '–£—Å–ø–µ—Ö',
          description: '–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        });
      }
    } catch (error) {
      // TODO: –ª–æ–≥–≥–µ—Ä
      // console.error('–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞',
        variant: 'destructive',
      });
    }
  };



  if (loading) {
    return (
      <div className="flex flex-1 flex-col space-y-4">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/3"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          <div className="h-32 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  const getBotStatusBadge = () => {
    if (!botSettings) {
      return <Badge variant="secondary">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</Badge>;
    }
    
    if (botSettings.isActive) {
      return <Badge variant="default" className="bg-green-600">–ê–∫—Ç–∏–≤–µ–Ω</Badge>;
    } else {
      return <Badge variant="destructive">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</Badge>;
    }
  };

  return (
    <div className="flex flex-1 flex-col space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.push('/dashboard/projects')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
          </Button>
          <div>
            <Heading
              title={`Telegram –±–æ—Ç: ${project?.name || '–ü—Ä–æ–µ–∫—Ç'}`}
              description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            />
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {getBotStatusBadge()}
          {botSettings?.isActive && project && (
            <BotTestDialog 
              project={project}
              botSettings={botSettings}
            />
          )}
        </div>
      </div>

      <Separator />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main form */}
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="h-5 w-5 mr-2" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
              </CardTitle>
              <CardDescription>
                –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Bot Token */}
              <div className="space-y-2">
                <Label htmlFor="botToken">–¢–æ–∫–µ–Ω –±–æ—Ç–∞ *</Label>
                <div className="flex space-x-2">
                  <Input
                    id="botToken"
                    type={showToken ? 'text' : 'password'}
                    placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
                    value={formData.botToken}
                    onChange={(e) => setFormData({ ...formData, botToken: e.target.value })}
                    className="flex-1"
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setShowToken(!showToken)}
                  >
                    {showToken ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>
                <p className="text-sm text-muted-foreground">
                  –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
                </p>
              </div>

              {/* Bot Username */}
              <div className="space-y-2">
                <Label htmlFor="botUsername">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞</Label>
                <Input
                  id="botUsername"
                  placeholder="@my_bonus_bot"
                  value={formData.botUsername}
                  onChange={(e) => setFormData({ ...formData, botUsername: e.target.value })}
                />
                <p className="text-sm text-muted-foreground">
                  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                </p>
              </div>

              {/* Welcome Message */}
              <div className="space-y-2">
                <Label htmlFor="welcomeMessage">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</Label>
                <Textarea
                  id="welcomeMessage"
                  placeholder="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É! üéâ"
                  value={formData.welcomeMessage}
                  onChange={(e) => setFormData({ ...formData, welcomeMessage: e.target.value })}
                  rows={4}
                />
                <p className="text-sm text-muted-foreground">
                  –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </p>
              </div>

              {/* Active Switch */}
              <div className="flex items-center justify-between p-4 border rounded-lg">
                <div className="space-y-0.5">
                  <Label className="text-base">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞</Label>
                  <p className="text-sm text-muted-foreground">
                    –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
                  </p>
                </div>
                <Switch
                  checked={formData.isActive}
                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}
                />
              </div>
            </CardContent>
          </Card>

          {/* Actions */}
          <div className="flex justify-between">
            <div>
              {botSettings && (
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={handleDeactivate}
                  disabled={!botSettings.isActive}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              )}
            </div>
            <Button
              onClick={handleSave}
              disabled={saving || !formData.botToken.trim()}
            >
              <Save className="h-4 w-4 mr-2" />
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
            </Button>
          </div>
        </div>

        {/* Sidebar info */}
        <div className="space-y-6">
          {/* Project info */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div>
                <Label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                <p className="text-sm text-muted-foreground">{project?.name}</p>
              </div>
              <div>
                <Label className="text-sm font-medium">–î–æ–º–µ–Ω</Label>
                <p className="text-sm text-muted-foreground">{project?.domain || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
              </div>
              <div>
                <Label className="text-sm font-medium">–ü—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–æ–≤</Label>
                <p className="text-sm text-muted-foreground">{project?.bonusPercentage}%</p>
              </div>
              <div>
                <Label className="text-sm font-medium">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</Label>
                <p className="text-sm text-muted-foreground">{project?.bonusExpiryDays} –¥–Ω–µ–π</p>
              </div>
            </CardContent>
          </Card>

          {/* Bot info */}
          {botSettings && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  {botSettings.isActive ? (
                    <Bot className="h-5 w-5 mr-2 text-green-600" />
                  ) : (
                    <BotOff className="h-5 w-5 mr-2 text-gray-400" />
                  )}
                  –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <Label className="text-sm font-medium">–°–æ—Å—Ç–æ—è–Ω–∏–µ</Label>
                  <p className="text-sm">{getBotStatusBadge()}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
                  <p className="text-sm text-muted-foreground">
                    {botSettings.botUsername || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </p>
                </div>
                <div>
                  <Label className="text-sm font-medium">–°–æ–∑–¥–∞–Ω</Label>
                  <p className="text-sm text-muted-foreground">
                    {new Date(botSettings.createdAt).toLocaleDateString('ru-RU')}
                  </p>
                </div>
                <div>
                  <Label className="text-sm font-medium">–û–±–Ω–æ–≤–ª–µ–Ω</Label>
                  <p className="text-sm text-muted-foreground">
                    {new Date(botSettings.updatedAt).toLocaleDateString('ru-RU')}
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Help card */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–°–ø—Ä–∞–≤–∫–∞</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3 text-sm text-muted-foreground">
              <div>
                <p className="font-medium mb-1">–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞:</p>
                <ol className="list-decimal list-inside space-y-1">
                  <li>–ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram</li>
                  <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot</li>
                  <li>–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏ username</li>
                  <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞</li>
                </ol>
              </div>
              <div>
                <p className="font-medium mb-1">Webhook URL:</p>
                <code className="text-xs bg-gray-100 p-1 rounded">
                  {process.env.NEXT_PUBLIC_APP_URL || 'https://your-domain.com'}/api/telegram/webhook/{projectId}
                </code>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
} 