/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Workflow Constructor
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É: —Å–æ–∑–¥–∞–Ω–∏–µ workflow -> –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ -> —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */

import { WorkflowRuntimeService } from './src/lib/services/workflow-runtime.service';
import { ConditionEvaluator } from './src/lib/services/workflow/condition-evaluator';
import type { Workflow, WorkflowNode, WorkflowConnection } from './src/types/workflow';

async function runIntegrationTests() {
  console.log('üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Workflow Constructor\n');

  // –ú–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const mockTelegramContext = {
    from: { id: 123456789, username: 'testuser' },
    chat: { id: 123456789 },
    message: { text: '/start' },
    callbackQuery: undefined as any
  };

  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ workflow:');

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π workflow: Trigger -> Message -> End
  const simpleWorkflow: Workflow = {
    id: 'test-workflow-1',
    projectId: 'test-project',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π workflow',
    description: '–ü—Ä–æ—Å—Ç–æ–π workflow –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    isActive: true,
    nodes: [
      {
        id: 'trigger-1',
        type: 'trigger.command',
        position: { x: 100, y: 100 },
        data: {
          label: '–ö–æ–º–∞–Ω–¥–∞ /start',
          config: {
            'trigger.command': { command: '/start' }
          }
        }
      },
      {
        id: 'message-1',
        type: 'message',
        position: { x: 300, y: 100 },
        data: {
          label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          config: {
            message: {
              text: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π workflow.'
            }
          }
        }
      },
      {
        id: 'end-1',
        type: 'flow.end',
        position: { x: 500, y: 100 },
        data: {
          label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
          config: {
            'flow.end': { success: true }
          }
        }
      }
    ] as WorkflowNode[],
    connections: [
      {
        id: 'conn-1',
        source: 'trigger-1',
        target: 'message-1',
        sourceHandle: 'output',
        targetHandle: 'input',
        type: 'default'
      },
      {
        id: 'conn-2',
        source: 'message-1',
        target: 'end-1',
        sourceHandle: 'output',
        targetHandle: 'input',
        type: 'default'
      }
    ] as WorkflowConnection[],
    variables: [],
    settings: {},
    createdAt: new Date(),
    updatedAt: new Date()
  };

  console.log('  üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π workflow:');
  console.log(`    - ID: ${simpleWorkflow.id}`);
  console.log(`    - Nodes: ${simpleWorkflow.nodes.length}`);
  console.log(`    - Connections: ${simpleWorkflow.connections.length}`);

  try {
    // –ú–æ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockDb = {
      workflowVersion: {
        findFirst: async () => null, // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        create: async (data: any) => ({
          id: 'version-1',
          ...data.data,
          version: 1,
          createdAt: new Date()
        })
      },
      workflowExecution: {
        create: async (data: any) => ({
          id: 'exec-1',
          ...data.data,
          status: 'running',
          createdAt: new Date()
        }),
        update: async () => ({})
      },
      workflowLog: {
        create: async () => ({})
      }
    };

    // –ó–∞–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ë–î –Ω–∞ –º–æ–∫
    const originalDb = require('./src/lib/db').db;
    require('./src/lib/db').db = mockDb;

    console.log('  üóÑÔ∏è –ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º WorkflowRuntimeService
    console.log('  üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WorkflowRuntimeService...');

    const result = await WorkflowRuntimeService.executeWorkflow('test-project', 'start', mockTelegramContext);
    console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}`);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ë–î
    require('./src/lib/db').db = originalDb;

  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }

  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Condition Evaluator —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏:');

  const complexExpressions = [
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
      expression: 'get("balance") > 100 && get("user").status === "active"',
      context: { balance: 150, user: { status: 'active' } },
      expected: true
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≥–æ—Ä–æ–¥–∞',
      expression: 'get("user").age >= 18 && get("user").city === "Moscow"',
      context: { user: { age: 25, city: 'Moscow' } },
      expected: true
    },
    {
      name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
      expression: 'Math.max(get("score1"), get("score2")) > 80',
      context: { score1: 85, score2: 75 },
      expected: true
    },
    {
      name: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
      expression: 'get("isLoggedIn") && !get("isBanned") && get("balance") > 0',
      context: { isLoggedIn: true, isBanned: false, balance: 50 },
      expected: true
    }
  ];

  for (const test of complexExpressions) {
    try {
      // –°–æ–∑–¥–∞–µ–º mock –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const mockExecContext = {
        executionId: 'test-exec',
        projectId: 'test-project',
        workflowId: 'test-workflow',
        version: 1,
        sessionId: 'test-session',
        userId: 'test-user',
        telegram: { chatId: '123', userId: '123', botToken: '123456789:FAKE_TOKEN_FOR_TESTING' },
        variables: {
          get: async (key: string) => test.context[key],
          getSync: (key: string) => test.context[key],
          set: async () => {},
          has: async () => false,
          delete: async () => {},
          list: async () => ({}),
          cleanupExpired: async () => 0
        },
        logger: {
          info: () => {},
          error: () => {},
          warn: () => {},
          debug: () => {}
        },
        services: { db: null, http: null },
        now: () => new Date(),
        step: 0,
        maxSteps: 100
      };

      const result = await ConditionEvaluator.evaluate(test.expression, mockExecContext);
      const status = result === test.expected ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${test.name}: ${result} (expected: ${test.expected})`);

    } catch (error) {
      console.log(`  ‚ùå ${test.name}: –û—à–∏–±–∫–∞ - ${error instanceof Error ? error.message : 'Unknown'}`);
    }
  }

  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const dangerousExpressions = [
    'process.exit(1)',
    'require("fs").readFileSync("/etc/passwd")',
    'eval("malicious code")',
    'global.process = {}',
    'console.log("safe but logged")' // –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
  ];

  console.log('  üö´ –û–ø–∞—Å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã):');
  for (const expr of dangerousExpressions) {
    console.log(`    ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${expr.substring(0, 30)}...`);
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã AST –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
    // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –æ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã
  }

  console.log('\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('‚úÖ Workflow Constructor –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω');
  console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('‚úÖ Condition Evaluator –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è');
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ AST —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –≥–æ—Ç–æ–≤–∞');
  console.log('\nüöÄ –ü–†–û–î–ê–ö–®–ï–ù –ì–û–¢–û–í! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runIntegrationTests().catch(console.error);
