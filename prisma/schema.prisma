generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id              String           @id @default(cuid())
  name            String
  domain          String?          @unique
  webhookSecret   String           @unique @default(cuid()) @map("webhook_secret")
  bonusPercentage Decimal          @default(1.0) @map("bonus_percentage") @db.Decimal(5, 2)
  bonusExpiryDays Int              @default(365) @map("bonus_expiry_days")
  // bonusBehavior   BonusBehavior    @default(SPEND_AND_EARN) @map("bonus_behavior")
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  botStatus       BotStatus        @default(INACTIVE) @map("bot_status")
  botToken        String?          @map("bot_token")
  botUsername     String?          @map("bot_username")
  bonusLevels     BonusLevel[]
  botSettings     BotSettings?
  referralProgram ReferralProgram?
  botFlows        BotFlow[] // Потоки бота для конструктора
  workflows       Workflow[] // Упрощенные workflow в стиле n8n
  workflowVariables WorkflowVariable[] // Переменные workflow
  projectVariables ProjectVariable[] // Переменные проекта для использования в сообщениях
  users           User[]
  webhookLogs     WebhookLog[]
  notifications   Notification[]

  @@map("projects")
}

model BonusLevel {
  id             String   @id @default(cuid())
  projectId      String   @map("project_id")
  name           String
  minAmount      Decimal  @default(0) @map("min_amount") @db.Decimal(10, 2)
  maxAmount      Decimal? @map("max_amount") @db.Decimal(10, 2)
  bonusPercent   Int      @map("bonus_percent")
  paymentPercent Int      @map("payment_percent")
  order          Int      @default(0)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("bonus_levels")
}

model ReferralProgram {
  id            String   @id @default(cuid())
  projectId     String   @unique @map("project_id")
  isActive      Boolean  @default(true) @map("is_active")
  bonusPercent  Int      @default(5) @map("bonus_percent")
  referrerBonus Decimal  @default(0) @map("referrer_bonus") @db.Decimal(10, 2)
  description   String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("referral_programs")
}

model BotSettings {
  id                 String   @id @default(cuid())
  projectId          String   @unique @map("project_id")
  botToken           String   @map("bot_token")
  botUsername        String   @map("bot_username")
  isActive           Boolean  @default(true) @map("is_active")
  welcomeMessage     Json?    @default("{\"text\": \"Добро пожаловать! Отправьте свой номер телефона для привязки аккаунта.\"}") @map("welcome_message")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  messageSettings    Json?    @default("{}") @map("message_settings")
  functionalSettings Json?    @default("{}") @map("functional_settings")
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("bot_settings")
}

model BotFlow {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  name        String
  description String?
  version     Int      @default(1)
  isActive    Boolean  @default(false) @map("is_active")
  nodes       Json // Массив нод конструктора
  connections Json // Связи между нодами
  variables   Json? // Переменные бота
  settings    Json? // Общие настройки потока
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project  Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sessions BotSession[] // Активные сессии этого потока

  @@map("bot_flows")
}

model BotSession {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id") // Telegram user ID (BigInt as string)
  flowId    String   @map("flow_id")
  state     Json // Текущее состояние диалога
  variables Json? // Переменные сессии
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  flow BotFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId, flowId])
  @@map("bot_sessions")
}

model User {
  id               String         @id @default(cuid())
  projectId        String         @map("project_id")
  email            String?
  phone            String?
  firstName        String?        @map("first_name")
  lastName         String?        @map("last_name")
  birthDate        DateTime?      @map("birth_date") @db.Date
  telegramId       BigInt?        @map("telegram_id")
  telegramUsername String?        @map("telegram_username")
  isActive         Boolean        @default(true) @map("is_active")
  registeredAt     DateTime       @default(now()) @map("registered_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  currentLevel     String         @default("Базовый") @map("current_level")
  referralCode     String?        @unique @map("referral_code")
  referredBy       String?        @map("referred_by")
  totalPurchases   Decimal        @default(0) @map("total_purchases") @db.Decimal(10, 2)
  utmCampaign      String?        @map("utm_campaign")
  utmContent       String?        @map("utm_content")
  utmMedium        String?        @map("utm_medium")
  utmSource        String?        @map("utm_source")
  utmTerm          String?        @map("utm_term")
  bonuses          Bonus[]
  transactions     Transaction[]
  notifications    Notification[]
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  referrer         User?          @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals        User[]         @relation("UserReferrals")

  @@unique([projectId, email])
  @@unique([projectId, phone])
  @@unique([projectId, telegramId])
  @@map("users")
}

model Bonus {
  id           String        @id @default(cuid())
  userId       String        @map("user_id")
  amount       Decimal       @db.Decimal(10, 2)
  type         BonusType     @default(MANUAL)
  description  String?
  expiresAt    DateTime?     @map("expires_at")
  isUsed       Boolean       @default(false) @map("is_used")
  metadata     Json?
  createdAt    DateTime      @default(now()) @map("created_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bonuses")
}

model Transaction {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  bonusId         String?         @map("bonus_id")
  amount          Decimal         @db.Decimal(10, 2)
  type            TransactionType
  description     String?
  metadata        Json?
  createdAt       DateTime        @default(now()) @map("created_at")
  appliedPercent  Int?            @map("applied_percent")
  isReferralBonus Boolean         @default(false) @map("is_referral_bonus")
  referralUserId  String?         @map("referral_user_id")
  userLevel       String?         @map("user_level")
  bonus           Bonus?          @relation(fields: [bonusId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model WebhookLog {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  endpoint  String
  method    String
  headers   Json?
  body      Json?
  response  Json?
  status    Int
  success   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}

model AdminAccount {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         String?   @default("ADMIN")
  isActive     Boolean?  @default(true) @map("is_active")
  metadata     Json? // Для хранения reset токенов и другой мета-информации
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("admin_accounts")
}

model Notification {
  id        String    @id @default(cuid())
  projectId String    @map("project_id")
  userId    String?   @map("user_id")
  channel   String // Используем строку вместо enum из-за ограничений прав
  title     String
  message   String
  metadata  Json?
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @default(now()) @map("created_at")
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum BonusBehavior {
  SPEND_AND_EARN @map("spend_and_earn")
  SPEND_ONLY     @map("spend_only")
  EARN_ONLY      @map("earn_only")
}

enum BotStatus {
  INACTIVE
  ACTIVE
  ERROR
}

enum BonusType {
  PURCHASE
  BIRTHDAY
  MANUAL
  REFERRAL
  PROMO
}

enum TransactionType {
  EARN
  SPEND
  EXPIRE
  REFUND
}

enum AdminRole {
  SUPERADMIN
  ADMIN
  MANAGER
}

enum AlphaTesterStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

model AlphaTesterApplication {
  id String @id @default(cuid())

  // Информация о компании
  companyName String
  companySize String
  website     String
  industry    String

  // Контактная информация
  contactName     String
  contactEmail    String  @unique
  contactPhone    String?
  contactPosition String

  // Опыт и мотивация
  currentBonusSystem String?
  experienceLevel    String
  motivation         String
  expectations       String?

  // Техническая информация
  cms             String
  technicalSkills String
  availableTime   String

  // Согласия
  agreeToTerms     Boolean
  agreeToNDA       Boolean
  agreeToMarketing Boolean @default(false)

  // Статус и управление
  status     AlphaTesterStatus @default(PENDING)
  notes      String?
  reviewedBy String?
  reviewedAt DateTime?

  // Метаданные
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("alpha_tester_applications")
}

// Упрощенные workflow в стиле n8n
model Workflow {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  name        String
  description String?
  isActive    Boolean  @default(false) @map("is_active")
  nodes       Json     @default("[]") // Массив нод workflow
  connections Json     @default("[]") // Связи между нодами
  variables   Json     @default("[]") // Переменные workflow
  settings    Json     @default("{}") // Настройки workflow
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Связи
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  versions    WorkflowVersion[]
  executions  WorkflowExecution[]
  variableRecords WorkflowVariable[]

  @@map("workflows")
}

// ========== WORKFLOW VERSIONS (версионирование workflow) ==========
model WorkflowVersion {
  id          String   @id @default(cuid())
  workflowId  String   @map("workflow_id")
  version     Int
  nodes       Json     // WorkflowNode[] as JSON
  entryNodeId String   @map("entry_node_id")
  variables   Json?    // WorkflowVariable[]
  settings    Json?    // WorkflowSettings
  isActive    Boolean  @default(false) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, version])
  @@index([workflowId, isActive])
  @@map("workflow_versions")
}

// ========== WORKFLOW EXECUTIONS (выполнения workflow) ==========
model WorkflowExecution {
  id             String   @id @default(cuid())
  projectId      String   @map("project_id")
  workflowId     String   @map("workflow_id")
  version        Int
  sessionId      String   @map("session_id")
  userId         String?  @map("user_id")
  telegramChatId String?  @map("telegram_chat_id")
  status         String   // running|completed|failed|cancelled|waiting
  startedAt      DateTime @default(now()) @map("started_at")
  finishedAt     DateTime? @map("finished_at")
  error          String?
  stepCount      Int?     @map("step_count")
  currentNodeId  String?  @map("current_node_id")
  waitType       String?  @map("wait_type")
  waitPayload    Json?    @map("wait_payload")

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  logs     WorkflowLog[]

  @@index([projectId, workflowId, startedAt])
  @@index([sessionId])
  @@index([projectId, telegramChatId, status])
  @@map("workflow_executions")
}

// ========== WORKFLOW LOGS (пошаговые логи выполнения) ==========
model WorkflowLog {
  id           BigInt   @id @default(autoincrement())
  executionId  String   @map("execution_id")
  step         Int
  nodeId       String   @map("node_id")
  nodeType     String   @map("node_type")
  timestamp    DateTime @default(now())
  level        String   @default("info") // info|warn|error|debug
  message      String
  data         Json?    // дополнительные данные

  execution WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId, step])
  @@index([timestamp])
  @@map("workflow_logs")
}

// ========== PROJECT VARIABLES (переменные проекта для использования в сообщениях) ==========
model ProjectVariable {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  key         String   // Ключ переменной (например: username, domain, company_name)
  value       String   // Значение переменной
  description String?  // Описание переменной
  isSystem    Boolean  @default(false) @map("is_system") // Системная переменная (нельзя удалить)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key])
  @@index([projectId])
  @@map("project_variables")
}

// ========== WORKFLOW VARIABLES (система переменных) ==========
model WorkflowVariable {
  id           BigInt   @id @default(autoincrement())
  projectId    String   @map("project_id")
  workflowId   String?  @map("workflow_id")
  userId       String?  @map("user_id")
  sessionId    String?  @map("session_id")
  scope        String   // global|project|user|session
  key          String
  value        Json
  expiresAt    DateTime? @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workflow Workflow? @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // Составной уникальный индекс для переменных по scope
  @@unique([projectId, workflowId, userId, sessionId, scope, key], name: "unique_variable")
  @@index([projectId, scope, key])
  @@index([expiresAt])
  @@map("workflow_variables")
}

