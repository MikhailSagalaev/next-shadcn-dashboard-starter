/**
 * @file: tilda-bonus-widget.js
 * @description: –ì–æ—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å Tilda
 * @project: SaaS Bonus System
 * @version: 2.9.10
 * @author: AI Assistant + User
 * @architecture: Modular design with memory management, rate limiting, and graceful degradation
 */

(function () {
  'use strict';

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
  window.TildaBonusWidget = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config: {
      projectId: null,
      apiUrl: 'https://bonus.example.com',
      bonusToRuble: 1,
      minOrderAmount: 100,
      debug: false, // –í–´–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      debounceMs: 400,
      maxRetries: 3,
      timeout: 10000,
      enableLogging: false, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      rateLimitMs: 1000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É API –∑–∞–ø—Ä–æ—Å–∞–º–∏
      maxConcurrentRequests: 2 // –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    },

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    state: {
      userEmail: null,
      userPhone: null,
      bonusBalance: 0,
      appliedBonuses: 0,
      initialized: false,
      balanceDebounceTimer: null,
      activeFetchController: null,
      cartOpenDebounceTimer: null,
      _bodyObserver: null,
      _cartObserver: null,
      mode: 'bonus',
      levelInfo: null, // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      originalCartTotal: 0, // –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã –±–µ–∑ –±–æ–Ω—É—Å–æ–≤
      // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
      timers: new Set(), // –•—Ä–∞–Ω–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
      observers: new Set(), // –•—Ä–∞–Ω–∏–º –≤—Å–µ observers
      abortControllers: new Set(), // –•—Ä–∞–Ω–∏–º –≤—Å–µ AbortController'—ã
      isDestroyed: false, // –§–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
      // Rate limiting
      lastApiCall: 0, // Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ API –≤—ã–∑–æ–≤–∞
      activeRequests: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      requestQueue: [], // –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è rate limiting
      apiAvailable: undefined, // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      // –ö—ç—à DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      domCache: new Map(), // –ö—ç—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
      errorRecoveryAttempts: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
      lastErrorTime: 0, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
      healthCheckTimer: null // –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
    init: function (userConfig) {
      console.log('üéØ TildaBonusWidget: –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò');
      console.log('üéØ TildaBonusWidget: –û–ø—Ü–∏–∏:', userConfig);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.config = Object.assign({}, this.config, userConfig);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (!this.config.projectId) {
        console.error('[TildaBonusWidget] –û—à–∏–±–∫–∞: projectId –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      this.checkApiAvailability();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
      this.scheduleCacheCleanup();

      // –ï—Å–ª–∏ apiUrl –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ src —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
      try {
        if (!this.config.apiUrl) {
          var cur = document.currentScript;
          var el =
            cur ||
            document.querySelector('script[src*="tilda-bonus-widget.js"]');
          if (el && el.getAttribute('src')) {
            var u = new URL(el.getAttribute('src'), window.location.href);
            this.config.apiUrl = u.origin;
          } else {
            this.config.apiUrl = window.location.origin;
          }
        }
      } catch (_) {
        this.config.apiUrl = this.config.apiUrl || window.location.origin;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
      this.initUI();

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω–µ
      this.observeCart();

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–≤–æ–¥ email/—Ç–µ–ª–µ—Ñ–æ–Ω–∞
      this.observeUserInput();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
      this.loadUserDataFromStorage();

      this.state.initialized = true;
      this.log('–í–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', this.config);
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    loadUserDataFromStorage: function () {
      try {
        const savedEmail = this.safeGetStorage('tilda_user_email');
        const savedPhone = this.safeGetStorage('tilda_user_phone');
        const savedAppliedBonuses = this.safeGetStorage(
          'tilda_applied_bonuses'
        );

        if (savedEmail && this.validateEmail(savedEmail)) {
          this.state.userEmail = savedEmail;
          this.log('üìß –ó–∞–≥—Ä—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π email –∏–∑ localStorage');
        }

        if (savedPhone && this.validatePhone(savedPhone)) {
          this.state.userPhone = savedPhone;
          this.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ localStorage');
        }

        if (savedAppliedBonuses) {
          const bonusAmount = parseFloat(savedAppliedBonuses);
          if (!isNaN(bonusAmount) && bonusAmount >= 0 && bonusAmount <= 10000) {
            this.state.appliedBonuses = bonusAmount;
            this.log('üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã:', bonusAmount);
          }
        }

        this.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã');
      } catch (error) {
        this.logError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
      }
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)
    log: function () {
      if (
        this.config.debug &&
        this.config.enableLogging &&
        typeof console !== 'undefined'
      ) {
        try {
          // –§–∏–ª—å—Ç—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const args = Array.from(arguments).map((arg) => {
            if (
              typeof arg === 'string' &&
              (arg.includes('@') || arg.match(/\d{10,}/))
            ) {
              return arg.replace(/./g, '*'); // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
            return arg;
          });
          console.log('[TildaBonusWidget]', ...args);
        } catch (e) {
          // Silent fail - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      }
    },

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ, –Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)
    logError: function (message, error) {
      if (!this.config.enableLogging) return;

      try {
        const safeMessage = message.replace(/./g, '*'); // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.error(
          '[TildaBonusWidget Error]',
          safeMessage,
          error?.message || 'Unknown error'
        );

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        this.handleErrorRecovery(error);
      } catch (e) {
        // Silent fail
      }
    },

    // –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
    handleErrorRecovery: function (error) {
      const now = Date.now();
      const timeSinceLastError = now - this.state.lastErrorTime;

      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if (timeSinceLastError < 5 * 60 * 1000) {
        this.state.errorRecoveryAttempts++;
      } else {
        this.state.errorRecoveryAttempts = 1;
      }

      this.state.lastErrorTime = now;

      // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ safe mode
      if (this.state.errorRecoveryAttempts >= 5) {
        this.log('üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º');
        this.enterSafeMode();
        return;
      }

      // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      if (error?.name === 'TypeError' && error?.message?.includes('null')) {
        this.log('üîß –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ null reference –æ—à–∏–±–∫–∏');
        this.safeSetTimeout(() => {
          this.validateState();
          this.cleanDomCache();
        }, 1000);
      }
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    enterSafeMode: function () {
      this.log('üõ°Ô∏è –í–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º');

      // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ observers –∏ —Ç–∞–π–º–µ—Ä—ã
      this.destroy();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.showSafeModeMessage();

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      this.scheduleRecoveryCheck();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    showSafeModeMessage: function () {
      const message = document.createElement('div');
      message.id = 'tilda-bonus-safe-mode';
      message.innerHTML = `
        <div style="
          position: fixed;
          bottom: 20px;
          left: 20px;
          background: #fff3cd;
          border: 1px solid #ffeaa7;
          border-radius: 8px;
          padding: 12px 16px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          z-index: 10001;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          font-size: 14px;
          color: #856404;
          max-width: 300px;
        ">
          üîß –í–∏–¥–∂–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
        </div>
      `;

      document.body.appendChild(message);
    },

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    scheduleRecoveryCheck: function () {
      this.safeSetTimeout(() => {
        if (!this.state.isDestroyed) {
          this.attemptRecovery();
        }
      }, 30 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    },

    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    attemptRecovery: function () {
      try {
        this.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const cartWindow = this.getCachedElement('.t706__cartwin', true);
        if (cartWindow) {
          // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
          this.state.errorRecoveryAttempts = 0;
          this.init(this.config);
          return;
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        this.scheduleRecoveryCheck();
      } catch (error) {
        this.logError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É', error);
        this.scheduleRecoveryCheck();
      }
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    safeSetTimeout: function (callback, delay) {
      if (this.state.isDestroyed) return null;

      const timer = setTimeout(() => {
        if (!this.state.isDestroyed) {
          callback();
        }
        this.state.timers.delete(timer);
      }, delay);

      this.state.timers.add(timer);
      return timer;
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    safeClearTimeout: function (timer) {
      if (timer) {
        clearTimeout(timer);
        this.state.timers.delete(timer);
      }
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AbortController
    createAbortController: function () {
      if (this.state.isDestroyed) return null;

      const controller = new AbortController();
      this.state.abortControllers.add(controller);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ abort
      controller.signal.addEventListener('abort', () => {
        this.state.abortControllers.delete(controller);
      });

      return controller;
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ observer
    createObserver: function (callback, options) {
      if (this.state.isDestroyed) return null;

      const observer = new MutationObserver((mutations, obs) => {
        if (!this.state.isDestroyed) {
          callback(mutations, obs);
        }
      });

      this.state.observers.add(observer);
      return observer;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    checkApiAvailability: async function () {
      if (this.state.apiAvailable !== undefined) return this.state.apiAvailable;

      try {
        const testUrl = `${this.config.apiUrl}/api/health`;
        const response = await Promise.race([
          fetch(testUrl, { method: 'HEAD', mode: 'no-cors' }),
          new Promise((_, reject) =>
            this.safeSetTimeout(() => reject(new Error('timeout')), 3000)
          )
        ]);

        this.state.apiAvailable = true;
        this.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      } catch (error) {
        this.state.apiAvailable = false;
        this.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ offline —Ä–µ–∂–∏–º');
        this.enterOfflineMode();
        return false;
      }
    },

    // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–µ–∑ API
    enterOfflineMode: function () {
      this.log('üîå –ü–µ—Ä–µ—Ö–æ–¥ –≤ offline —Ä–µ–∂–∏–º');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ API –¥–∞–Ω–Ω—ã—Ö
      if (this.getUserContact()) {
        this.ensureWidgetMounted();
        this.showLoading(false);
        this.updateBalanceDisplay();
      } else {
        this.showRegistrationPrompt();
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      this.safeSetTimeout(() => {
        this.showOfflineMessage();
      }, 2000);
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    getCachedElement: function (selector, refresh = false) {
      if (!refresh && this.state.domCache.has(selector)) {
        const cached = this.state.domCache.get(selector);
        if (cached.element && document.contains(cached.element)) {
          return cached.element;
        }
        // –≠–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        this.state.domCache.delete(selector);
      }

      try {
        const element = document.querySelector(selector);
        if (element) {
          this.state.domCache.set(selector, {
            element: element,
            timestamp: Date.now()
          });
        }
        return element;
      } catch (error) {
        this.logError('Error finding element', error);
        return null;
      }
    },

    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    cleanDomCache: function () {
      const now = Date.now();
      const maxAge = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

      for (const [selector, cached] of this.state.domCache.entries()) {
        if (
          now - cached.timestamp > maxAge ||
          !document.contains(cached.element)
        ) {
          this.state.domCache.delete(selector);
        }
      }
    },

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    scheduleCacheCleanup: function () {
      this.safeSetTimeout(
        () => {
          if (!this.state.isDestroyed) {
            this.cleanDomCache();
            this.validateState(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.scheduleCacheCleanup(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
          }
        },
        5 * 60 * 1000
      ); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
    validateState: function () {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (
          typeof this.state.bonusBalance !== 'number' ||
          isNaN(this.state.bonusBalance)
        ) {
          this.state.bonusBalance = 0;
        }
        if (
          typeof this.state.appliedBonuses !== 'number' ||
          isNaN(this.state.appliedBonuses)
        ) {
          this.state.appliedBonuses = 0;
        }
        if (
          typeof this.state.originalCartTotal !== 'number' ||
          isNaN(this.state.originalCartTotal)
        ) {
          this.state.originalCartTotal = 0;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (typeof this.state.userEmail !== 'string') {
          this.state.userEmail = null;
        }
        if (typeof this.state.userPhone !== 'string') {
          this.state.userPhone = null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (typeof this.state.initialized !== 'boolean') {
          this.state.initialized = false;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leaks
        if (this.state.domCache.size > 100) {
          this.log('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π DOM –∫—ç—à, –æ—á–∏—â–∞–µ–º...');
          this.state.domCache.clear();
        }

        if (this.state.requestQueue.length > 10) {
          this.log('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—á–∏—â–∞–µ–º...');
          this.state.requestQueue = [];
        }
      } catch (error) {
        this.logError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è', error);
      }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    showOfflineMessage: function () {
      const message = document.createElement('div');
      message.id = 'tilda-bonus-offline-message';
      message.innerHTML = `
        <div style="
          position: fixed;
          top: 20px;
          right: 20px;
          background: #fff3cd;
          border: 1px solid #ffeaa7;
          border-radius: 8px;
          padding: 12px 16px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          z-index: 10001;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          font-size: 14px;
          color: #856404;
          max-width: 300px;
        ">
          üîÑ –°–µ—Ä–≤–∏—Å –±–æ–Ω—É—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
        </div>
      `;

      document.body.appendChild(message);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      this.safeSetTimeout(() => {
        if (message.parentNode) {
          message.remove();
        }
      }, 5000);
    },

    // Rate limited API –∑–∞–ø—Ä–æ—Å —Å retry logic
    makeApiRequest: async function (url, options = {}, retryCount = 0) {
      if (this.state.isDestroyed) return null;

      // Rate limiting
      const now = Date.now();
      const timeSinceLastCall = now - this.state.lastApiCall;

      if (timeSinceLastCall < this.config.rateLimitMs) {
        await new Promise((resolve) =>
          this.safeSetTimeout(
            resolve,
            this.config.rateLimitMs - timeSinceLastCall
          )
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (this.state.activeRequests >= this.config.maxConcurrentRequests) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        return new Promise((resolve, reject) => {
          this.state.requestQueue.push({
            url,
            options,
            retryCount,
            resolve,
            reject
          });
        });
      }

      this.state.lastApiCall = Date.now();
      this.state.activeRequests++;

      try {
        const controller = this.createAbortController();
        if (!controller) throw new Error('Cannot create AbortController');

        const fetchOptions = {
          ...options,
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            ...options.headers
          }
        };

        this.log('Making API request:', url);

        const response = await fetch(url, fetchOptions);
        this.state.activeRequests--;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        if (
          this.state.requestQueue.length > 0 &&
          this.state.activeRequests < this.config.maxConcurrentRequests
        ) {
          const nextRequest = this.state.requestQueue.shift();
          this.safeSetTimeout(() => {
            this.makeApiRequest(
              nextRequest.url,
              nextRequest.options,
              nextRequest.retryCount
            )
              .then(nextRequest.resolve)
              .catch(nextRequest.reject);
          }, 100);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
          if (response.status >= 500 && retryCount < this.config.maxRetries) {
            this.log(
              `API request failed with ${response.status}, retrying... (${retryCount + 1}/${this.config.maxRetries})`
            );
            await new Promise((resolve) =>
              this.safeSetTimeout(resolve, Math.pow(2, retryCount) * 1000)
            ); // Exponential backoff
            return this.makeApiRequest(url, options, retryCount + 1);
          }
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        return data;
      } catch (error) {
        this.state.activeRequests--;

        if (error.name === 'AbortError') {
          this.log('Request was aborted');
          return null;
        }

        // Retry –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        if (
          (error.name === 'TypeError' || error.name === 'NetworkError') &&
          retryCount < this.config.maxRetries
        ) {
          this.log(
            `Network error, retrying... (${retryCount + 1}/${this.config.maxRetries})`,
            error.message
          );
          await new Promise((resolve) =>
            this.safeSetTimeout(resolve, Math.pow(2, retryCount) * 1000)
          );
          return this.makeApiRequest(url, options, retryCount + 1);
        }

        this.logError('API request failed after retries', error);
        throw error;
      }
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    safeGetStorage: function (key) {
      try {
        if (typeof Storage === 'undefined') return null;
        const value = localStorage.getItem(key);
        if (!value) return null;

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (value.length > 1000) return null; // –ó–∞—â–∏—Ç–∞ –æ—Ç oversized –¥–∞–Ω–Ω—ã—Ö
        if (/<script|javascript:|data:/i.test(value)) return null; // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS

        return value;
      } catch (error) {
        this.logError('Storage access error', error);
        return null;
      }
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ localStorage
    safeSetStorage: function (key, value) {
      try {
        if (typeof Storage === 'undefined') return false;
        if (typeof value !== 'string') value = String(value);
        if (value.length > 1000) return false; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞

        localStorage.setItem(key, value);
        return true;
      } catch (error) {
        this.logError('Storage write error', error);
        return false;
      }
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    validateEmail: function (email) {
      if (!email || typeof email !== 'string') return false;
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email) && email.length <= 254;
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    validatePhone: function (phone) {
      if (!phone || typeof phone !== 'string') return false;
      const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,15}$/;
      return phoneRegex.test(phone.replace(/\s/g, ''));
    },

    // –ü–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –∏–ª–∏ –∫—É–∫–∏
    getUserEmail: function () {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const savedEmail = this.safeGetStorage('tilda_user_email');
        if (savedEmail && this.validateEmail(savedEmail)) {
          return savedEmail;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–∞–º)
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
          const [name, value] = cookie.trim().split('=');
          if ((name === 'user_email' || name === 'tilda_user_email') && value) {
            const decodedValue = decodeURIComponent(value);
            if (this.validateEmail(decodedValue)) {
              return decodedValue;
            }
          }
        }

        return null;
      } catch (error) {
        this.logError('Error getting user email', error);
        return null;
      }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram
    isTelegramLinked: function () {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏
        const telegramLinked = this.safeGetStorage('tilda_telegram_linked');
        if (telegramLinked === 'true') {
          return true;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞–ª–∏—á–∏–µ telegram ID –∏–ª–∏ username
        const telegramId = this.safeGetStorage('tilda_telegram_id');
        const telegramUsername = this.safeGetStorage('tilda_telegram_username');

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const isValidId =
          telegramId && /^\d+$/.test(telegramId) && telegramId.length < 20;
        const isValidUsername =
          telegramUsername && /^[a-zA-Z0-9_]{3,32}$/.test(telegramUsername);

        return !!(isValidId || isValidUsername);
      } catch (error) {
        this.logError('Error checking Telegram link', error);
        return false;
      }
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    initUI: function () {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º Google Fonts –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
      if (!document.querySelector('link[href*="fonts.googleapis.com"]')) {
        const fontLink = document.createElement('link');
        fontLink.rel = 'preconnect';
        fontLink.href = 'https://fonts.googleapis.com';
        document.head.appendChild(fontLink);

        const fontLink2 = document.createElement('link');
        fontLink2.rel = 'preconnect';
        fontLink2.href = 'https://fonts.gstatic.com';
        fontLink2.crossOrigin = 'anonymous';
        document.head.appendChild(fontLink2);

        const fontLink3 = document.createElement('link');
        fontLink3.rel = 'stylesheet';
        fontLink3.href =
          'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Nunito+Sans:wght@400;600;700&family=Poppins:wght@400;500;600;700&family=Work+Sans:wght@400;500;600;700&family=Inter:wght@400;500;600;700&family=Fira+Sans:wght@400;500;600;700&family=Rubik:wght@400;500;600;700&display=swap';
        document.head.appendChild(fontLink3);
      }

      // –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
      const style = document.createElement('style');
      style.textContent = `
        .bonus-widget-container {
          background: #fff;
          border: 1px solid #000;
          border-radius: 10px;
          padding: 12px;
          margin: 8px 0;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          color: #000;
        }
        
        .bonus-widget-title {
          font-size: 16px;
          font-weight: 600;
          color: #000;
          margin-bottom: 8px;
        }
        .bonus-toggle{display:flex;gap:8px;margin-bottom:8px}
        .bonus-toggle-btn{flex:1;padding:8px 12px;border:1px solid #000;background:#fff;border-radius:8px;cursor:pointer;color:#000}
        .bonus-toggle-btn.active{background:#000;color:#fff}
        
        .bonus-balance { font-size: 13px; color: #000; margin-bottom: 8px; }
        
        .bonus-balance-amount { font-weight: 600; }
        
        .bonus-input-group {
          display: flex;
          gap: 8px;
          margin-bottom: 12px;
        }
        
        .bonus-input { flex: 1; padding: 10px 12px; border: 1px solid #000; border-radius: 8px; font-size: 14px; color:#000 }
        
        .bonus-button { padding: 10px 16px; background:#000; color:#fff; border:1px solid #000; border-radius:8px; cursor:pointer; font-size:14px; font-weight:500; transition: background .2s }
        .bonus-button:hover { background:#222 }
        .bonus-button:disabled { opacity:.6; cursor:not-allowed }
        
        .bonus-applied { padding:8px 12px; border:1px solid #000; border-radius:8px; color:#000; background:#fff; font-size:13px }
        .bonus-error { padding:8px 12px; border:1px solid #000; border-radius:8px; color:#000; background:#fff; font-size:13px; margin-top:8px }
        
        .bonus-loading {
          display: inline-block;
          width: 14px;
          height: 14px;
          border: 2px solid #f3f3f3;
          border-top: 2px solid #007bff;
          border-radius: 50%;
          animation: bonus-spin 1s linear infinite;
          margin-left: 8px;
        }
        
        @keyframes bonus-spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        /* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ */
        .pulse {
          animation: pulse 2s infinite;
        }

        @keyframes pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.1); }
          100% { transform: scale(1); }
        }

        .bounce {
          animation: bounce 2s infinite;
        }

        @keyframes bounce {
          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
          40% { transform: translateY(-10px); }
          60% { transform: translateY(-5px); }
        }

        .shake {
          animation: shake 0.5s infinite;
        }

        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
          20%, 40%, 60%, 80% { transform: translateX(2px); }
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
        .registration-prompt {
          text-align: center;
          padding: 16px;
          border: 1px solid #e5e7eb;
          border-radius: 12px;
          background: #ffffff;
          margin-bottom: 12px;
        }

        .registration-icon {
          font-size: 32px;
          margin-bottom: 12px;
        }

        .registration-title {
          font-size: 16px;
          font-weight: 600;
          color: #111827;
          margin-bottom: 8px;
        }

        .registration-description {
          font-size: 14px;
          color: #6b7280;
          line-height: 1.4;
          margin-bottom: 16px;
        }

        .registration-description strong {
          color: #059669;
          font-weight: 600;
        }

        .registration-action {
          margin-top: 12px;
        }

        .registration-button {
          display: inline-block;
          padding: 10px 16px;
          background: #000000;
          color: #ffffff;
          text-decoration: none;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 500;
          transition: background-color 0.2s;
        }

        .registration-button:hover {
          background: #333333;
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è inline –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø–æ–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ */
        .registration-prompt-inline {
          width: 100%;
          padding: 8px 0;
        }

        .registration-prompt-inline .registration-prompt {
          text-align: center;
          padding: 12px;
          border: 1px solid #e5e7eb;
          border-radius: 8px;
          background: #f9fafb;
        }
      `;
      document.head.appendChild(style);
      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞—ë–º –ª–µ–Ω–∏–≤–æ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    createWidget: function () {
      // –ù–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
      if (document.querySelector('.bonus-widget-container')) {
        this.log('–í–∏–¥–∂–µ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      const promocodeWrapper = document.querySelector(
        '.t-inputpromocode__wrapper'
      );
      if (!promocodeWrapper) {
        this.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const container = document.createElement('div');
      container.className = 'bonus-widget-container';
      container.innerHTML = `
        <div class="bonus-widget-title">–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</div>
        <div class="bonus-toggle">
          <button id="bonus-tab" type="button" class="bonus-toggle-btn active" onclick="TildaBonusWidget.switchMode('bonus')">–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã</button>
          <button id="promo-tab" type="button" class="bonus-toggle-btn" onclick="TildaBonusWidget.switchMode('promo')">–ü—Ä–æ–º–æ–∫–æ–¥</button>
        </div>
        <div class="bonus-balance" style="display: none;">
          –í–∞—à –±–∞–ª–∞–Ω—Å: <span class="bonus-balance-amount">0</span> –±–æ–Ω—É—Å–æ–≤
        </div>
        <div id="bonus-section" class="bonus-input-group">
          <input type="number" 
                 class="bonus-input" 
                 id="bonus-amount-input" 
                 placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤" 
                 min="0"
                 style="display: none;">
          <button class="bonus-button" type="button"
                  id="apply-bonus-button" 
                  onclick="TildaBonusWidget.applyOrReapplyBonuses()"
                  style="display: none;">
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã
          </button>
        </div>
        <!-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¢–∏–ª—å–¥—ã –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω/—Å–∫—Ä—ã—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º -->
        <div id="bonus-status"></div>
      `;

      // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤–º–µ—Å—Ç–æ –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      promocodeWrapper.parentNode.replaceChild(container, promocodeWrapper);
      this.state.promoWrapper = promocodeWrapper; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π wrapper

      this.log('–í–∏–¥–∂–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–º–µ—Å—Ç–æ –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      this.showWidgetControls();
    },

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    ensureWidgetMounted: function () {
      if (!document.querySelector('.bonus-widget-container')) {
        this.createWidget();
      }
      return !!document.querySelector('.bonus-widget-container');
    },

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
    showWidgetControls: function () {
      const balanceEl = document.querySelector('.bonus-balance');
      const inputEl = document.getElementById('bonus-amount-input');
      const buttonEl = document.getElementById('apply-bonus-button');

      if (balanceEl) balanceEl.style.display = 'block';
      if (inputEl) inputEl.style.display = 'block';
      if (buttonEl) buttonEl.style.display = 'block';
    },

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    destroy: function () {
      this.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–∏–¥–∂–µ—Ç–∞');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
      this.state.isDestroyed = true;

      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ AbortController'—ã
      for (const controller of this.state.abortControllers) {
        try {
          if (!controller.signal.aborted) {
            controller.abort();
          }
        } catch (error) {
          this.logError('Error aborting controller', error);
        }
      }
      this.state.abortControllers.clear();

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      for (const timer of this.state.timers) {
        try {
          clearTimeout(timer);
        } catch (error) {
          this.logError('Error clearing timer', error);
        }
      }
      this.state.timers.clear();

      // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ observers
      for (const observer of this.state.observers) {
        try {
          observer.disconnect();
        } catch (error) {
          this.logError('Error disconnecting observer', error);
        }
      }
      this.state.observers.clear();

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (this.state.balanceDebounceTimer) {
        clearTimeout(this.state.balanceDebounceTimer);
        this.state.balanceDebounceTimer = null;
      }
      if (this.state.cartOpenDebounceTimer) {
        clearTimeout(this.state.cartOpenDebounceTimer);
        this.state.cartOpenDebounceTimer = null;
      }
      if (this.state.activeFetchController) {
        try {
          this.state.activeFetchController.abort();
        } catch (_) {}
        this.state.activeFetchController = null;
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ observers
      if (this.state._cartObserver) {
        try {
          this.state._cartObserver.disconnect();
        } catch (_) {}
        this.state._cartObserver = null;
      }
      if (this.state._bodyObserver) {
        try {
          this.state._bodyObserver.disconnect();
        } catch (_) {}
        this.state._bodyObserver = null;
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.state = {
        userEmail: null,
        userPhone: null,
        bonusBalance: 0,
        appliedBonuses: 0,
        initialized: false,
        balanceDebounceTimer: null,
        activeFetchController: null,
        cartOpenDebounceTimer: null,
        _bodyObserver: null,
        _cartObserver: null,
        mode: 'bonus',
        levelInfo: null,
        originalCartTotal: 0,
        timers: new Set(),
        observers: new Set(),
        abortControllers: new Set(),
        isDestroyed: true,
        lastApiCall: 0,
        activeRequests: 0,
        requestQueue: [],
        apiAvailable: undefined,
        domCache: new Map(),
        errorRecoveryAttempts: 0,
        lastErrorTime: 0,
        healthCheckTimer: null
      };

      this.log('‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –≤–∏–¥–∂–µ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã');
    },

    // –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    cleanup: function () {
      this.destroy();
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    loadProjectSettings: async function () {
      try {
        const cacheBuster = Date.now(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        const settings = await this.makeApiRequest(
          `${this.config.apiUrl}/api/projects/${this.config.projectId}/bot?t=${cacheBuster}`,
          {
            headers: {
              'Cache-Control': 'no-cache'
            }
          }
        );

        if (settings) {
          return {
            welcomeBonusAmount: Number(settings?.welcomeBonusAmount || 0),
            botUsername: settings?.botUsername || null
          };
        }
      } catch (error) {
        if (error.name === 'AbortError') {
          this.log('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞');
        } else {
          this.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', error);
        }
      }
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞');
      return { welcomeBonusAmount: 0, botUsername: null };
    },

    // –°–∫—Ä—ã—Ç—å –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    hideRegistrationPrompt: function () {
      const prompt = document.querySelector('.registration-prompt-inline');
      if (prompt) {
        prompt.remove();
        this.log('–°–∫—Ä—ã—Ç–∞ –ø–ª–∞—à–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      // –ü–æ–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, —Ç.–∫. –º—ã –µ–≥–æ –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–∏
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—à–∫—É —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    showRegistrationPrompt: function () {
      try {
        this.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—à–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingPrompt = document.querySelector(
          '.registration-prompt-inline'
        );
        if (existingPrompt) {
          existingPrompt.remove();
        }

        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const promocodeWrapper = document.querySelector(
          '.t-inputpromocode__wrapper'
        );
        if (!promocodeWrapper) {
          this.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É
        this.loadProjectSettingsForPrompt()
          .then((settings) => {
            this.log(
              '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É:',
              settings
            );
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.renderRegistrationPrompt(settings);
          })
          .catch((error) => {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const defaultSettings = {
              welcomeBonusAmount: 500, // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              botUsername: null
            };
            this.renderRegistrationPrompt(defaultSettings);
          });
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      }
    },

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–ª–∞—à–∫–∏ —Å fallback
    loadProjectSettingsForPrompt: async function () {
      try {
        this.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–ª–∞—à–∫–∏...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        const forceRefresh = this.shouldForceRefreshSettings();

        if (!forceRefresh) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–Ω–∞—á–∞–ª–∞
          const cachedSettings = this.getCachedProjectSettings();
          if (cachedSettings) {
            this.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', cachedSettings);
            return cachedSettings;
          }
        }

        this.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const settings = await this.loadProjectSettingsSimple();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        this.cacheProjectSettings(settings, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

        this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à:', settings);
        return settings;
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultSettings = {
          welcomeBonusAmount: 500, // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          botUsername: null
        };
        this.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultSettings);
        return defaultSettings;
      }
    },

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    shouldForceRefreshSettings: function () {
      try {
        const cacheKey = `tilda_bonus_${this.config.projectId}_settings`;
        const cached = localStorage.getItem(cacheKey);
        if (!cached) return true; // –ù–µ—Ç –∫—ç—à–∞ - –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å

        const cacheData = JSON.parse(cached);
        const now = Date.now();
        const timeSinceLastLoad = now - (cacheData.lastLoad || 0);

        // –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API
        return timeSinceLastLoad > 30 * 1000;
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º
      }
    },

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    loadProjectSettingsSimple: async function () {
      try {
        const cacheBuster = Date.now();
        const url = `${this.config.apiUrl}/api/projects/${this.config.projectId}/bot?t=${cacheBuster}`;

        this.log('üîó –ó–∞–ø—Ä–æ—Å –∫ API:', url);

        // –ü—Ä–æ—Å—Ç–æ–π fetch –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const response = await fetch(url, {
          method: 'GET',
          mode: 'cors',
          cache: 'no-cache'
        });

        this.log('üìä –û—Ç–≤–µ—Ç API:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok,
          headers: Object.fromEntries(response.headers.entries())
        });

        if (response.ok) {
          const data = await response.json();
          this.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç API:', data);

          const processedData = {
            welcomeBonusAmount: Number(data?.welcomeBonusAmount || 500),
            botUsername: data?.botUsername || null,
            widgetSettings: data?.widgetSettings || null
          };

          this.log('üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–ª–∞—à–∫–∏:', processedData);

          return processedData;
        } else {
          throw new Error(
            `API error: ${response.status} ${response.statusText}`
          );
        }
      } catch (error) {
        this.log('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:', error);
        throw error;
      }
    },

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    cacheProjectSettings: function (settings, ttlMs) {
      try {
        const cacheData = {
          settings: settings,
          timestamp: Date.now(), // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞
          lastLoad: Date.now(), // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API
          ttl: ttlMs
        };
        localStorage.setItem(
          `tilda_bonus_${this.config.projectId}_settings`,
          JSON.stringify(cacheData)
        );
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫—ç—à:', error);
      }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫—ç—à–∞
    getCachedProjectSettings: function () {
      try {
        const cacheKey = `tilda_bonus_${this.config.projectId}_settings`;
        const cached = localStorage.getItem(cacheKey);
        if (!cached) return null;

        const cacheData = JSON.parse(cached);
        const now = Date.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—ç—à–∞
        if (now - cacheData.timestamp > cacheData.ttl) {
          localStorage.removeItem(cacheKey);
          return null;
        }

        return cacheData.settings;
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫—ç—à–∞:', error);
        return null;
      }
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    renderRegistrationPrompt: function (settings) {
      try {
        this.log('üé® –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settings);

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const welcomeBonusAmount = Number(settings.welcomeBonusAmount || 500);
        const botUsername = String(settings.botUsername || '')
          .replace(/[<>'"&]/g, '') // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
          .replace('@', ''); // –£–±–∏—Ä–∞–µ–º @ –∏–∑ –∏–º–µ–Ω–∏ –±–æ—Ç–∞

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const widgetSettings = settings.widgetSettings || {};
        const templates = {
          registrationTitle:
            widgetSettings.registrationTitle ||
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –ø–æ–ª—É—á–∏ {bonusAmount} –±–æ–Ω—É—Å–æ–≤!',
          registrationDescription:
            widgetSettings.registrationDescription ||
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –Ω–∞—à–µ–π –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ',
          registrationButtonText:
            widgetSettings.registrationButtonText ||
            '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞',
          registrationFallbackText:
            widgetSettings.registrationFallbackText ||
            '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        };

        this.log('üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
          welcomeBonusAmount,
          botUsername
        });

        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const promocodeWrapper = document.querySelector(
          '.t-inputpromocode__wrapper'
        );
        if (!promocodeWrapper) {
          this.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ');
          return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—à–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
        const existingPrompt = promocodeWrapper.querySelector(
          '.registration-prompt-inline'
        );
        if (existingPrompt) {
          existingPrompt.remove();
          this.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–ª–∞—à–∫–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const promptDiv = document.createElement('div');
        promptDiv.className = 'registration-prompt-inline';
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const styles = {
          // –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          backgroundColor: widgetSettings?.backgroundColor || '#667eea',
          backgroundGradient: widgetSettings?.backgroundGradient || '#764ba2',
          textColor: widgetSettings?.textColor || '#ffffff',
          titleColor: widgetSettings?.titleColor || '#ffffff',
          descriptionColor: widgetSettings?.descriptionColor || '#ffffff',
          fallbackTextColor: widgetSettings?.fallbackTextColor || '#ffffff',
          buttonTextColor: widgetSettings?.buttonTextColor || '#ffffff',
          buttonBackgroundColor:
            widgetSettings?.buttonBackgroundColor || 'rgba(255,255,255,0.2)',
          buttonBorderColor:
            widgetSettings?.buttonBorderColor || 'rgba(255,255,255,0.3)',
          buttonHoverColor:
            widgetSettings?.buttonHoverColor || 'rgba(255,255,255,0.3)',
          fallbackBackgroundColor:
            widgetSettings?.fallbackBackgroundColor || 'rgba(0,0,0,0.1)',

          // –†–∞–∑–º–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
          borderRadius: widgetSettings?.borderRadius || '12px',
          padding: widgetSettings?.padding || '16px',
          marginBottom: widgetSettings?.marginBottom || '12px',
          iconSize: widgetSettings?.iconSize || '24px',
          titleFontSize: widgetSettings?.titleFontSize || '18px',
          titleFontWeight: widgetSettings?.titleFontWeight || 'bold',
          descriptionFontSize: widgetSettings?.descriptionFontSize || '14px',
          buttonFontSize: widgetSettings?.buttonFontSize || '14px',
          buttonFontWeight: widgetSettings?.buttonFontWeight || '500',
          buttonPadding: widgetSettings?.buttonPadding || '8px 16px',
          buttonBorderRadius: widgetSettings?.buttonBorderRadius || '6px',
          fallbackFontSize: widgetSettings?.fallbackFontSize || '14px',
          fallbackPadding: widgetSettings?.fallbackPadding || '8px',
          fallbackBorderRadius: widgetSettings?.fallbackBorderRadius || '4px',

          // –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ç–µ–Ω–∏
          boxShadow: widgetSettings?.boxShadow || '0 4px 6px rgba(0,0,0,0.1)',
          buttonBoxShadow: widgetSettings?.buttonBoxShadow || 'none',
          iconAnimation: widgetSettings?.iconAnimation || 'none',

          // –≠–º–æ–¥–∑–∏ –∏ –∏–∫–æ–Ω–∫–∏
          iconEmoji: widgetSettings?.iconEmoji || 'üéÅ',
          iconColor: widgetSettings?.iconColor || '#ffffff',

          // –®—Ä–∏—Ñ—Ç—ã
          fontFamily:
            widgetSettings?.fontFamily ||
            'system-ui, -apple-system, sans-serif',

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          maxWidth: widgetSettings?.maxWidth || '100%',
          textAlign: widgetSettings?.textAlign || 'center',
          buttonWidth: widgetSettings?.buttonWidth || 'auto',
          buttonDisplay: widgetSettings?.buttonDisplay || 'inline-block',
          fontSize: widgetSettings?.fontSize || '14px'
        };

        // –°–æ–±–∏—Ä–∞–µ–º HTML –¥–ª—è –ø–ª–∞—à–∫–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        let htmlContent = `
          <div class="registration-prompt" style="
            background: linear-gradient(135deg, ${styles.backgroundColor} 0%, ${styles.backgroundGradient} 100%);
            color: ${styles.textColor};
            padding: ${styles.padding};
            border-radius: ${styles.borderRadius};
            margin-bottom: ${styles.marginBottom};
            text-align: ${styles.textAlign};
            box-shadow: ${styles.boxShadow};
            max-width: ${styles.maxWidth};
            font-size: ${styles.fontSize};
            font-family: ${styles.fontFamily};
          ">`;

        // –ò–∫–æ–Ω–∫–∞
        if (widgetSettings.showIcon) {
          htmlContent += `
            <div class="registration-icon" style="
              font-size: ${styles.iconSize};
              margin-bottom: 8px;
              color: ${styles.iconColor};
              ${styles.iconAnimation !== 'none' ? 'animation: ' + styles.iconAnimation + ' 2s infinite;' : ''}
            ">${styles.iconEmoji}</div>`;
        }

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if (widgetSettings.showTitle) {
          htmlContent += `
            <div class="registration-title" style="
              font-size: ${styles.titleFontSize};
              font-weight: ${styles.titleFontWeight};
              margin-bottom: 8px;
              color: ${styles.titleColor};
            ">${templates.registrationTitle.replace('{bonusAmount}', welcomeBonusAmount)}</div>`;
        }

        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (widgetSettings.showDescription) {
          htmlContent += `
            <div class="registration-description" style="
              font-size: ${styles.descriptionFontSize};
              margin-bottom: 12px;
              opacity: 0.9;
              color: ${styles.descriptionColor};
            ">${templates.registrationDescription}</div>`;
        }

        // –ö–Ω–æ–ø–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –±–æ—Ç–∞
        htmlContent += `<div class="registration-action">`;

        if (widgetSettings.showButton && botUsername) {
          htmlContent += `
            <a href="https://t.me/${botUsername}" target="_blank" class="registration-button" style="
              display: ${styles.buttonDisplay};
              background: ${styles.buttonBackgroundColor};
              color: ${styles.buttonTextColor};
              padding: ${styles.buttonPadding};
              border-radius: ${styles.buttonBorderRadius};
              text-decoration: none;
              font-weight: ${styles.buttonFontWeight};
              font-size: ${styles.buttonFontSize};
              border: 1px solid ${styles.buttonBorderColor};
              width: ${styles.buttonWidth};
              box-shadow: ${styles.buttonBoxShadow};
              transition: all 0.3s ease;
            " onmouseover="this.style.background='${styles.buttonHoverColor}'" onmouseout="this.style.background='${styles.buttonBackgroundColor}'">
              ${templates.registrationButtonText}
            </a>`;
        } else if (widgetSettings.showFallbackText) {
          htmlContent += `
            <div style="
              font-size: ${styles.fallbackFontSize};
              color: ${styles.fallbackTextColor};
              background: ${styles.fallbackBackgroundColor};
              padding: ${styles.fallbackPadding};
              border-radius: ${styles.fallbackBorderRadius};
              opacity: 0.8;
            ">${templates.registrationFallbackText}</div>`;
        }

        htmlContent += `</div></div>`;

        promptDiv.innerHTML = htmlContent;

        // –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –ø–ª–∞—à–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—à–∫—É –ü–ï–†–ï–î –ø–æ–ª–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
        promocodeWrapper.insertBefore(promptDiv, promocodeWrapper.firstChild);

        this.log('‚úÖ –ü–ª–∞—à–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', {
          welcomeBonusAmount,
          botUsername,
          hasButton: !!botUsername
        });
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      }
    },

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å –≤–∏–¥–∂–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    removeWidget: function () {
      const container = document.querySelector('.bonus-widget-container');
      if (container && container.parentNode && this.state.promoWrapper) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–º–µ—Å—Ç–æ –≤–∏–¥–∂–µ—Ç–∞
        container.parentNode.replaceChild(this.state.promoWrapper, container);
        this.log('–í–∏–¥–∂–µ—Ç —É–¥–∞–ª—ë–Ω, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
      } else if (container && container.parentNode) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ promoWrapper, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º
        container.parentNode.removeChild(container);
        this.log('–í–∏–¥–∂–µ—Ç —É–¥–∞–ª—ë–Ω (–±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞)');
      }
    },

    // –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
    findInsertPoint: function () {
      // –ò—â–µ–º –±–ª–æ–∫ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
      const selectors = [
        '.t706__cartwin-promocode',
        '.t706__promocode',
        '.t706__cartwin-totalamount',
        '.t706__cartwin-bottom',
        '.t-form__submit',
        '[href*="tilda.cc/rec"]'
      ];

      for (const selector of selectors) {
        const element = document.querySelector(selector);
        if (element) {
          return element;
        }
      }

      return null;
    },

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∫–æ—Ä–∑–∏–Ω–æ–π (–±–µ–∑ —Ç—è–∂—ë–ª–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è style –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É)
    observeCart: function () {
      const attachCartObserver = () => {
        const cartWindow = this.getCachedElement('.t706__cartwin');
        if (!cartWindow) return false;
        const onChange = () => {
          const isOpen = cartWindow.style.display !== 'none';
          if (isOpen) this.onCartOpenDebounced();
        };
        // –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        onChange();
        this.state._cartObserver = new MutationObserver(onChange);
        this.state._cartObserver.observe(cartWindow, {
          attributes: true,
          attributeFilter: ['style']
        });
        return true;
      };

      if (!attachCartObserver()) {
        this.state._bodyObserver = new MutationObserver(() => {
          if (attachCartObserver() && this.state._bodyObserver) {
            this.state._bodyObserver.disconnect();
            this.state._bodyObserver = null;
          }
        });
        this.state._bodyObserver.observe(document.body, {
          childList: true,
          subtree: true
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ this –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ event listener'–∞—Ö
      const self = this;

      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã Tilda
      document.addEventListener('tcart:updated', (event) => {
        self.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ tcart:updated');

        // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –±–æ–Ω—É—Å—ã
        if (
          self.state.appliedBonuses > 0 &&
          window.tcart &&
          window.tcart.promocode
        ) {
          delete window.tcart.promocode;
          self.log(
            '‚úÖ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É–¥–∞–ª–µ–Ω window.tcart.promocode –ø—Ä–∏ tcart:updated'
          );
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
        setTimeout(() => {
          self.adjustBonusesForCartChange();
          self.updateBalanceDisplay();
        }, 100);
      });

      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
      document.addEventListener('click', (event) => {
        console.log('üéØ TildaBonusWidget: –ö–õ–ò–ö –û–ë–ù–ê–†–£–ñ–ï–ù');
        console.log('üéØ TildaBonusWidget: –¶–µ–ª—å –∫–ª–∏–∫–∞:', event.target);
        console.log(
          'üéØ TildaBonusWidget: –ö–ª–∞—Å—Å—ã —Ü–µ–ª–∏:',
          event.target.className
        );

        if (
          event.target.closest(
            '.t706__product-plus, .t706__product-minus, .t706__product-del'
          )
        ) {
          console.log(
            'üéØ TildaBonusWidget: –ö–õ–ò–ö –ü–û –ö–ù–û–ü–ö–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê!'
          );
          self.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞');
          self.log('üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥');

          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–∏–∑–Ω–∞–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –≤ state, —Ç–∞–∫ –∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ tcart
          const hasAppliedBonuses = self.state.appliedBonuses > 0;
          const hasPromocode = window.tcart && window.tcart.promocode;

          if (hasAppliedBonuses || hasPromocode) {
            console.log(
              'üéØ TildaBonusWidget: –ï—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥',
              { hasAppliedBonuses, hasPromocode }
            );
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ë–ï–ó –∑–∞–¥–µ—Ä–∂–∫–∏
            if (window.tcart && window.tcart.promocode) {
              console.log(
                'üéØ TildaBonusWidget: –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥, —É–¥–∞–ª—è–µ–º:',
                window.tcart.promocode
              );
              delete window.tcart.promocode;
              self.log('‚úÖ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É–¥–∞–ª–µ–Ω window.tcart.promocode');
              console.log(
                'üéØ TildaBonusWidget: –ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω –∏–∑ window.tcart'
              );
            } else {
              console.log(
                'üéØ TildaBonusWidget: –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window.tcart'
              );
            }
          } else {
            console.log(
              'üéØ TildaBonusWidget: –ù–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ'
            );
          }

          setTimeout(() => {
            self.adjustBonusesForCartChange();
            self.updateCartTotalAndMaxBonuses();
            self.log('‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤');
          }, 200);
        }
      });

      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ API Tilda
      document.addEventListener('tcart:quantity:changed', (event) => {
        self.log('üö® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ tcart:quantity:changed');
        setTimeout(() => {
          self.adjustBonusesForCartChange();
          self.updateCartTotalAndMaxBonuses();
          self.forceUpdateCartDisplay();
        }, 150);
      });

      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
      document.addEventListener('tcart:recalculated', (event) => {
        self.log('üö® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ tcart:recalculated');
        setTimeout(() => {
          self.adjustBonusesForCartChange();
          self.updateCartTotalAndMaxBonuses();
        }, 100);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º MutationObserver –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—Ä–∑–∏–Ω—ã
      const observeCartChanges = () => {
        const cartWindow = document.querySelector('.t706__cartwin');
        if (cartWindow) {
          // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
          const cartObserver = new MutationObserver((mutations) => {
            let shouldCheckBonuses = false;

            mutations.forEach((mutation) => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
              if (
                mutation.type === 'childList' &&
                mutation.addedNodes.length > 0
              ) {
                // –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ —Å—É–º–º–æ–π
                Array.from(mutation.addedNodes).forEach((node) => {
                  if (
                    node.nodeType === 1 &&
                    (node.classList?.contains('t706__product') ||
                      node.classList?.contains('t706__cartwin-totalamount') ||
                      node.querySelector?.(
                        '.t706__product, .t706__cartwin-totalamount'
                      ))
                  ) {
                    shouldCheckBonuses = true;
                  }
                });
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
              if (
                mutation.type === 'attributes' &&
                (mutation.attributeName === 'data-total' ||
                  mutation.attributeName === 'data-quantity')
              ) {
                shouldCheckBonuses = true;
              }
            });

            if (shouldCheckBonuses) {
              self.log(
                'üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ —á–µ—Ä–µ–∑ MutationObserver'
              );
              setTimeout(() => {
                self.adjustBonusesForCartChange();
                self.updateCartTotalAndMaxBonuses();
              }, 200);
            }
          });

          cartObserver.observe(cartWindow, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['data-total', 'data-quantity', 'class']
          });

          self.log('‚úÖ MutationObserver –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∫–æ—Ä–∑–∏–Ω–æ–π
      observeCartChanges();
    },

    onCartOpenDebounced: function () {
      if (this.state.cartOpenDebounceTimer)
        clearTimeout(this.state.cartOpenDebounceTimer);
      this.state.cartOpenDebounceTimer = setTimeout(() => {
        try {
          this.onCartOpen();
        } catch (e) {
          this.log('onCartOpen error', e);
        }
      }, 250);
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    onCartOpen: function () {
      this.log('–ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞');

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
      const currentTotal = this.getCartTotal();
      if (currentTotal > 0 && this.state.originalCartTotal === 0) {
        this.state.originalCartTotal = currentTotal;
        this.log(
          '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã:',
          this.state.originalCartTotal
        );
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π UI
      this.updateWidgetState();
    },

    // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateWidgetState: function () {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ localStorage)
      const hasStoredData = this.state.userEmail || this.state.userPhone;

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ getUserContact() –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const userContact = this.getUserContact();

      if (
        hasStoredData ||
        (userContact && (userContact.email || userContact.phone))
      ) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º
        this.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º', {
          hasStoredData,
          userContact: userContact
            ? {
                hasEmail: !!userContact.email,
                hasPhone: !!userContact.phone
              }
            : null
        });
        this.hideRegistrationPrompt();
        this.ensureWidgetMounted();
        this.loadUserBalance(
          userContact || {
            email: this.state.userEmail,
            phone: this.state.userPhone
          }
        );
      } else {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        this.log(
          '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        );
        this.removeWidget();
        this.showRegistrationPrompt();
      }
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞: –±–æ–Ω—É—Å—ã | –ø—Ä–æ–º–æ–∫–æ–¥
    switchMode: function (mode) {
      this.state.mode = mode === 'promo' ? 'promo' : 'bonus';
      var bonusTab = document.getElementById('bonus-tab');
      var promoTab = document.getElementById('promo-tab');
      var bonusSection = document.getElementById('bonus-section');
      if (!bonusTab || !promoTab || !bonusSection) return;

      if (this.state.mode === 'promo') {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
        bonusTab.classList.remove('active');
        promoTab.classList.add('active');
        bonusSection.style.display = 'none';

        // –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –±–æ–Ω—É—Å–æ–≤
        // –í–∏–¥–∂–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–±—ã
        this.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∂–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–∞ - —Å–∫—Ä—ã—Ç–∞ —Å–µ–∫—Ü–∏—è –±–æ–Ω—É—Å–æ–≤');
      } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º –±–æ–Ω—É—Å–æ–≤
        promoTab.classList.remove('active');
        bonusTab.classList.add('active');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤–º–µ—Å—Ç–æ –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const promoWrapper = document.querySelector(
          '.t-inputpromocode__wrapper'
        );
        if (
          promoWrapper &&
          !document.querySelector('.bonus-widget-container')
        ) {
          this.state.promoWrapper = promoWrapper;
          this.createWidget();
          this.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∂–∏–º –±–æ–Ω—É—Å–æ–≤ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–∏–¥–∂–µ—Ç');
        }
        bonusSection.style.display = 'flex';
      }
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞–Ω–µ–µ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã/–≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      this.resetAppliedBonuses();
    },

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    observeUserInput: function () {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      document.addEventListener('input', (e) => {
        if (
          e.target.type === 'email' ||
          e.target.name === 'email' ||
          e.target.type === 'tel' ||
          e.target.name === 'phone'
        ) {
          this.onUserInputChange(e.target);
        }
      });

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—Ö–æ–¥–∞
      document.addEventListener('click', (e) => {
        if (
          e.target.classList.contains('t706__auth__log-in-btn') ||
          e.target.classList.contains('js-cart-log-out') ||
          e.target.closest('.t706__auth__log-in-btn') ||
          e.target.closest('.js-cart-log-out')
        ) {
          this.log('üö™ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—Ö–æ–¥–∞');
          this.onUserLogout();
        }
      });
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    onUserLogout: function () {
      this.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.state.userEmail = '';
      this.state.userPhone = '';
      this.state.bonusBalance = 0;
      this.state.appliedBonuses = 0;

      // –û—á–∏—â–∞–µ–º localStorage
      localStorage.removeItem('tilda_user_email');
      localStorage.removeItem('tilda_user_phone');
      localStorage.removeItem('tilda_applied_bonuses');

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
      this.clearAllPromocodes();

      // –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–ª–∞—à–∫–∏
      this.removeWidget();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      setTimeout(() => {
        this.showRegistrationPrompt();
      }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è

      this.log(
        '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã, –≤–∏–¥–∂–µ—Ç —É–¥–∞–ª–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–ª–∞—à–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      );
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    onUserInputChange: function (input) {
      const value = input.value.trim();
      if (!value) return;

      let hasNewData = false;

      if (input.type === 'email' || input.name === 'email') {
        if (this.state.userEmail !== value) {
          this.state.userEmail = value;
          localStorage.setItem('tilda_user_email', value);
          hasNewData = true;
        }
      } else if (input.type === 'tel' || input.name === 'phone') {
        if (this.state.userPhone !== value) {
          this.state.userPhone = value;
          localStorage.setItem('tilda_user_phone', value);
          hasNewData = true;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      if (hasNewData) {
        this.log('üìù –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑–∞–Ω–∞ –ª–∏ —Å–µ–π—á–∞—Å –ø–ª–∞—à–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registrationPrompt = document.querySelector(
          '.registration-prompt-inline'
        );
        if (registrationPrompt) {
          this.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å –ø–ª–∞—à–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç');
          this.hideRegistrationPrompt();
          this.ensureWidgetMounted();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
        this.updateWidgetState();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –¥–µ–±–∞—É–Ω—Å–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if (this.state.userEmail || this.state.userPhone) {
          this.loadUserBalanceDebounced({
            email: this.state.userEmail,
            phone: this.state.userPhone
          });
        }
      }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserContact: function () {
      try {
        this.log('üîç –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –ò–∑ localStorage
        const savedEmail = localStorage.getItem('tilda_user_email');
        const savedPhone = localStorage.getItem('tilda_user_phone');

        if (savedEmail || savedPhone) {
          this.log('üì¶ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ localStorage:', {
            hasEmail: !!savedEmail,
            hasPhone: !!savedPhone
          });
          return { email: savedEmail, phone: savedPhone };
        }

        // –ò–∑ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        const emailField = document.querySelector(
          'input[name="email"], input[type="email"], input[name="Email"]'
        );
        const phoneField = document.querySelector(
          'input[name="phone"], input[type="tel"], input[name="Phone"], input[name="tildaspec-phone-part"]'
        );

        const email = emailField ? emailField.value.trim() : null;
        const phone = phoneField ? phoneField.value.trim() : null;

        this.log('üîç –ü–æ–∏—Å–∫ –≤ –ø–æ–ª—è—Ö —Ñ–æ—Ä–º—ã:', {
          emailField: !!emailField,
          phoneField: !!phoneField,
          hasEmail: !!(email && email.length > 0),
          hasPhone: !!(phone && phone.length > 0),
          emailValue: email ? email.substring(0, 3) + '***' : '–ø—É—Å—Ç–æ',
          phoneValue: phone ? phone.substring(0, 3) + '***' : '–ø—É—Å—Ç–æ'
        });

        if ((email && email.length > 0) || (phone && phone.length > 0)) {
          this.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –ø–æ–ª—è—Ö —Ñ–æ—Ä–º—ã');
          return { email, phone };
        }

        this.log('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return null;
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        return null;
      }
    },

    // –î–µ–±–∞—É–Ω—Å-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    loadUserBalanceDebounced: function (contact) {
      if (this.state.balanceDebounceTimer) {
        clearTimeout(this.state.balanceDebounceTimer);
      }
      this.state.balanceDebounceTimer = setTimeout(() => {
        this.loadUserBalance(contact);
      }, this.config.debounceMs);
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserBalance: async function (contact) {
      if (!contact || (!contact.email && !contact.phone)) return;

      try {
        this.showLoading(true);
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
        if (this.state.activeFetchController) {
          try {
            this.state.activeFetchController.abort();
          } catch (_) {}
        }
        const controller = new AbortController();
        this.state.activeFetchController = controller;

        const params = new URLSearchParams();
        if (contact.email) params.append('email', contact.email);
        if (contact.phone) params.append('phone', contact.phone);

        const data = await this.makeApiRequest(
          `${this.config.apiUrl}/api/projects/${this.config.projectId}/users/balance?${params}`
        );

        if (!data) return; // Request was aborted or failed

        if (data && data.success && data.user) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî –º–æ–Ω—Ç–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
          if (this.ensureWidgetMounted()) {
            this.state.bonusBalance = data.balance || 0;
            this.state.levelInfo = data.levelInfo || null;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            const currentTotal = this.getCartTotal();
            if (currentTotal > 0 && this.state.originalCartTotal === 0) {
              this.state.originalCartTotal = currentTotal;
              this.log(
                '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞:',
                this.state.originalCartTotal
              );
            }

            this.updateBalanceDisplay();
            this.log(
              '–ë–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω:',
              this.state.bonusBalance,
              '–£—Ä–æ–≤–µ–Ω—å:',
              this.state.levelInfo
            );
          }
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—à–∫—É —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          this.showRegistrationPrompt();
        }
      } catch (error) {
        if (error && error.name === 'AbortError') {
          this.log('–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω—ë–Ω (–Ω–æ–≤—ã–π –≤–≤–æ–¥)');
        } else {
          this.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        }
      } finally {
        this.showLoading(false);
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
    adjustBonusesForCartChange: function () {
      try {
        this.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –±–æ–Ω—É—Å–æ–≤');

        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (this.state.appliedBonuses <= 0) {
          this.log('‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
        const currentTotal = this.getCartTotal();
        this.log(
          `üí∞ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã: ${currentTotal}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è: ${this.state.originalCartTotal}`
        );

        // –ï—Å–ª–∏ —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        if (Math.abs(currentTotal - this.state.originalCartTotal) < 0.01) {
          this.log(
            '‚ÑπÔ∏è –°—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
          );
          // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        }

        this.log(
          'üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏ - —É–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥'
        );

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ Tilda
        this.forceDeletePromocode();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
        this.state.appliedBonuses = 0;
        localStorage.setItem('tilda_applied_bonuses', '0');

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateBalanceDisplay();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showInfo(
          '–ë–æ–Ω—É—Å—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.'
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
        this.state.originalCartTotal = currentTotal;

        this.log('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –±–æ–Ω—É—Å–æ–≤:', error);
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
    updateCartTotalAndMaxBonuses: function () {
      try {
        this.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã –∏ –º–∞–∫—Å–∏–º—É–º –±–æ–Ω—É—Å–æ–≤');

        // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º originalCartTotal –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
        const currentTotal = this.getCartTotal();
        if (currentTotal > 0) {
          this.state.originalCartTotal = currentTotal;
          this.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã: ${currentTotal}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        this.updateBalanceDisplay();
        this.log('‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã:', error);
      }
    },

    updateBalanceDisplay: function () {
      const balanceElement = document.querySelector('.bonus-balance');
      const balanceAmount = document.querySelector('.bonus-balance-amount');
      const amountInput = document.getElementById('bonus-amount-input');
      const applyButton = document.getElementById('apply-bonus-button');

      if (this.state.bonusBalance > 0) {
        balanceElement.style.display = 'block';
        balanceAmount.textContent = this.state.bonusBalance;
        amountInput.style.display = 'block';
        applyButton.style.display = 'block';

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–ª—è input —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º—É–º–∞
        const originalCartTotal = this.getOriginalCartTotal();
        let maxBonuses = Math.min(this.state.bonusBalance, originalCartTotal);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.state.levelInfo && this.state.levelInfo.paymentPercent < 100) {
          const maxByLevel =
            (originalCartTotal * this.state.levelInfo.paymentPercent) / 100;
          maxBonuses = Math.min(maxBonuses, maxByLevel);
        }

        amountInput.max = maxBonuses.toFixed(2);
        const levelText =
          this.state.levelInfo && this.state.levelInfo.paymentPercent < 100
            ? ` (–¥–æ ${this.state.levelInfo.paymentPercent}%)`
            : '';
        amountInput.placeholder = `–ú–∞–∫—Å: ${maxBonuses.toFixed(2)} –±–æ–Ω—É—Å–æ–≤${levelText}`;
      } else {
        balanceElement.style.display = 'none';
        amountInput.style.display = 'none';
        applyButton.style.display = 'none';
      }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã
    getCartTotal: function () {
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –æ–±—â–µ–π —Å—É–º–º–æ–π
      const totalElement = document.querySelector(
        '.t706__cartwin-totalamount-withoutdelivery, .t706__cartwin-totalamount'
      );
      if (totalElement) {
        const totalText = totalElement.textContent || '';
        const total = parseFloat(
          totalText.replace(/[^\d.,]/g, '').replace(',', '.')
        );
        return isNaN(total) ? 0 : Number(total.toFixed(2));
      }
      return 0;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã (–±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫/–±–æ–Ω—É—Å–æ–≤)
    getOriginalCartTotal: function () {
      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (this.state.originalCartTotal > 0) {
        return this.state.originalCartTotal;
      }

      // –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
      const currentTotal = this.getCartTotal();

      // –ï—Å–ª–∏ –±–æ–Ω—É—Å—ã —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É
      if (this.state.appliedBonuses > 0 && currentTotal > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π
        this.state.originalCartTotal = currentTotal + this.state.appliedBonuses;
        return this.state.originalCartTotal;
      }

      return currentTotal;
    },

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ Tilda –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –±–æ–Ω—É—Å–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É ¬´–ü—Ä–æ–º–æ–∫–æ–¥¬ª –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    applyDiscountViaTilda: function (_amountRubles) {
      return false;
    },

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
    applyPromocode: function () {
      try {
        var input = document.getElementById('promo-code-input');
        if (!input) return;
        var code = (input.value || '').trim();
        if (!code) {
          var ps = document.getElementById('promo-status');
          if (ps) {
            ps.style.display = 'block';
            ps.innerHTML = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥';
            setTimeout(function () {
              ps.style.display = 'none';
            }, 2000);
          }
          return;
        }
        if (typeof window.t_input_promocode__addPromocode === 'function') {
          window.t_input_promocode__addPromocode({ promocode: code });
          if (typeof window.tcart__calcPromocode === 'function') {
            try {
              window.tcart__calcPromocode();
            } catch (_) {}
          }
          if (typeof window.tcart__reDraw === 'function') {
            try {
              window.tcart__reDraw();
            } catch (_) {}
          }
          this.showSuccess('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω');
        } else {
          this.showError('–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ');
        }
      } catch (e) {
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞');
        this.log('applyPromocode error', e);
      }
    },

    // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
    reapplyBonuses: function () {
      try {
        const currentAmount = this.state.appliedBonuses;
        if (currentAmount > 0) {
          this.log('–ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã:', currentAmount);

          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
          this.clearAllPromocodes();

          // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞–Ω–æ–≤–æ
          setTimeout(() => {
            this.applyBonuses(currentAmount);
          }, 500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        }
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤:', error);
      }
    },

    // –ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
    reapplyBonusesWithAmount: function (amount) {
      try {
        if (amount <= 0) {
          this.clearAllPromocodes();
          return;
        }

        this.log('–ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º:', amount);

        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        this.clearAllPromocodes();

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞–Ω–æ–≤–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        setTimeout(() => {
          this.applyBonusesDirect(amount);
        }, 500);
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º:', error);
      }
    },

    // –ü—Ä—è–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
    applyBonusesDirect: async function (amount) {
      try {
        this.showLoading(true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
        this.state.appliedBonuses = amount;
        localStorage.setItem('tilda_applied_bonuses', amount);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å –±–æ–Ω—É—Å–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ webhook
        this.addHiddenBonusField(amount);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –¢–∏–ª—å–¥—ã –∫–∞–∫ –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∏—Å–∫–∞—É–Ω—Ç–æ–º
        try {
          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
          this.clearAllPromocodes();

          // –ñ–¥–µ–º –æ—á–∏—Å—Ç–∫–∏
          await new Promise((resolve) => setTimeout(resolve, 300));

          // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å –±–æ–Ω—É—Å–∞–º–∏
          if (typeof window.t_input_promocode__addPromocode === 'function') {
            window.t_input_promocode__addPromocode({
              promocode: 'GUPIL',
              discountsum: amount
            });

            // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
            if (typeof window.tcart__calcPromocode === 'function') {
              try {
                window.tcart__calcPromocode();
              } catch (_) {}
            }

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
            if (typeof window.tcart__calcAmountWithDiscounts === 'function') {
              try {
                window.tcart__calcAmountWithDiscounts();
              } catch (_) {}
            }

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            if (typeof window.tcart__reDrawTotal === 'function') {
              try {
                window.tcart__reDrawTotal();
              } catch (_) {}
            }

            if (typeof window.tcart__reDraw === 'function') {
              try {
                window.tcart__reDraw();
              } catch (_) {}
            }
          } else {
            this.showError(
              '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —ç—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ'
            );
            return;
          }
        } catch (e) {
          this.log('applyPromocode error', e);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateBalanceDisplay();

        this.showLoading(false);
        this.showSuccess(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${amount} –±–æ–Ω—É—Å–æ–≤`);

        this.log('–ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é:', amount);
      } catch (error) {
        this.showLoading(false);
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤');
        this.log('–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', error);
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Å –±–æ–Ω—É—Å–∞–º–∏
    updateHiddenBonusField: function (amount) {
      try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
        const existingField = document.getElementById('tilda-applied-bonuses');
        if (existingField) {
          existingField.remove();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        this.addHiddenBonusField(amount);
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è –±–æ–Ω—É—Å–æ–≤:', error);
      }
    },

    // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    showInfo: function (message) {
      try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let infoElement = document.getElementById('bonus-info-message');
        if (!infoElement) {
          infoElement = document.createElement('div');
          infoElement.id = 'bonus-info-message';
          infoElement.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2196F3;
            color: white;
            padding: 12px 16px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            z-index: 10000;
            font-size: 14px;
            max-width: 300px;
            word-wrap: break-word;
          `;
          document.body.appendChild(infoElement);
        }

        infoElement.textContent = message;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          if (infoElement && infoElement.parentNode) {
            infoElement.remove();
          }
        }, 5000);
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    },

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    clearAllPromocodes: function () {
      try {
        this.log('–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã');

        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ tcart (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ Tilda)
        if (window.tcart && window.tcart.promocode) {
          try {
            delete window.tcart.promocode;
            this.log('–£–¥–∞–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ window.tcart');
          } catch (_) {}
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
        this.state.appliedBonuses = 0;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ applied_bonuses_field
        const appliedBonusesField = document.getElementById(
          'applied_bonuses_field'
        );
        if (appliedBonusesField) {
          appliedBonusesField.value = '0';
          this.log('–°–±—Ä–æ—à–µ–Ω–æ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ applied_bonuses_field');
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ–Ω—É—Å–æ–≤
        const bonusStatus = document.getElementById('bonus-status');
        if (bonusStatus) {
          bonusStatus.innerHTML = '';
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ Tilda –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (typeof window.tcart__calcAmountWithDiscounts === 'function') {
          try {
            window.tcart__calcAmountWithDiscounts();
            this.log('–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å–∫–∏–¥–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ');
          } catch (e) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å–∫–∏–¥–æ–∫:', e);
          }
        }

        if (typeof window.tcart__reDrawTotal === 'function') {
          try {
            window.tcart__reDrawTotal();
            this.log('–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω –∏—Ç–æ–≥ –∫–æ—Ä–∑–∏–Ω—ã');
          } catch (e) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ –∏—Ç–æ–≥–∞:', e);
          }
        }

        if (typeof window.tcart__updateTotalProductsinCartObj === 'function') {
          try {
            window.tcart__updateTotalProductsinCartObj();
            this.log('–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–±—ä–µ–∫—Ç–µ –∫–æ—Ä–∑–∏–Ω—ã');
          } catch (e) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤:', e);
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ Tilda API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if (typeof window.t_input_promocode__clearPromocode === 'function') {
          try {
            window.t_input_promocode__clearPromocode();
          } catch (e) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ Tilda API:', e);
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —á–µ—Ä–µ–∑ tcart__calcPromocode –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof window.tcart__calcPromocode === 'function') {
          try {
            window.tcart__calcPromocode();
            this.log('–í—ã–ø–æ–ª–Ω–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞');
          } catch (e) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ—Å—á–µ—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', e);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
        this.updateBalanceDisplay();
        this.updateBonusInputMax();

        this.log('–ü—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã');
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
      }
    },

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    forceDeletePromocode: function () {
      try {
        this.log('üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –ù–ê–ß–ê–õ–û');

        // 1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–¥–∞–ª—è–µ–º –∏–∑ window.tcart.promocode –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (window.tcart) {
          this.log('üì¶ window.tcart –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥');

          if (window.tcart.promocode) {
            this.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥:', window.tcart.promocode);
            delete window.tcart.promocode;
            this.log('‚úÖ –£–î–ê–õ–ï–ù window.tcart.promocode');
          } else {
            this.log('‚ÑπÔ∏è window.tcart.promocode —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          }

          // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
          if (window.tcart.promo) {
            delete window.tcart.promo;
            this.log('‚úÖ –£–î–ê–õ–ï–ù window.tcart.promo');
          }
          if (window.tcart.discount) {
            delete window.tcart.discount;
            this.log('‚úÖ –£–î–ê–õ–ï–ù window.tcart.discount');
          }
          if (window.tcart.discountvalue) {
            delete window.tcart.discountvalue;
            this.log('‚úÖ –£–î–ê–õ–ï–ù window.tcart.discountvalue');
          }
        } else {
          this.log('‚ùå window.tcart –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        // 2. –û—á–∏—â–∞–µ–º –í–°–ï –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const promocodeSelectors = [
          '.t-inputpromocode',
          'input[name="promocode"]',
          'input[name="promo"]',
          '#promocode',
          '#promo'
        ];

        promocodeSelectors.forEach((selector) => {
          const input = document.querySelector(selector);
          if (input) {
            input.value = '';
            this.log(`‚úÖ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ ${selector}`);
          }
        });

        // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ Tilda
        const tildaFunctions = [
          'tcart__calcAmountWithDiscounts',
          'tcart__reDrawTotal',
          'tcart__updateTotalProductsinCartObj',
          'tcart__calcPromocode',
          't_input_promocode__clearPromocode'
        ];

        tildaFunctions.forEach((funcName) => {
          if (typeof window[funcName] === 'function') {
            try {
              window[funcName]();
              this.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞–Ω–∞ ${funcName}`);
            } catch (e) {
              this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ ${funcName}:`, e);
            }
          }
        });

        // 4. –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
        this.state.appliedBonuses = 0;
        this.state.originalCartTotal = this.getCartTotal();
        localStorage.setItem('tilda_applied_bonuses', '0');

        // 5. –û—á–∏—â–∞–µ–º –í–°–ï —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
        const hiddenFields = [
          'applied_bonuses_field',
          'applied_bonuses',
          'bonus_amount',
          'promocode_field',
          'promo_field'
        ];

        hiddenFields.forEach((fieldId) => {
          const field = document.getElementById(fieldId);
          if (field) {
            field.value = '0';
            this.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ –ø–æ–ª–µ ${fieldId}`);
          }
        });

        // 6. –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const statusSelectors = [
          '#bonus-status',
          '.bonus-status',
          '.promocode-status',
          '.t-promocode-status'
        ];

        statusSelectors.forEach((selector) => {
          const element = document.querySelector(selector);
          if (element) {
            element.innerHTML = '';
            element.style.display = 'none';
          }
        });

        // 7. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateBalanceDisplay();

        this.log('üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ó–ê–í–ï–†–®–ï–ù–û');
      } catch (error) {
        this.log(
          '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:',
          error
        );
      }
    },

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è/–ø–µ—Ä–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    applyOrReapplyBonuses: function () {
      if (this.state.appliedBonuses > 0) {
        this.log('–ë–æ–Ω—É—Å—ã —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –ø–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º');
        this.reapplyBonuses();
      } else {
        this.log('–ë–æ–Ω—É—Å—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º');
        this.applyBonuses();
      }
    },

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserState: function () {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –∏ –∫—É–∫–∏
      const userEmail = this.getUserEmail();
      const telegramLinked = this.isTelegramLinked();

      if (!userEmail && !telegramLinked) {
        return 'not_registered'; // üî¥ –°–æ—Å—Ç–æ—è–Ω–∏–µ 1
      } else if (userEmail && !telegramLinked) {
        return 'registered_not_confirmed'; // üü° –°–æ—Å—Ç–æ—è–Ω–∏–µ 2
      } else if (userEmail && telegramLinked) {
        return 'fully_activated'; // üü¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ 3
      }
      return 'unknown';
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    canSpendBonuses: function () {
      const userState = this.getUserState();
      return userState === 'fully_activated'; // –¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    },

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
    applyBonuses: async function () {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã
      if (!this.canSpendBonuses()) {
        const userState = this.getUserState();
        if (userState === 'not_registered') {
          this.showError(
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ Telegram –±–æ—Ç–µ'
          );
        } else if (userState === 'registered_not_confirmed') {
          this.showError(
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ Telegram –±–æ—Ç–µ'
          );
        }
        return;
      }

      const amountInput = document.getElementById('bonus-amount-input');
      const amount = parseFloat(amountInput.value) || 0;

      if (amount <= 0) {
        this.showError('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤');
        return;
      }

      if (amount > this.state.bonusBalance) {
        this.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤');
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º—É–º–∞
      const originalCartTotal = this.getOriginalCartTotal();
      let maxAllowed = originalCartTotal;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (this.state.levelInfo && this.state.levelInfo.paymentPercent < 100) {
        const maxByLevel =
          (originalCartTotal * this.state.levelInfo.paymentPercent) / 100;
        maxAllowed = Math.min(maxAllowed, maxByLevel);

        if (amount > maxByLevel) {
          this.showError(
            `–í–∞—à —É—Ä–æ–≤–µ–Ω—å "${this.state.levelInfo.name}" –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ ${this.state.levelInfo.paymentPercent}% –∑–∞–∫–∞–∑–∞ –±–æ–Ω—É—Å–∞–º–∏ (–º–∞–∫—Å: ${maxByLevel.toFixed(2)} –±–æ–Ω—É—Å–æ–≤)`
          );
          return;
        }
      }

      if (amount > maxAllowed) {
        this.showError(
          `–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${maxAllowed.toFixed(2)} –±–æ–Ω—É—Å–æ–≤`
        );
        return;
      }

      try {
        this.showLoading(true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤)
        this.state.appliedBonuses = amount;
        localStorage.setItem('tilda_applied_bonuses', amount);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ —Å –±–æ–Ω—É—Å–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ webhook
        this.addHiddenBonusField(amount);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –¢–∏–ª—å–¥—ã –∫–∞–∫ –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∏—Å–∫–∞—É–Ω—Ç–æ–º
        try {
          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
          this.clearAllPromocodes();

          // –ñ–¥–µ–º –æ—á–∏—Å—Ç–∫–∏
          await new Promise((resolve) => setTimeout(resolve, 300));

          // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å –±–æ–Ω—É—Å–∞–º–∏
          if (typeof window.t_input_promocode__addPromocode === 'function') {
            window.t_input_promocode__addPromocode({
              promocode: 'GUPIL',
              discountsum: amount
            });

            // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
            if (typeof window.tcart__calcPromocode === 'function') {
              try {
                window.tcart__calcPromocode();
              } catch (_) {}
            }

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Tilda)
            if (typeof window.tcart__calcAmountWithDiscounts === 'function') {
              try {
                window.tcart__calcAmountWithDiscounts();
              } catch (_) {}
            }

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            if (typeof window.tcart__reDrawTotal === 'function') {
              try {
                window.tcart__reDrawTotal();
              } catch (_) {}
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            if (
              typeof window.tcart__updateTotalProductsinCartObj === 'function'
            ) {
              try {
                window.tcart__updateTotalProductsinCartObj();
              } catch (_) {}
            }

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∑–∏–Ω—ã
            if (typeof window.tcart__reDraw === 'function') {
              try {
                window.tcart__reDraw();
              } catch (_) {}
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            if (typeof window.tcart__saveLocalObj === 'function') {
              try {
                window.tcart__saveLocalObj();
              } catch (_) {}
            }
          }
        } catch (_) {}

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        this.forceUpdateCartDisplay();

        this.showSuccess(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${amount.toFixed(2)} –±–æ–Ω—É—Å–æ–≤.`);
      } catch (error) {
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤');
        this.log('–û—à–∏–±–∫–∞:', error);
      } finally {
        this.showLoading(false);
      }
    },

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    forceUpdateCartDisplay: function () {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if (
          typeof window.tcart !== 'undefined' &&
          window.tcart.total !== undefined
        ) {
          const counter = document.querySelector('.t706__carticon-counter');
          if (counter) {
            counter.innerHTML = window.tcart.total;
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        const totalElements = document.querySelectorAll(
          '.t706__cartwin-totalamount, .t706__cartwin-totalamount-value'
        );
        totalElements.forEach((el) => {
          if (el && window.tcart && window.tcart.totalAmount !== undefined) {
            el.innerHTML = window.tcart.totalAmount;
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        const totalContent = document.querySelector(
          '.t706__cartwin-totalamount-content'
        );
        if (
          totalContent &&
          window.tcart &&
          window.tcart.totalAmount !== undefined
        ) {
          const label = totalContent.querySelector(
            '.t706__cartwin-totalamount-label'
          );
          const amount = totalContent.querySelector(
            '.t706__cartwin-totalamount'
          );
          if (label) label.innerHTML = '–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ';
          if (amount) {
            const price = amount.querySelector(
              '.t706__cartwin-prodamount-price'
            );
            const currency = amount.querySelector(
              '.t706__cartwin-prodamount-currency'
            );
            if (price) price.innerHTML = window.tcart.totalAmount;
            if (currency) currency.innerHTML = '—Ä.';
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
        const discountElements = document.querySelectorAll(
          '.t706__cartwin-totalamount-info_value'
        );
        discountElements.forEach((el) => {
          if (el.innerHTML.includes('—Ä.')) {
            el.innerHTML = `<div class="t706__cartwin-prodamount-price">${this.state.appliedBonuses}</div><div class="t706__cartwin-prodamount-currency">—Ä.</div>`;
          }
        });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const event = new CustomEvent('tcart:updated', {
          detail: { bonuses: this.state.appliedBonuses }
        });
        document.dispatchEvent(event);

        this.log('–ö–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
      }
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è —Å –±–æ–Ω—É—Å–∞–º–∏
    addHiddenBonusField: function (amount) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      const oldField = document.getElementById('applied_bonuses_field');
      if (oldField) oldField.remove();

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
      const hiddenField = document.createElement('input');
      hiddenField.type = 'hidden';
      hiddenField.id = 'applied_bonuses_field';
      hiddenField.name = 'appliedBonuses';
      hiddenField.value = amount;

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º—É
      const form = document.querySelector('.t-form, form');
      if (form) {
        form.appendChild(hiddenField);
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º—ã
    updateCartVisualTotal: function (newTotal) {
      const totalElement = document.querySelector(
        '.t706__cartwin-totalamount-withoutdelivery, .t706__cartwin-totalamount'
      );
      if (totalElement) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if (!totalElement.dataset.originalAmount) {
          totalElement.dataset.originalAmount = totalElement.textContent;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        totalElement.innerHTML = `
          <s style="color: #999; font-size: 0.9em;">${totalElement.dataset.originalAmount}</s>
          <br>
          ${newTotal} ‚ÇΩ
        `;
      }
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading: function (show) {
      const button = document.getElementById('apply-bonus-button');
      if (button) {
        button.disabled = show;
        button.innerHTML = show
          ? '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ...<span class="bonus-loading"></span>'
          : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã';
      }
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
    showSuccess: function (message) {
      const status = document.getElementById('bonus-status');
      status.innerHTML = `<div class="bonus-applied">‚úì ${message}</div>`;
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    showError: function (message) {
      const status = document.getElementById('bonus-status');
      status.innerHTML = `<div class="bonus-error">‚úó ${message}</div>`;

      // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        status.innerHTML = '';
      }, 3000);
    },

    // –°–±—Ä–æ—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    resetAppliedBonuses: function () {
      this.state.appliedBonuses = 0;
      localStorage.removeItem('tilda_applied_bonuses');

      const totalElement = document.querySelector(
        '.t706__cartwin-totalamount-withoutdelivery, .t706__cartwin-totalamount'
      );
      if (totalElement && totalElement.dataset.originalAmount) {
        totalElement.textContent = totalElement.dataset.originalAmount;
      }

      const status = document.getElementById('bonus-status');
      if (status) status.innerHTML = '';
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function () {
      // –í–∏–¥–∂–µ—Ç –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ TildaBonusWidget.init()
    });
  }
})();
