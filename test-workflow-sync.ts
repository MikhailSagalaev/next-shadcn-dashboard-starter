/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Workflow Constructor
 */

import { ConditionEvaluator } from './src/lib/services/workflow/condition-evaluator';
import { nodeHandlersRegistry } from './src/lib/services/workflow/node-handlers-registry';

console.log('üß™ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Workflow Constructor\n');

// –¢–µ—Å—Ç 1: Condition Evaluator - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Condition Evaluator (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã):');

try {
  // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  const expressions = [
    { expr: 'balance > 100', expected: false },
    { expr: 'get("balance") > 100', expected: true },
    { expr: 'balance > 100 && count < 10', expected: true },
    { expr: 'Math.max(balance, 100)', expected: true },
    { expr: 'simple === "test"', expected: false },
    { expr: 'user.name === "John" && user.age > 18', expected: true },
  ];

  for (const test of expressions) {
    try {
      const result = ConditionEvaluator.isComplexExpression(test.expr);
      const status = result === test.expected ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} "${test.expr}" ‚Üí ${result ? '—Å–ª–æ–∂–Ω–æ–µ' : '–ø—Ä–æ—Å—Ç–æ–µ'} (expected: ${test.expected ? '—Å–ª–æ–∂–Ω–æ–µ' : '–ø—Ä–æ—Å—Ç–æ–µ'})`);
    } catch (error) {
      console.log(`  ‚ùå "${test.expr}" ‚Üí Error: ${error instanceof Error ? error.message : 'Unknown'}`);
    }
  }

  // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π
  const simpleConditions = [
    { variable: 150, operator: 'greater', value: 100, expected: true },
    { variable: 'hello', operator: 'equals', value: 'hello', expected: true },
    { variable: 'hello', operator: 'contains', value: 'ell', expected: true },
    { variable: null, operator: 'is_empty', value: null, expected: true },
  ];

  console.log('\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π:');
  for (const test of simpleConditions) {
    try {
      const result = ConditionEvaluator.evaluateSimple(test.variable, test.operator, test.value);
      const status = result === test.expected ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${test.variable} ${test.operator} ${test.value} ‚Üí ${result}`);
    } catch (error) {
      console.log(`  ‚ùå ${test.variable} ${test.operator} ${test.value} ‚Üí Error: ${error instanceof Error ? error.message : 'Unknown'}`);
    }
  }

  console.log('‚úÖ Condition Evaluator –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω\n');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Condition Evaluator:', error);
}

// –¢–µ—Å—Ç 2: Node Handlers Registry
console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Node Handlers Registry:');

try {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º registry (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
  const { initializeNodeHandlers } = require('./src/lib/services/workflow/handlers/index');
  initializeNodeHandlers();

  const handlers = nodeHandlersRegistry.listHandlers();
  console.log(`  üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${handlers.length}`);

  const handlerTypes = handlers.map((h: any) => h.constructor.name);
  console.log(`  üéØ –¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ${handlerTypes.join(', ')}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
  const expectedTypes = [
    'trigger.command', 'trigger.message', 'trigger.callback',
    'message', 'condition', 'flow.delay', 'flow.end'
  ];

  for (const type of expectedTypes) {
    const handler = nodeHandlersRegistry.get(type);
    const status = handler ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${type}: ${handler ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
  }

  console.log('‚úÖ Node Handlers Registry –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω\n');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Node Handlers Registry:', error);
}

// –¢–µ—Å—Ç 3: Workflow Node Types
console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ Workflow Node:');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∏–ø—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  const workflowTypes = require('./src/types/workflow');

  const nodeTypes = [
    'trigger.command', 'trigger.message', 'trigger.callback', 'trigger.webhook',
    'trigger.contact', 'trigger.email', 'message', 'action.api_request',
    'action.database_query', 'action.set_variable', 'action.get_variable',
    'action.send_notification', 'action.check_user_linked', 'action.find_user_by_contact',
    'action.link_telegram_account', 'action.get_user_balance', 'condition',
    'flow.delay', 'flow.loop', 'flow.sub_workflow', 'flow.jump', 'flow.end',
    'integration.webhook', 'integration.analytics'
  ];

  console.log(`  üìä –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –Ω–æ–¥: ${nodeTypes.length}`);
  console.log(`  üéØ –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤: ${nodeTypes.slice(0, 5).join(', ')}...`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WorkflowNodeType —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (workflowTypes.WorkflowNodeType) {
    console.log('  ‚úÖ WorkflowNodeType —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
  } else {
    console.log('  ‚ùå WorkflowNodeType —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  console.log('‚úÖ –¢–∏–ø—ã Workflow Node –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã\n');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∏–ø–∞—Ö Workflow Node:', error);
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤:');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
  const modules = [
    './src/lib/services/workflow-runtime.service',
    './src/lib/services/simple-workflow-processor',
    './src/lib/services/workflow/execution-context-manager',
    './src/lib/services/workflow/variable-manager',
    './src/features/workflow/components/workflow-constructor',
    './src/features/workflow/hooks/use-workflow'
  ];

  for (const modulePath of modules) {
    try {
      require(modulePath);
      console.log(`  ‚úÖ ${modulePath} - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    } catch (error) {
      console.log(`  ‚ùå ${modulePath} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error instanceof Error ? error.message : 'Unknown'}`);
    }
  }

  console.log('‚úÖ –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã\n');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤:', error);
}

console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Workflow Constructor –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìã –†–µ–∑—é–º–µ:');
console.log('- ‚úÖ Condition Evaluator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('- ‚úÖ Node Handlers Registry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
console.log('- ‚úÖ –í—Å–µ —Ç–∏–ø—ã –Ω–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
console.log('- ‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!');
